{
  "data": [
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "What is the name of the set of rules that gocern how a Rust program manages memory?",
              "id": 1,
              "answers": [
                {
                  "answer_id": 1,
                  "document_id": 22,
                  "question_id": 1,
                  "text": "*Ownership* is a set of rules that govern how a Rust program manages memory.",
                  "answer_start": 23,
                  "answer_end": 99,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the memory management concept used by rust?",
              "id": 2,
              "answers": [
                {
                  "answer_id": 2,
                  "document_id": 22,
                  "question_id": 2,
                  "text": "All programs have to manage the way they use a computer’s memory while running.\nSome languages have garbage collection that regularly looks for no-longer-used\nmemory as the program runs; in other languages, the programmer must explicitly\nallocate and free the memory. Rust uses a third approach: memory is managed\nthrough a system of ownership with a set of rules that the compiler checks. If\nany of the rules are violated, the program won’t compile. None of the features\nof ownership will slow down your program while it’s running.",
                  "answer_start": 100,
                  "answer_end": 632,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the differences between the stack and the heap?",
              "id": 3,
              "answers": [
                {
                  "answer_id": 3,
                  "document_id": 22,
                  "question_id": 3,
                  "text": "> Both the stack and the heap are parts of memory available to your code to use\n> at runtime, but they are structured in different ways. The stack stores\n> values in the order it gets them and removes the values in the opposite\n> order. This is referred to as *last in, first out*. Think of a stack of\n> plates: when you add more plates, you put them on top of the pile, and when\n> you need a plate, you take one off the top. Adding or removing plates from\n> the middle or bottom wouldn’t work as well! Adding data is called *pushing\n> onto the stack*, and removing data is called *popping off the stack*. All\n> data stored on the stack must have a known, fixed size. Data with an unknown\n> size at compile time or a size that might change must be stored on the heap\n> instead.\n>\n> The heap is less organized: when you put data on the heap, you request a\n> certain amount of space. The memory allocator finds an empty spot in the heap\n> that is big enough, marks it as being in use, and returns a *pointer*, which\n> is the address of that location. This process is called *allocating on the\n> heap* and is sometimes abbreviated as just *allocating* (pushing values onto\n> the stack is not considered allocating). Because the pointer to the heap is a\n> known, fixed size, you can store the pointer on the stack, but when you want\n> the actual data, you must follow the pointer. Think of being seated at a\n> restaurant. When you enter, you state the number of people in your group, and\n> the host finds an empty table that fits everyone and leads you there. If\n> someone in your group comes late, they can ask where you’ve been seated to\n> find you.",
                  "answer_start": 1624,
                  "answer_end": 3271,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to name adding and removing the data from the stack?",
              "id": 4,
              "answers": [
                {
                  "answer_id": 4,
                  "document_id": 22,
                  "question_id": 4,
                  "text": "Adding data is called *pushing\n> onto the stack*, and removing data is called *popping off the stack*.",
                  "answer_start": 2127,
                  "answer_end": 2229,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why pushing to the stack is faster than allocating on the heap?",
              "id": 5,
              "answers": [
                {
                  "answer_id": 5,
                  "document_id": 22,
                  "question_id": 5,
                  "text": "> Pushing to the stack is faster than allocating on the heap because the\n> allocator never has to search for a place to store new data; that location is\n> always at the top of the stack. Comparatively, allocating space on the heap\n> requires more work because the allocator must first find a big enough space\n> to hold the data and then perform bookkeeping to prepare for the next\n> allocation.",
                  "answer_start": 3274,
                  "answer_end": 3668,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why accessing data in the heap is slower than accessing data on the stack?",
              "id": 6,
              "answers": [
                {
                  "answer_id": 6,
                  "document_id": 22,
                  "question_id": 6,
                  "text": "> Accessing data in the heap is slower than accessing data on the stack because\n> you have to follow a pointer to get there. Contemporary processors are faster\n> if they jump around less in memory. Continuing the analogy, consider a server\n> at a restaurant taking orders from many tables. It’s most efficient to get\n> all the orders at one table before moving on to the next table. Taking an\n> order from table A, then an order from table B, then one from A again, and\n> then one from B again would be a much slower process. By the same token, a\n> processor can do its job better if it works on data that’s close to other\n> data (as it is on the stack) rather than farther away (as it can be on the\n> heap).",
                  "answer_start": 3671,
                  "answer_end": 4379,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What happens with the valued passed into the function and function's local variables after calling the function?",
              "id": 7,
              "answers": [
                {
                  "answer_id": 7,
                  "document_id": 22,
                  "question_id": 7,
                  "text": "> When your code calls a function, the values passed into the function\n> (including, potentially, pointers to data on the heap) and the function’s\n> local variables get pushed onto the stack. When the function is over, those\n> values get popped off the stack.",
                  "answer_start": 4382,
                  "answer_end": 4641,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the problems that ownership addresses?",
              "id": 8,
              "answers": [
                {
                  "answer_id": 8,
                  "document_id": 22,
                  "question_id": 8,
                  "text": "> Keeping track of what parts of code are using what data on the heap,\n> minimizing the amount of duplicate data on the heap, and cleaning up unused\n> data on the heap so you don’t run out of space are all problems that ownership\n> addresses. Once you understand ownership, you won’t need to think about the\n> stack and the heap very often, but knowing that the main purpose of ownership\n> is to manage heap data can help explain why it works the way it does.",
                  "answer_start": 4644,
                  "answer_end": 5103,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are three ownership rules?",
              "id": 9,
              "answers": [
                {
                  "answer_id": 9,
                  "document_id": 22,
                  "question_id": 9,
                  "text": "First, let’s take a look at the ownership rules. Keep these rules in mind as we\nwork through the examples that illustrate them:\n\n* Each value in Rust has an *owner*.\n* There can only be one owner at a time.\n* When the owner goes out of scope, the value will be dropped.",
                  "answer_start": 5126,
                  "answer_end": 5395,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the scope of the variable?",
              "id": 10,
              "answers": [
                {
                  "answer_id": 10,
                  "document_id": 22,
                  "question_id": 10,
                  "text": "As a first example of ownership, we’ll look at the *scope* of some variables. A\nscope is the range within a program for which an item is valid. Take the\nfollowing variable:",
                  "answer_start": 5742,
                  "answer_end": 5914,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When string literals aren’t suitable for every\nsituation in which we may want to use text?",
              "id": 11,
              "answers": [
                {
                  "answer_id": 11,
                  "document_id": 22,
                  "question_id": 11,
                  "text": "We’ve already seen string literals, where a string value is hardcoded into our\nprogram. String literals are convenient, but they aren’t suitable for every\nsituation in which we may want to use text. One reason is that they’re\nimmutable.",
                  "answer_start": 7705,
                  "answer_end": 7941,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "```rust\nlet s = String::from(\"hello\");\n```\nWhat is the meaning of double colon `::` here?",
              "id": 12,
              "answers": [
                {
                  "answer_id": 12,
                  "document_id": 22,
                  "question_id": 12,
                  "text": "```rust\nlet s = String::from(\"hello\");\n```\n\nThe double colon `::` operator allows us to namespace this particular `from`\nfunction under the `String` type rather than using some sort of name like\n`string_from`.",
                  "answer_start": 8359,
                  "answer_end": 8568,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why string literals are fast and efficient?",
              "id": 13,
              "answers": [
                {
                  "answer_id": 13,
                  "document_id": 22,
                  "question_id": 13,
                  "text": "In the case of a string literal, we know the contents at compile time, so the\ntext is hardcoded directly into the final executable. This is why string\nliterals are fast and efficient.",
                  "answer_start": 9162,
                  "answer_end": 9345,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the role of the garbage collector?",
              "id": 14,
              "answers": [
                {
                  "answer_id": 14,
                  "document_id": 22,
                  "question_id": 14,
                  "text": "In languages with a *garbage collector\n(GC)*, the GC keeps track of and cleans up memory that isn’t being used\nanymore, and we don’t need to think about it.",
                  "answer_start": 10157,
                  "answer_end": 10313,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to not waste the memory if the language doesnt support garbage collector?",
              "id": 15,
              "answers": [
                {
                  "answer_id": 15,
                  "document_id": 22,
                  "question_id": 15,
                  "text": "In most languages without a GC,\nit’s our responsibility to identify when memory is no longer being used and to\ncall code to explicitly free it, just as we did to request it. Doing this\ncorrectly has historically been a difficult programming problem. If we forget,\nwe’ll waste memory. If we do it too early, we’ll have an invalid variable. If\nwe do it twice, that’s a bug too. We need to pair exactly one `allocate` with\nexactly one `free`.",
                  "answer_start": 10314,
                  "answer_end": 10753,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to expand the abbreviation 'RAII'?",
              "id": 16,
              "answers": [
                {
                  "answer_id": 16,
                  "document_id": 22,
                  "question_id": 16,
                  "text": "> Note: In C++, this pattern of deallocating resources at the end of an item’s\n> lifetime is sometimes called *Resource Acquisition Is Initialization (RAII)*.\n> The `drop` function in Rust will be familiar to you if you’ve used RAII\n> patterns.",
                  "answer_start": 11484,
                  "answer_end": 11728,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does \"move\" mean in the terms of rust language?",
              "id": 17,
              "answers": [
                {
                  "answer_id": 17,
                  "document_id": 22,
                  "question_id": 17,
                  "text": "If you’ve heard the terms *shallow copy* and *deep copy* while working with\nother languages, the concept of copying the pointer, length, and capacity\nwithout copying the data probably sounds like making a shallow copy. But\nbecause Rust also invalidates the first variable, instead of being called a\nshallow copy, it’s known as a *move*. In this example, we would say that `s1`\nwas *moved* into `s2`.",
                  "answer_start": 16727,
                  "answer_end": 17126,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which method may be useful if I want to deeply copy the heap data of the string?",
              "id": 18,
              "answers": [
                {
                  "answer_id": 18,
                  "document_id": 22,
                  "question_id": 18,
                  "text": "If we *do* want to deeply copy the heap data of the `String`, not just the\nstack data, we can use a common method called `clone`.",
                  "answer_start": 18098,
                  "answer_end": 18227,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "For what is the 'copy' annotation?",
              "id": 19,
              "answers": [
                {
                  "answer_id": 19,
                  "document_id": 22,
                  "question_id": 19,
                  "text": "Rust has a special annotation called the `Copy` trait that we can place on\ntypes that are stored on the stack, as integers are (we’ll talk more about\ntraits in [Chapter 10][traits]‹!-- ignore -->). If a type implements the `Copy`\ntrait, variables that use it do not move, but rather are trivially copied,\nmaking them still valid after assignment to another variable.",
                  "answer_start": 19715,
                  "answer_end": 20081,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the examples of the types that implement 'Copy'?",
              "id": 20,
              "answers": [
                {
                  "answer_id": 20,
                  "document_id": 22,
                  "question_id": 20,
                  "text": "Here are some of the types that\nimplement `Copy`:\n\n* All the integer types, such as `u32`.\n* The Boolean type, `bool`, with values `true` and `false`.\n* All the floating-point types, such as `f64`.\n* The character type, `char`.\n* Tuples, if they only contain types that also implement `Copy`. For example,\n  `(i32, i32)` implements `Copy`, but `(i32, String)` does not.",
                  "answer_start": 20786,
                  "answer_end": 21155,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## What Is Ownership?\n\n*Ownership* is a set of rules that govern how a Rust program manages memory.\nAll programs have to manage the way they use a computer’s memory while running.\nSome languages have garbage collection that regularly looks for no-longer-used\nmemory as the program runs; in other languages, the programmer must explicitly\nallocate and free the memory. Rust uses a third approach: memory is managed\nthrough a system of ownership with a set of rules that the compiler checks. If\nany of the rules are violated, the program won’t compile. None of the features\nof ownership will slow down your program while it’s running.\n\nBecause ownership is a new concept for many programmers, it does take some time\nto get used to. The good news is that the more experienced you become with Rust\nand the rules of the ownership system, the easier you’ll find it to naturally\ndevelop code that is safe and efficient. Keep at it!\n\nWhen you understand ownership, you’ll have a solid foundation for understanding\nthe features that make Rust unique. In this chapter, you’ll learn ownership by\nworking through some examples that focus on a very common data structure:\nstrings.\n\n> ### The Stack and the Heap\n>\n> Many programming languages don’t require you to think about the stack and the\n> heap very often. But in a systems programming language like Rust, whether a\n> value is on the stack or the heap affects how the language behaves and why\n> you have to make certain decisions. Parts of ownership will be described in\n> relation to the stack and the heap later in this chapter, so here is a brief\n> explanation in preparation.\n>\n> Both the stack and the heap are parts of memory available to your code to use\n> at runtime, but they are structured in different ways. The stack stores\n> values in the order it gets them and removes the values in the opposite\n> order. This is referred to as *last in, first out*. Think of a stack of\n> plates: when you add more plates, you put them on top of the pile, and when\n> you need a plate, you take one off the top. Adding or removing plates from\n> the middle or bottom wouldn’t work as well! Adding data is called *pushing\n> onto the stack*, and removing data is called *popping off the stack*. All\n> data stored on the stack must have a known, fixed size. Data with an unknown\n> size at compile time or a size that might change must be stored on the heap\n> instead.\n>\n> The heap is less organized: when you put data on the heap, you request a\n> certain amount of space. The memory allocator finds an empty spot in the heap\n> that is big enough, marks it as being in use, and returns a *pointer*, which\n> is the address of that location. This process is called *allocating on the\n> heap* and is sometimes abbreviated as just *allocating* (pushing values onto\n> the stack is not considered allocating). Because the pointer to the heap is a\n> known, fixed size, you can store the pointer on the stack, but when you want\n> the actual data, you must follow the pointer. Think of being seated at a\n> restaurant. When you enter, you state the number of people in your group, and\n> the host finds an empty table that fits everyone and leads you there. If\n> someone in your group comes late, they can ask where you’ve been seated to\n> find you.\n>\n> Pushing to the stack is faster than allocating on the heap because the\n> allocator never has to search for a place to store new data; that location is\n> always at the top of the stack. Comparatively, allocating space on the heap\n> requires more work because the allocator must first find a big enough space\n> to hold the data and then perform bookkeeping to prepare for the next\n> allocation.\n>\n> Accessing data in the heap is slower than accessing data on the stack because\n> you have to follow a pointer to get there. Contemporary processors are faster\n> if they jump around less in memory. Continuing the analogy, consider a server\n> at a restaurant taking orders from many tables. It’s most efficient to get\n> all the orders at one table before moving on to the next table. Taking an\n> order from table A, then an order from table B, then one from A again, and\n> then one from B again would be a much slower process. By the same token, a\n> processor can do its job better if it works on data that’s close to other\n> data (as it is on the stack) rather than farther away (as it can be on the\n> heap).\n>\n> When your code calls a function, the values passed into the function\n> (including, potentially, pointers to data on the heap) and the function’s\n> local variables get pushed onto the stack. When the function is over, those\n> values get popped off the stack.\n>\n> Keeping track of what parts of code are using what data on the heap,\n> minimizing the amount of duplicate data on the heap, and cleaning up unused\n> data on the heap so you don’t run out of space are all problems that ownership\n> addresses. Once you understand ownership, you won’t need to think about the\n> stack and the heap very often, but knowing that the main purpose of ownership\n> is to manage heap data can help explain why it works the way it does.\n\n### Ownership Rules\n\nFirst, let’s take a look at the ownership rules. Keep these rules in mind as we\nwork through the examples that illustrate them:\n\n* Each value in Rust has an *owner*.\n* There can only be one owner at a time.\n* When the owner goes out of scope, the value will be dropped.\n\n### Variable Scope\n\nNow that we’re past basic Rust syntax, we won’t include all the `fn main() {`\ncode in examples, so if you’re following along, make sure to put the following\nexamples inside a `main` function manually. As a result, our examples will be a\nbit more concise, letting us focus on the actual details rather than\nboilerplate code.\n\nAs a first example of ownership, we’ll look at the *scope* of some variables. A\nscope is the range within a program for which an item is valid. Take the\nfollowing variable:\n\n```rust\nlet s = \"hello\";\n```\n\nThe variable `s` refers to a string literal, where the value of the string is\nhardcoded into the text of our program. The variable is valid from the point at\nwhich it’s declared until the end of the current *scope*. Listing 4-1 shows a\nprogram with comments annotating where the variable `s` would be valid.\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-01/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 4-1: A variable and the scope in which it is\nvalid</span>\n\nIn other words, there are two important points in time here:\n\n* When `s` comes *into* scope, it is valid.\n* It remains valid until it goes *out of* scope.\n\nAt this point, the relationship between scopes and when variables are valid is\nsimilar to that in other programming languages. Now we’ll build on top of this\nunderstanding by introducing the `String` type.\n\n### The `String` Type\n\nTo illustrate the rules of ownership, we need a data type that is more complex\nthan those we covered in the [“Data Types”][data-types]<!-- ignore --> section\nof Chapter 3. The types covered previously are of a known size, can be stored\non the stack and popped off the stack when their scope is over, and can be\nquickly and trivially copied to make a new, independent instance if another\npart of code needs to use the same value in a different scope. But we want to\nlook at data that is stored on the heap and explore how Rust knows when to\nclean up that data, and the `String` type is a great example.\n\nWe’ll concentrate on the parts of `String` that relate to ownership. These\naspects also apply to other complex data types, whether they are provided by\nthe standard library or created by you. We’ll discuss `String` in more depth in\n[Chapter 8][ch8]<!-- ignore -->.\n\nWe’ve already seen string literals, where a string value is hardcoded into our\nprogram. String literals are convenient, but they aren’t suitable for every\nsituation in which we may want to use text. One reason is that they’re\nimmutable. Another is that not every string value can be known when we write\nour code: for example, what if we want to take user input and store it? For\nthese situations, Rust has a second string type, `String`. This type manages\ndata allocated on the heap and as such is able to store an amount of text that\nis unknown to us at compile time. You can create a `String` from a string\nliteral using the `from` function, like so:\n\n```rust\nlet s = String::from(\"hello\");\n```\n\nThe double colon `::` operator allows us to namespace this particular `from`\nfunction under the `String` type rather than using some sort of name like\n`string_from`. We’ll discuss this syntax more in the [“Method\nSyntax”][method-syntax]<!-- ignore --> section of Chapter 5, and when we talk\nabout namespacing with modules in [“Paths for Referring to an Item in the\nModule Tree”][paths-module-tree]<!-- ignore --> in Chapter 7.\n\nThis kind of string *can* be mutated:\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-01-can-mutate-string/src/main.rs:here}}\n```\n\nSo, what’s the difference here? Why can `String` be mutated but literals\ncannot? The difference is in how these two types deal with memory.\n\n### Memory and Allocation\n\nIn the case of a string literal, we know the contents at compile time, so the\ntext is hardcoded directly into the final executable. This is why string\nliterals are fast and efficient. But these properties only come from the string\nliteral’s immutability. Unfortunately, we can’t put a blob of memory into the\nbinary for each piece of text whose size is unknown at compile time and whose\nsize might change while running the program.\n\nWith the `String` type, in order to support a mutable, growable piece of text,\nwe need to allocate an amount of memory on the heap, unknown at compile time,\nto hold the contents. This means:\n\n* The memory must be requested from the memory allocator at runtime.\n* We need a way of returning this memory to the allocator when we’re done with\n  our `String`.\n\nThat first part is done by us: when we call `String::from`, its implementation\nrequests the memory it needs. This is pretty much universal in programming\nlanguages.\n\nHowever, the second part is different. In languages with a *garbage collector\n(GC)*, the GC keeps track of and cleans up memory that isn’t being used\nanymore, and we don’t need to think about it. In most languages without a GC,\nit’s our responsibility to identify when memory is no longer being used and to\ncall code to explicitly free it, just as we did to request it. Doing this\ncorrectly has historically been a difficult programming problem. If we forget,\nwe’ll waste memory. If we do it too early, we’ll have an invalid variable. If\nwe do it twice, that’s a bug too. We need to pair exactly one `allocate` with\nexactly one `free`.\n\nRust takes a different path: the memory is automatically returned once the\nvariable that owns it goes out of scope. Here’s a version of our scope example\nfrom Listing 4-1 using a `String` instead of a string literal:\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-02-string-scope/src/main.rs:here}}\n```\n\nThere is a natural point at which we can return the memory our `String` needs\nto the allocator: when `s` goes out of scope. When a variable goes out of\nscope, Rust calls a special function for us. This function is called\n[`drop`][drop]<!-- ignore -->, and it’s where the author of `String` can put\nthe code to return the memory. Rust calls `drop` automatically at the closing\ncurly bracket.\n\n> Note: In C++, this pattern of deallocating resources at the end of an item’s\n> lifetime is sometimes called *Resource Acquisition Is Initialization (RAII)*.\n> The `drop` function in Rust will be familiar to you if you’ve used RAII\n> patterns.\n\nThis pattern has a profound impact on the way Rust code is written. It may seem\nsimple right now, but the behavior of code can be unexpected in more\ncomplicated situations when we want to have multiple variables use the data\nwe’ve allocated on the heap. Let’s explore some of those situations now.\n\n<!-- Old heading. Do not remove or links may break. -->\n<a id=\"ways-variables-and-data-interact-move\"></a>\n\n#### Variables and Data Interacting with Move\n\nMultiple variables can interact with the same data in different ways in Rust.\nLet’s look at an example using an integer in Listing 4-2.\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-02/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 4-2: Assigning the integer value of variable `x`\nto `y`</span>\n\nWe can probably guess what this is doing: “bind the value `5` to `x`; then make\na copy of the value in `x` and bind it to `y`.” We now have two variables, `x`\nand `y`, and both equal `5`. This is indeed what is happening, because integers\nare simple values with a known, fixed size, and these two `5` values are pushed\nonto the stack.\n\nNow let’s look at the `String` version:\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-03-string-move/src/main.rs:here}}\n```\n\nThis looks very similar, so we might assume that the way it works would be the\nsame: that is, the second line would make a copy of the value in `s1` and bind\nit to `s2`. But this isn’t quite what happens.\n\nTake a look at Figure 4-1 to see what is happening to `String` under the\ncovers. A `String` is made up of three parts, shown on the left: a pointer to\nthe memory that holds the contents of the string, a length, and a capacity.\nThis group of data is stored on the stack. On the right is the memory on the\nheap that holds the contents.\n\n<img alt=\"Two tables: the first table contains the representation of s1 on the\nstack, consisting of its length (5), capacity (5), and a pointer to the first\nvalue in the second table. The second table contains the representation of the\nstring data on the heap, byte by byte.\" src=\"img/trpl04-01.svg\" class=\"center\"\nstyle=\"width: 50%;\" />\n\n<span class=\"caption\">Figure 4-1: Representation in memory of a `String`\nholding the value `\"hello\"` bound to `s1`</span>\n\nThe length is how much memory, in bytes, the contents of the `String` are\ncurrently using. The capacity is the total amount of memory, in bytes, that the\n`String` has received from the allocator. The difference between length and\ncapacity matters, but not in this context, so for now, it’s fine to ignore the\ncapacity.\n\nWhen we assign `s1` to `s2`, the `String` data is copied, meaning we copy the\npointer, the length, and the capacity that are on the stack. We do not copy the\ndata on the heap that the pointer refers to. In other words, the data\nrepresentation in memory looks like Figure 4-2.\n\n<img alt=\"Three tables: tables s1 and s2 representing those strings on the\nstack, respectively, and both pointing to the same string data on the heap.\"\nsrc=\"img/trpl04-02.svg\" class=\"center\" style=\"width: 50%;\" />\n\n<span class=\"caption\">Figure 4-2: Representation in memory of the variable `s2`\nthat has a copy of the pointer, length, and capacity of `s1`</span>\n\nThe representation does *not* look like Figure 4-3, which is what memory would\nlook like if Rust instead copied the heap data as well. If Rust did this, the\noperation `s2 = s1` could be very expensive in terms of runtime performance if\nthe data on the heap were large.\n\n<img alt=\"Four tables: two tables representing the stack data for s1 and s2,\nand each points to its own copy of string data on the heap.\"\nsrc=\"img/trpl04-03.svg\" class=\"center\" style=\"width: 50%;\" />\n\n<span class=\"caption\">Figure 4-3: Another possibility for what `s2 = s1` might\ndo if Rust copied the heap data as well</span>\n\nEarlier, we said that when a variable goes out of scope, Rust automatically\ncalls the `drop` function and cleans up the heap memory for that variable. But\nFigure 4-2 shows both data pointers pointing to the same location. This is a\nproblem: when `s2` and `s1` go out of scope, they will both try to free the\nsame memory. This is known as a *double free* error and is one of the memory\nsafety bugs we mentioned previously. Freeing memory twice can lead to memory\ncorruption, which can potentially lead to security vulnerabilities.\n\nTo ensure memory safety, after the line `let s2 = s1;`, Rust considers `s1` as\nno longer valid. Therefore, Rust doesn’t need to free anything when `s1` goes\nout of scope. Check out what happens when you try to use `s1` after `s2` is\ncreated; it won’t work:\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-04-cant-use-after-move/src/main.rs:here}}\n```\n\nYou’ll get an error like this because Rust prevents you from using the\ninvalidated reference:\n\n```console\n{{#include ../listings/ch04-understanding-ownership/no-listing-04-cant-use-after-move/output.txt}}\n```\n\nIf you’ve heard the terms *shallow copy* and *deep copy* while working with\nother languages, the concept of copying the pointer, length, and capacity\nwithout copying the data probably sounds like making a shallow copy. But\nbecause Rust also invalidates the first variable, instead of being called a\nshallow copy, it’s known as a *move*. In this example, we would say that `s1`\nwas *moved* into `s2`. So, what actually happens is shown in Figure 4-4.\n\n<img alt=\"Three tables: tables s1 and s2 representing those strings on the\nstack, respectively, and both pointing to the same string data on the heap.\nTable s1 is grayed out be-cause s1 is no longer valid; only s2 can be used to\naccess the heap data.\" src=\"img/trpl04-04.svg\" class=\"center\" style=\"width:\n50%;\" />\n\n<span class=\"caption\">Figure 4-4: Representation in memory after `s1` has been\ninvalidated</span>\n\nThat solves our problem! With only `s2` valid, when it goes out of scope it\nalone will free the memory, and we’re done.\n\nIn addition, there’s a design choice that’s implied by this: Rust will never\nautomatically create “deep” copies of your data. Therefore, any *automatic*\ncopying can be assumed to be inexpensive in terms of runtime performance.\n\n<!-- Old heading. Do not remove or links may break. -->\n<a id=\"ways-variables-and-data-interact-clone\"></a>\n\n#### Variables and Data Interacting with Clone\n\nIf we *do* want to deeply copy the heap data of the `String`, not just the\nstack data, we can use a common method called `clone`. We’ll discuss method\nsyntax in Chapter 5, but because methods are a common feature in many\nprogramming languages, you’ve probably seen them before.\n\nHere’s an example of the `clone` method in action:\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-05-clone/src/main.rs:here}}\n```\n\nThis works just fine and explicitly produces the behavior shown in Figure 4-3,\nwhere the heap data *does* get copied.\n\nWhen you see a call to `clone`, you know that some arbitrary code is being\nexecuted and that code may be expensive. It’s a visual indicator that something\ndifferent is going on.\n\n#### Stack-Only Data: Copy\n\nThere’s another wrinkle we haven’t talked about yet. This code using\nintegers—part of which was shown in Listing 4-2—works and is valid:\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-06-copy/src/main.rs:here}}\n```\n\nBut this code seems to contradict what we just learned: we don’t have a call to\n`clone`, but `x` is still valid and wasn’t moved into `y`.\n\nThe reason is that types such as integers that have a known size at compile\ntime are stored entirely on the stack, so copies of the actual values are quick\nto make. That means there’s no reason we would want to prevent `x` from being\nvalid after we create the variable `y`. In other words, there’s no difference\nbetween deep and shallow copying here, so calling `clone` wouldn’t do anything\ndifferent from the usual shallow copying, and we can leave it out.\n\nRust has a special annotation called the `Copy` trait that we can place on\ntypes that are stored on the stack, as integers are (we’ll talk more about\ntraits in [Chapter 10][traits]<!-- ignore -->). If a type implements the `Copy`\ntrait, variables that use it do not move, but rather are trivially copied,\nmaking them still valid after assignment to another variable.\n\nRust won’t let us annotate a type with `Copy` if the type, or any of its parts,\nhas implemented the `Drop` trait. If the type needs something special to happen\nwhen the value goes out of scope and we add the `Copy` annotation to that type,\nwe’ll get a compile-time error. To learn about how to add the `Copy` annotation\nto your type to implement the trait, see [“Derivable\nTraits”][derivable-traits]<!-- ignore --> in Appendix C.\n\nSo, what types implement the `Copy` trait? You can check the documentation for\nthe given type to be sure, but as a general rule, any group of simple scalar\nvalues can implement `Copy`, and nothing that requires allocation or is some\nform of resource can implement `Copy`. Here are some of the types that\nimplement `Copy`:\n\n* All the integer types, such as `u32`.\n* The Boolean type, `bool`, with values `true` and `false`.\n* All the floating-point types, such as `f64`.\n* The character type, `char`.\n* Tuples, if they only contain types that also implement `Copy`. For example,\n  `(i32, i32)` implements `Copy`, but `(i32, String)` does not.\n\n### Ownership and Functions\n\nThe mechanics of passing a value to a function are similar to those when\nassigning a value to a variable. Passing a variable to a function will move or\ncopy, just as assignment does. Listing 4-3 has an example with some annotations\nshowing where variables go into and out of scope.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-03/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 4-3: Functions with ownership and scope\nannotated</span>\n\nIf we tried to use `s` after the call to `takes_ownership`, Rust would throw a\ncompile-time error. These static checks protect us from mistakes. Try adding\ncode to `main` that uses `s` and `x` to see where you can use them and where\nthe ownership rules prevent you from doing so.\n\n### Return Values and Scope\n\nReturning values can also transfer ownership. Listing 4-4 shows an example of a\nfunction that returns some value, with similar annotations as those in Listing\n4-3.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-04/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 4-4: Transferring ownership of return\nvalues</span>\n\nThe ownership of a variable follows the same pattern every time: assigning a\nvalue to another variable moves it. When a variable that includes data on the\nheap goes out of scope, the value will be cleaned up by `drop` unless ownership\nof the data has been moved to another variable.\n\nWhile this works, taking ownership and then returning ownership with every\nfunction is a bit tedious. What if we want to let a function use a value but\nnot take ownership? It’s quite annoying that anything we pass in also needs to\nbe passed back if we want to use it again, in addition to any data resulting\nfrom the body of the function that we might want to return as well.\n\nRust does let us return multiple values using a tuple, as shown in Listing 4-5.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-05/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 4-5: Returning ownership of parameters</span>\n\nBut this is too much ceremony and a lot of work for a concept that should be\ncommon. Luckily for us, Rust has a feature for using a value without\ntransferring ownership, called *references*.\n\n[data-types]: ch03-02-data-types.html#data-types\n[ch8]: ch08-02-strings.html\n[traits]: ch10-02-traits.html\n[derivable-traits]: appendix-03-derivable-traits.html\n[method-syntax]: ch05-03-method-syntax.html#method-syntax\n[paths-module-tree]: ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\n[drop]: ../std/ops/trait.Drop.html#tymethod.drop\n",
          "document_id": 22
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "What is the reference in rust language?",
              "id": 21,
              "answers": [
                {
                  "answer_id": 21,
                  "document_id": 23,
                  "question_id": 21,
                  "text": "A *reference* is like a pointer in that it’s an address we can follow to access\nthe data stored at that address; that data is owned by some other variable.\nUnlike a pointer, a reference is guaranteed to point to a valid value of a\nparticular type for the life of that reference.",
                  "answer_start": 323,
                  "answer_end": 601,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does '&' means in rust language?",
              "id": 22,
              "answers": [
                {
                  "answer_id": 22,
                  "document_id": 23,
                  "question_id": 22,
                  "text": "we take `&String` rather than\n`String`. These ampersands represent *references*, and they allow you to refer\nto some value without taking ownership of it.",
                  "answer_start": 1115,
                  "answer_end": 1269,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the opposite of referencing by using '&'?",
              "id": 23,
              "answers": [
                {
                  "answer_id": 23,
                  "document_id": 23,
                  "question_id": 23,
                  "text": "> Note: The opposite of referencing by using `&` is *dereferencing*, which is\n> accomplished with the dereference operator, `*`. We’ll see some uses of the\n> dereference operator in Chapter 8 and discuss details of dereferencing in",
                  "answer_start": 1615,
                  "answer_end": 1846,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How we call the action of creating a reference?",
              "id": 24,
              "answers": [
                {
                  "answer_id": 24,
                  "document_id": 23,
                  "question_id": 24,
                  "text": "We call the action of creating a reference *borrowing*.",
                  "answer_start": 2914,
                  "answer_end": 2969,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Are the references mutable or immutable?",
              "id": 25,
              "answers": [
                {
                  "answer_id": 25,
                  "document_id": 23,
                  "question_id": 25,
                  "text": "Just as variables are immutable by default, so are references. We’re not\nallowed to modify something we have a reference to.",
                  "answer_start": 3606,
                  "answer_end": 3730,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the weakness of mutable references?",
              "id": 26,
              "answers": [
                {
                  "answer_id": 26,
                  "document_id": 23,
                  "question_id": 26,
                  "text": "Mutable references have one big restriction: if you have a mutable reference to\na value, you can have no other references to that value.",
                  "answer_start": 4381,
                  "answer_end": 4517,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When a \"data race\" happens?",
              "id": 27,
              "answers": [
                {
                  "answer_id": 27,
                  "document_id": 23,
                  "question_id": 27,
                  "text": "A *data race* is similar to a race\ncondition and happens when these three behaviors occur:\n\n* Two or more pointers access the same data at the same time.\n* At least one of the pointers is being used to write to the data.\n* There’s no mechanism being used to synchronize access to the data.",
                  "answer_start": 5633,
                  "answer_end": 5922,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How rust prevents the problem of data races?",
              "id": 28,
              "answers": [
                {
                  "answer_id": 28,
                  "document_id": 23,
                  "question_id": 28,
                  "text": "Data races cause undefined behavior and can be difficult to diagnose and fix\nwhen you’re trying to track them down at runtime; Rust prevents this problem by\nrefusing to compile code with data races!\n",
                  "answer_start": 5924,
                  "answer_end": 6123,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When starts and ends a reference's scope?",
              "id": 29,
              "answers": [
                {
                  "answer_id": 29,
                  "document_id": 23,
                  "question_id": 29,
                  "text": "Note that a reference’s scope starts from where it is introduced and continues\nthrough the last time that reference is used.",
                  "answer_start": 7159,
                  "answer_end": 7283,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is a dangling pointer?",
              "id": 30,
              "answers": [
                {
                  "answer_id": 30,
                  "document_id": 23,
                  "question_id": 30,
                  "text": "In languages with pointers, it’s easy to erroneously create a *dangling\npointer*—a pointer that references a location in memory that may have been\ngiven to someone else—by freeing some memory while preserving a pointer to that\nmemory.",
                  "answer_start": 8220,
                  "answer_end": 8454,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How will Rust prevent creating dangling references?",
              "id": 31,
              "answers": [
                {
                  "answer_id": 31,
                  "document_id": 23,
                  "question_id": 31,
                  "text": "In Rust, by contrast, the compiler guarantees that references will\nnever be dangling references: if you have a reference to some data, the\ncompiler will ensure that the data will not go out of scope before the\nreference to the data does.\n\nLet’s try to create a dangling reference to see how Rust prevents them with a\ncompile-time error:",
                  "answer_start": 8455,
                  "answer_end": 8791,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## References and Borrowing\n\nThe issue with the tuple code in Listing 4-5 is that we have to return the\n`String` to the calling function so we can still use the `String` after the\ncall to `calculate_length`, because the `String` was moved into\n`calculate_length`. Instead, we can provide a reference to the `String` value.\nA *reference* is like a pointer in that it’s an address we can follow to access\nthe data stored at that address; that data is owned by some other variable.\nUnlike a pointer, a reference is guaranteed to point to a valid value of a\nparticular type for the life of that reference.\n\nHere is how you would define and use a `calculate_length` function that has a\nreference to an object as a parameter instead of taking ownership of the value:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-07-reference/src/main.rs:all}}\n```\n\nFirst, notice that all the tuple code in the variable declaration and the\nfunction return value is gone. Second, note that we pass `&s1` into\n`calculate_length` and, in its definition, we take `&String` rather than\n`String`. These ampersands represent *references*, and they allow you to refer\nto some value without taking ownership of it. Figure 4-5 depicts this concept.\n\n<img alt=\"Three tables: the table for s contains only a pointer to the table\nfor s1. The table for s1 contains the stack data for s1 and points to the\nstring data on the heap.\" src=\"img/trpl04-05.svg\" class=\"center\" />\n\n<span class=\"caption\">Figure 4-5: A diagram of `&String s` pointing at `String\ns1`</span>\n\n> Note: The opposite of referencing by using `&` is *dereferencing*, which is\n> accomplished with the dereference operator, `*`. We’ll see some uses of the\n> dereference operator in Chapter 8 and discuss details of dereferencing in\n> Chapter 15.\n\nLet’s take a closer look at the function call here:\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-07-reference/src/main.rs:here}}\n```\n\nThe `&s1` syntax lets us create a reference that *refers* to the value of `s1`\nbut does not own it. Because it does not own it, the value it points to will\nnot be dropped when the reference stops being used.\n\nLikewise, the signature of the function uses `&` to indicate that the type of\nthe parameter `s` is a reference. Let’s add some explanatory annotations:\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-08-reference-with-annotations/src/main.rs:here}}\n```\n\nThe scope in which the variable `s` is valid is the same as any function\nparameter’s scope, but the value pointed to by the reference is not dropped\nwhen `s` stops being used, because `s` doesn’t have ownership. When functions\nhave references as parameters instead of the actual values, we won’t need to\nreturn the values in order to give back ownership, because we never had\nownership.\n\nWe call the action of creating a reference *borrowing*. As in real life, if a\nperson owns something, you can borrow it from them. When you’re done, you have\nto give it back. You don’t own it.\n\nSo, what happens if we try to modify something we’re borrowing? Try the code in\nListing 4-6. Spoiler alert: it doesn’t work!\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-06/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 4-6: Attempting to modify a borrowed value</span>\n\nHere’s the error:\n\n```console\n{{#include ../listings/ch04-understanding-ownership/listing-04-06/output.txt}}\n```\n\nJust as variables are immutable by default, so are references. We’re not\nallowed to modify something we have a reference to.\n\n### Mutable References\n\nWe can fix the code from Listing 4-6 to allow us to modify a borrowed value\nwith just a few small tweaks that use, instead, a *mutable reference*:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-09-fixes-listing-04-06/src/main.rs}}\n```\n\nFirst we change `s` to be `mut`. Then we create a mutable reference with `&mut\ns` where we call the `change` function, and update the function signature to\naccept a mutable reference with `some_string: &mut String`. This makes it very\nclear that the `change` function will mutate the value it borrows.\n\nMutable references have one big restriction: if you have a mutable reference to\na value, you can have no other references to that value. This code that\nattempts to create two mutable references to `s` will fail:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-10-multiple-mut-not-allowed/src/main.rs:here}}\n```\n\nHere’s the error:\n\n```console\n{{#include ../listings/ch04-understanding-ownership/no-listing-10-multiple-mut-not-allowed/output.txt}}\n```\n\nThis error says that this code is invalid because we cannot borrow `s` as\nmutable more than once at a time. The first mutable borrow is in `r1` and must\nlast until it’s used in the `println!`, but between the creation of that\nmutable reference and its usage, we tried to create another mutable reference\nin `r2` that borrows the same data as `r1`.\n\nThe restriction preventing multiple mutable references to the same data at the\nsame time allows for mutation but in a very controlled fashion. It’s something\nthat new Rustaceans struggle with because most languages let you mutate\nwhenever you’d like. The benefit of having this restriction is that Rust can\nprevent data races at compile time. A *data race* is similar to a race\ncondition and happens when these three behaviors occur:\n\n* Two or more pointers access the same data at the same time.\n* At least one of the pointers is being used to write to the data.\n* There’s no mechanism being used to synchronize access to the data.\n\nData races cause undefined behavior and can be difficult to diagnose and fix\nwhen you’re trying to track them down at runtime; Rust prevents this problem by\nrefusing to compile code with data races!\n\nAs always, we can use curly brackets to create a new scope, allowing for\nmultiple mutable references, just not *simultaneous* ones:\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-11-muts-in-separate-scopes/src/main.rs:here}}\n```\n\nRust enforces a similar rule for combining mutable and immutable references.\nThis code results in an error:\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-12-immutable-and-mutable-not-allowed/src/main.rs:here}}\n```\n\nHere’s the error:\n\n```console\n{{#include ../listings/ch04-understanding-ownership/no-listing-12-immutable-and-mutable-not-allowed/output.txt}}\n```\n\nWhew! We *also* cannot have a mutable reference while we have an immutable one\nto the same value.\n\nUsers of an immutable reference don’t expect the value to suddenly change out\nfrom under them! However, multiple immutable references are allowed because no\none who is just reading the data has the ability to affect anyone else’s\nreading of the data.\n\nNote that a reference’s scope starts from where it is introduced and continues\nthrough the last time that reference is used. For instance, this code will\ncompile because the last usage of the immutable references, the `println!`,\noccurs before the mutable reference is introduced:\n\n```rust,edition2021\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-13-reference-scope-ends/src/main.rs:here}}\n```\n\nThe scopes of the immutable references `r1` and `r2` end after the `println!`\nwhere they are last used, which is before the mutable reference `r3` is\ncreated. These scopes don’t overlap, so this code is allowed: the compiler can\ntell that the reference is no longer being used at a point before the end of\nthe scope.\n\nEven though borrowing errors may be frustrating at times, remember that it’s\nthe Rust compiler pointing out a potential bug early (at compile time rather\nthan at runtime) and showing you exactly where the problem is. Then you don’t\nhave to track down why your data isn’t what you thought it was.\n\n### Dangling References\n\nIn languages with pointers, it’s easy to erroneously create a *dangling\npointer*—a pointer that references a location in memory that may have been\ngiven to someone else—by freeing some memory while preserving a pointer to that\nmemory. In Rust, by contrast, the compiler guarantees that references will\nnever be dangling references: if you have a reference to some data, the\ncompiler will ensure that the data will not go out of scope before the\nreference to the data does.\n\nLet’s try to create a dangling reference to see how Rust prevents them with a\ncompile-time error:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-14-dangling-reference/src/main.rs}}\n```\n\nHere’s the error:\n\n```console\n{{#include ../listings/ch04-understanding-ownership/no-listing-14-dangling-reference/output.txt}}\n```\n\nThis error message refers to a feature we haven’t covered yet: lifetimes. We’ll\ndiscuss lifetimes in detail in Chapter 10. But, if you disregard the parts\nabout lifetimes, the message does contain the key to why this code is a problem:\n\n```text\nthis function's return type contains a borrowed value, but there is no value\nfor it to be borrowed from\n```\n\nLet’s take a closer look at exactly what’s happening at each stage of our\n`dangle` code:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-15-dangling-reference-annotated/src/main.rs:here}}\n```\n\nBecause `s` is created inside `dangle`, when the code of `dangle` is finished,\n`s` will be deallocated. But we tried to return a reference to it. That means\nthis reference would be pointing to an invalid `String`. That’s no good! Rust\nwon’t let us do this.\n\nThe solution here is to return the `String` directly:\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-16-no-dangle/src/main.rs:here}}\n```\n\nThis works without any problems. Ownership is moved out, and nothing is\ndeallocated.\n\n### The Rules of References\n\nLet’s recap what we’ve discussed about references:\n\n* At any given time, you can have *either* one mutable reference *or* any\n  number of immutable references.\n* References must always be valid.\n\nNext, we’ll look at a different kind of reference: slices.\n",
          "document_id": 23
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "What is the usage of slices?",
              "id": 32,
              "answers": [
                {
                  "answer_id": 32,
                  "document_id": 24,
                  "question_id": 32,
                  "text": "*Slices* let you reference a contiguous sequence of elements in a collection\nrather than the whole collection. ",
                  "answer_start": 19,
                  "answer_end": 130,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Does a slice have a ownership?",
              "id": 33,
              "answers": [
                {
                  "answer_id": 33,
                  "document_id": 24,
                  "question_id": 33,
                  "text": "A slice is a kind of reference, so it does\nnot have ownership.",
                  "answer_start": 130,
                  "answer_end": 192,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What returns 'iter' method?",
              "id": 34,
              "answers": [
                {
                  "answer_id": 34,
                  "document_id": 24,
                  "question_id": 34,
                  "text": "For now, know that `iter` is a method that returns each element in a collection",
                  "answer_start": 1828,
                  "answer_end": 1907,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does 'enumerate' method return?",
              "id": 35,
              "answers": [
                {
                  "answer_id": 35,
                  "document_id": 24,
                  "question_id": 35,
                  "text": "`enumerate` wraps the result of `iter` and returns each element as\npart of a tuple instead. The first element of the tuple returned from\n`enumerate` is the index, and the second element is a reference to the element.\nThis is a bit more convenient than calculating the index ourselves.",
                  "answer_start": 1917,
                  "answer_end": 2201,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to return the length of the string?",
              "id": 36,
              "answers": [
                {
                  "answer_id": 36,
                  "document_id": 24,
                  "question_id": 36,
                  "text": "Otherwise, we return the length of the string by using `s.len()`.",
                  "answer_start": 2742,
                  "answer_end": 2807,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What I can do if I have three unrelated variables floating around that need to be kept in sync?",
              "id": 37,
              "answers": [
                {
                  "answer_id": 37,
                  "document_id": 24,
                  "question_id": 37,
                  "text": "Now we’re tracking a starting *and* an ending index, and we have even more\nvalues that were calculated from data in a particular state but aren’t tied to\nthat state at all. We have three unrelated variables floating around that need\nto be kept in sync.\n\nLuckily, Rust has a solution to this problem: string slices.",
                  "answer_start": 4352,
                  "answer_end": 4666,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "```rust\nlet s = String::from(\"hello\");\n\nlet slice = &s[0..2];\nlet slice2 = &s[..2];\n```\nIs there a difference between slice and slice2?",
              "id": 38,
              "answers": [
                {
                  "answer_id": 38,
                  "document_id": 24,
                  "question_id": 38,
                  "text": "`‹/span>\n\nWith Rust’s `..` range syntax, if you want to start at index 0, you can drop\nthe value before the two periods. In other words, these are equal:\n\n```rust\nlet s = String::from(\"hello\");\n\nlet slice = &s[0..2];\nlet slice = &s",
                  "answer_start": 6031,
                  "answer_end": 6262,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "```rust\nlet s = String::from(\"hello\");\n\nlet slice = &s[0..2];\nlet slice = &s[..2];\n```\nDoes last two lines do the same thing or different?",
              "id": 39,
              "answers": [
                {
                  "answer_id": 39,
                  "document_id": 24,
                  "question_id": 39,
                  "text": "..];\n```\n\nYou can also drop both values to take a slice of the entire string. So these\nare equal:\n\n```rust\nlet s = String::from(\"hello\");\n\nlet len = s.len();\n\nlet slice = &s[0..len];\nlet slice = &",
                  "answer_start": 6510,
                  "answer_end": 6706,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I pass a string slice and a 'String'?",
              "id": 40,
              "answers": [
                {
                  "answer_id": 40,
                  "document_id": 24,
                  "question_id": 40,
                  "text": "r‹/span>\n\nIf we have a string slice, we can pass that directly. If we have a `String`, we\ncan pass a slice of the `String` or a reference to the `String`. This\nflexibility takes advantage of *deref ",
                  "answer_start": 10794,
                  "answer_end": 10992,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is an advantage of defining a function to take a string slice instead of a reference to a `String`?",
              "id": 41,
              "answers": [
                {
                  "answer_id": 41,
                  "document_id": 24,
                  "question_id": 41,
                  "text": "pter 15.\n\nDefining a function to take a string slice instead of a reference to a `String`\nmakes our API more general and useful without losing any functionality:\n\n‹span class=\"filename\">Filename: src/main",
                  "answer_start": 11131,
                  "answer_end": 11335,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the advantages of the concepts of ownership, borrowing, and slices in rust language?",
              "id": 42,
              "answers": [
                {
                  "answer_id": 42,
                  "document_id": 24,
                  "question_id": 42,
                  "text": " Summary\n\nThe concepts of ownership, borrowing, and slices ensure memory safety in Rust\nprograms at compile time. The Rust language gives you control over your memory\nusage in the same way as other systems programming languages, but having the\nowner of data automatically clean up that data when the owner goes out of scope\nmeans you don’t have to write and debug extra code to get thi",
                  "answer_start": 12133,
                  "answer_end": 12518,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## The Slice Type\n\n*Slices* let you reference a contiguous sequence of elements in a collection\nrather than the whole collection. A slice is a kind of reference, so it does\nnot have ownership.\n\nHere’s a small programming problem: write a function that takes a string of\nwords separated by spaces and returns the first word it finds in that string.\nIf the function doesn’t find a space in the string, the whole string must be\none word, so the entire string should be returned.\n\nLet’s work through how we’d write the signature of this function without using\nslices, to understand the problem that slices will solve:\n\n```rust,ignore\nfn first_word(s: &String) -> ?\n```\n\nThe `first_word` function has a `&String` as a parameter. We don’t want\nownership, so this is fine. But what should we return? We don’t really have a\nway to talk about *part* of a string. However, we could return the index of the\nend of the word, indicated by a space. Let’s try that, as shown in Listing 4-7.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-07/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 4-7: The `first_word` function that returns a\nbyte index value into the `String` parameter</span>\n\nBecause we need to go through the `String` element by element and check whether\na value is a space, we’ll convert our `String` to an array of bytes using the\n`as_bytes` method.\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-07/src/main.rs:as_bytes}}\n```\n\nNext, we create an iterator over the array of bytes using the `iter` method:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-07/src/main.rs:iter}}\n```\n\nWe’ll discuss iterators in more detail in [Chapter 13][ch13]<!-- ignore -->.\nFor now, know that `iter` is a method that returns each element in a collection\nand that `enumerate` wraps the result of `iter` and returns each element as\npart of a tuple instead. The first element of the tuple returned from\n`enumerate` is the index, and the second element is a reference to the element.\nThis is a bit more convenient than calculating the index ourselves.\n\nBecause the `enumerate` method returns a tuple, we can use patterns to\ndestructure that tuple. We’ll be discussing patterns more in [Chapter\n6][ch6]<!-- ignore -->. In the `for` loop, we specify a pattern that has `i`\nfor the index in the tuple and `&item` for the single byte in the tuple.\nBecause we get a reference to the element from `.iter().enumerate()`, we use\n`&` in the pattern.\n\nInside the `for` loop, we search for the byte that represents the space by\nusing the byte literal syntax. If we find a space, we return the position.\nOtherwise, we return the length of the string by using `s.len()`.\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-07/src/main.rs:inside_for}}\n```\n\nWe now have a way to find out the index of the end of the first word in the\nstring, but there’s a problem. We’re returning a `usize` on its own, but it’s\nonly a meaningful number in the context of the `&String`. In other words,\nbecause it’s a separate value from the `String`, there’s no guarantee that it\nwill still be valid in the future. Consider the program in Listing 4-8 that\nuses the `first_word` function from Listing 4-7.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-08/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 4-8: Storing the result from calling the\n`first_word` function and then changing the `String` contents</span>\n\nThis program compiles without any errors and would also do so if we used `word`\nafter calling `s.clear()`. Because `word` isn’t connected to the state of `s`\nat all, `word` still contains the value `5`. We could use that value `5` with\nthe variable `s` to try to extract the first word out, but this would be a bug\nbecause the contents of `s` have changed since we saved `5` in `word`.\n\nHaving to worry about the index in `word` getting out of sync with the data in\n`s` is tedious and error prone! Managing these indices is even more brittle if\nwe write a `second_word` function. Its signature would have to look like this:\n\n```rust,ignore\nfn second_word(s: &String) -> (usize, usize) {\n```\n\nNow we’re tracking a starting *and* an ending index, and we have even more\nvalues that were calculated from data in a particular state but aren’t tied to\nthat state at all. We have three unrelated variables floating around that need\nto be kept in sync.\n\nLuckily, Rust has a solution to this problem: string slices.\n\n### String Slices\n\nA *string slice* is a reference to part of a `String`, and it looks like this:\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-17-slice/src/main.rs:here}}\n```\n\nRather than a reference to the entire `String`, `hello` is a reference to a\nportion of the `String`, specified in the extra `[0..5]` bit. We create slices\nusing a range within brackets by specifying `[starting_index..ending_index]`,\nwhere `starting_index` is the first position in the slice and `ending_index` is\none more than the last position in the slice. Internally, the slice data\nstructure stores the starting position and the length of the slice, which\ncorresponds to `ending_index` minus `starting_index`. So, in the case of `let\nworld = &s[6..11];`, `world` would be a slice that contains a pointer to the\nbyte at index 6 of `s` with a length value of `5`.\n\nFigure 4-6 shows this in a diagram.\n\n<img alt=\"Three tables: a table representing the stack data of s, which points\nto the byte at index 0 in a table of the string data &quot;hello world&quot; on\nthe heap. The third table rep-resents the stack data of the slice world, which\nhas a length value of 5 and points to byte 6 of the heap data table.\"\nsrc=\"img/trpl04-06.svg\" class=\"center\" style=\"width: 50%;\" />\n\n<span class=\"caption\">Figure 4-6: String slice referring to part of a\n`String`</span>\n\nWith Rust’s `..` range syntax, if you want to start at index 0, you can drop\nthe value before the two periods. In other words, these are equal:\n\n```rust\nlet s = String::from(\"hello\");\n\nlet slice = &s[0..2];\nlet slice = &s[..2];\n```\n\nBy the same token, if your slice includes the last byte of the `String`, you\ncan drop the trailing number. That means these are equal:\n\n```rust\nlet s = String::from(\"hello\");\n\nlet len = s.len();\n\nlet slice = &s[3..len];\nlet slice = &s[3..];\n```\n\nYou can also drop both values to take a slice of the entire string. So these\nare equal:\n\n```rust\nlet s = String::from(\"hello\");\n\nlet len = s.len();\n\nlet slice = &s[0..len];\nlet slice = &s[..];\n```\n\n> Note: String slice range indices must occur at valid UTF-8 character\n> boundaries. If you attempt to create a string slice in the middle of a\n> multibyte character, your program will exit with an error. For the purposes\n> of introducing string slices, we are assuming ASCII only in this section; a\n> more thorough discussion of UTF-8 handling is in the [“Storing UTF-8 Encoded\n> Text with Strings”][strings]<!-- ignore --> section of Chapter 8.\n\nWith all this information in mind, let’s rewrite `first_word` to return a\nslice. The type that signifies “string slice” is written as `&str`:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-18-first-word-slice/src/main.rs:here}}\n```\n\nWe get the index for the end of the word the same way we did in Listing 4-7, by\nlooking for the first occurrence of a space. When we find a space, we return a\nstring slice using the start of the string and the index of the space as the\nstarting and ending indices.\n\nNow when we call `first_word`, we get back a single value that is tied to the\nunderlying data. The value is made up of a reference to the starting point of\nthe slice and the number of elements in the slice.\n\nReturning a slice would also work for a `second_word` function:\n\n```rust,ignore\nfn second_word(s: &String) -> &str {\n```\n\nWe now have a straightforward API that’s much harder to mess up because the\ncompiler will ensure the references into the `String` remain valid. Remember\nthe bug in the program in Listing 4-8, when we got the index to the end of the\nfirst word but then cleared the string so our index was invalid? That code was\nlogically incorrect but didn’t show any immediate errors. The problems would\nshow up later if we kept trying to use the first word index with an emptied\nstring. Slices make this bug impossible and let us know we have a problem with\nour code much sooner. Using the slice version of `first_word` will throw a\ncompile-time error:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-19-slice-error/src/main.rs:here}}\n```\n\nHere’s the compiler error:\n\n```console\n{{#include ../listings/ch04-understanding-ownership/no-listing-19-slice-error/output.txt}}\n```\n\nRecall from the borrowing rules that if we have an immutable reference to\nsomething, we cannot also take a mutable reference. Because `clear` needs to\ntruncate the `String`, it needs to get a mutable reference. The `println!`\nafter the call to `clear` uses the reference in `word`, so the immutable\nreference must still be active at that point. Rust disallows the mutable\nreference in `clear` and the immutable reference in `word` from existing at the\nsame time, and compilation fails. Not only has Rust made our API easier to use,\nbut it has also eliminated an entire class of errors at compile time!\n\n<!-- Old heading. Do not remove or links may break. -->\n<a id=\"string-literals-are-slices\"></a>\n\n#### String Literals as Slices\n\nRecall that we talked about string literals being stored inside the binary. Now\nthat we know about slices, we can properly understand string literals:\n\n```rust\nlet s = \"Hello, world!\";\n```\n\nThe type of `s` here is `&str`: it’s a slice pointing to that specific point of\nthe binary. This is also why string literals are immutable; `&str` is an\nimmutable reference.\n\n#### String Slices as Parameters\n\nKnowing that you can take slices of literals and `String` values leads us to\none more improvement on `first_word`, and that’s its signature:\n\n```rust,ignore\nfn first_word(s: &String) -> &str {\n```\n\nA more experienced Rustacean would write the signature shown in Listing 4-9\ninstead because it allows us to use the same function on both `&String` values\nand `&str` values.\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-09/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 4-9: Improving the `first_word` function by using\na string slice for the type of the `s` parameter</span>\n\nIf we have a string slice, we can pass that directly. If we have a `String`, we\ncan pass a slice of the `String` or a reference to the `String`. This\nflexibility takes advantage of *deref coercions*, a feature we will cover in\n[“Implicit Deref Coercions with Functions and\nMethods”][deref-coercions]<!--ignore--> section of Chapter 15.\n\nDefining a function to take a string slice instead of a reference to a `String`\nmakes our API more general and useful without losing any functionality:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-09/src/main.rs:usage}}\n```\n\n### Other Slices\n\nString slices, as you might imagine, are specific to strings. But there’s a\nmore general slice type too. Consider this array:\n\n```rust\nlet a = [1, 2, 3, 4, 5];\n```\n\nJust as we might want to refer to part of a string, we might want to refer to\npart of an array. We’d do so like this:\n\n```rust\nlet a = [1, 2, 3, 4, 5];\n\nlet slice = &a[1..3];\n\nassert_eq!(slice, &[2, 3]);\n```\n\nThis slice has the type `&[i32]`. It works the same way as string slices do, by\nstoring a reference to the first element and a length. You’ll use this kind of\nslice for all sorts of other collections. We’ll discuss these collections in\ndetail when we talk about vectors in Chapter 8.\n\n## Summary\n\nThe concepts of ownership, borrowing, and slices ensure memory safety in Rust\nprograms at compile time. The Rust language gives you control over your memory\nusage in the same way as other systems programming languages, but having the\nowner of data automatically clean up that data when the owner goes out of scope\nmeans you don’t have to write and debug extra code to get this control.\n\nOwnership affects how lots of other parts of Rust work, so we’ll talk about\nthese concepts further throughout the rest of the book. Let’s move on to\nChapter 5 and look at grouping pieces of data together in a `struct`.\n\n[ch13]: ch13-02-iterators.html\n[ch6]: ch06-02-match.html#patterns-that-bind-to-values\n[strings]: ch08-02-strings.html#storing-utf-8-encoded-text-with-strings\n[deref-coercions]: ch15-02-deref.html#implicit-deref-coercions-with-functions-and-methods\n",
          "document_id": 24
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "What does 'struct' data allow me?",
              "id": 43,
              "answers": [
                {
                  "answer_id": 43,
                  "document_id": 25,
                  "question_id": 43,
                  "text": "A *struct*, or *structure*, is a custom data type that lets you package\ntogether and name multiple related values that make up a meaningful group.",
                  "answer_start": 43,
                  "answer_end": 189,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "tuples or structures are better to group data?",
              "id": 44,
              "answers": [
                {
                  "answer_id": 44,
                  "document_id": 25,
                  "question_id": 44,
                  "text": "we’ll compare and contrast tuples\nwith structs to build on what you already know and demonstrate when structs are\na better way to group data.",
                  "answer_start": 308,
                  "answer_end": 449,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "# Using Structs to Structure Related Data\n\nA *struct*, or *structure*, is a custom data type that lets you package\ntogether and name multiple related values that make up a meaningful group. If\nyou’re familiar with an object-oriented language, a *struct* is like an\nobject’s data attributes. In this chapter, we’ll compare and contrast tuples\nwith structs to build on what you already know and demonstrate when structs are\na better way to group data.\n\nWe’ll demonstrate how to define and instantiate structs. We’ll discuss how to\ndefine associated functions, especially the kind of associated functions called\n*methods*, to specify behavior associated with a struct type. Structs and enums\n(discussed in Chapter 6) are the building blocks for creating new types in your\nprogram’s domain to take full advantage of Rust’s compile-time type checking.\n",
          "document_id": 25
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "What are the similarities between tuples and structs?",
              "id": 45,
              "answers": [
                {
                  "answer_id": 45,
                  "document_id": 26,
                  "question_id": 45,
                  "text": "Structs are similar to tuples, discussed in [“The Tuple Type”][tuples]‹!--\nignore --> section, in that both hold multiple related values. Like tuples, the\npieces of a struct can be different types.",
                  "answer_start": 39,
                  "answer_end": 236,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the differences between structs and tuples?",
              "id": 46,
              "answers": [
                {
                  "answer_id": 46,
                  "document_id": 26,
                  "question_id": 46,
                  "text": "Unlike with tuples, in a struct\nyou’ll name each piece of data so it’s clear what the values mean. Adding these\nnames means that structs are more flexible than tuples: you don’t have to rely\non the order of the data to specify or access the values of an instance.",
                  "answer_start": 237,
                  "answer_end": 500,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to define struct?",
              "id": 47,
              "answers": [
                {
                  "answer_id": 47,
                  "document_id": 26,
                  "question_id": 47,
                  "text": "To define a struct, we enter the keyword `struct` and name the entire struct. A\nstruct’s name should describe the significance of the pieces of data being\ngrouped together.",
                  "answer_start": 502,
                  "answer_end": 674,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What should I create to use a struct after I defined it?",
              "id": 48,
              "answers": [
                {
                  "answer_id": 48,
                  "document_id": 26,
                  "question_id": 48,
                  "text": "To use a struct after we’ve defined it, we create an *instance* of that struct\nby specifying concrete values for each of the fields. ",
                  "answer_start": 1113,
                  "answer_end": 1246,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to create an instance of the struct?",
              "id": 49,
              "answers": [
                {
                  "answer_id": 49,
                  "document_id": 26,
                  "question_id": 49,
                  "text": "we create an *instance* of that struct\nby specifying concrete values for each of the fields. We create an instance by\nstating the name of the struct and then add curly brackets containing *key:\nvalue* pairs, where the keys are the names of the fields and the values are the\ndata we want to store in those fields. We don’t have to specify the fields in\nthe same order in which we declared them in the struct. In other words, the\nstruct definition is like a general template for the type, and instances fill\nin that template with particular data to create values of the type.",
                  "answer_start": 1153,
                  "answer_end": 1726,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to get a specific value of the struct?",
              "id": 50,
              "answers": [
                {
                  "answer_id": 50,
                  "document_id": 26,
                  "question_id": 50,
                  "text": "To get a specific value from a struct, we use dot notation. For example, to\naccess this user’s email address, we use `user1.email`. If the instance is\nmutable, we can change a value by using the dot notation and assigning into a\nparticular field.",
                  "answer_start": 2059,
                  "answer_end": 2305,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can I mark only certain fields as mutable?",
              "id": 51,
              "answers": [
                {
                  "answer_id": 51,
                  "document_id": 26,
                  "question_id": 51,
                  "text": "Rust doesn’t allow us to mark\nonly certain fields as mutable.",
                  "answer_start": 2726,
                  "answer_end": 2787,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When is *struct update syntax* useful?",
              "id": 52,
              "answers": [
                {
                  "answer_id": 52,
                  "document_id": 26,
                  "question_id": 52,
                  "text": "It’s often useful to create a new instance of a struct that includes most of\nthe values from another instance, but changes some. You can do this using\n*struct update syntax*.",
                  "answer_start": 4966,
                  "answer_end": 5140,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What can \"tuple structs\" do?",
              "id": 53,
              "answers": [
                {
                  "answer_id": 53,
                  "document_id": 26,
                  "question_id": 53,
                  "text": "Rust also supports structs that look similar to tuples, called *tuple structs*.\nTuple structs have the added meaning the struct name provides but don’t have\nnames associated with their fields; rather, they just have the types of the\nfields. Tuple structs are useful when you want to give the whole tuple a name\nand make the tuple a different type from other tuples, and when naming each\nfield as in a regular struct would be verbose or redundant.",
                  "answer_start": 7522,
                  "answer_end": 7968,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to define a tuple struct?",
              "id": 54,
              "answers": [
                {
                  "answer_id": 54,
                  "document_id": 26,
                  "question_id": 54,
                  "text": "To define a tuple struct, start with the `struct` keyword and the struct name\nfollowed by the types in the tuple.",
                  "answer_start": 7970,
                  "answer_end": 8083,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How are called the structs that doesnt have any fields?",
              "id": 55,
              "answers": [
                {
                  "answer_id": 55,
                  "document_id": 26,
                  "question_id": 55,
                  "text": "You can also define structs that don’t have any fields! These are called\n*unit-like structs* because they behave similarly to `()`",
                  "answer_start": 8970,
                  "answer_end": 9100,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "For what are unit-like structs?",
              "id": 56,
              "answers": [
                {
                  "answer_id": 56,
                  "document_id": 26,
                  "question_id": 56,
                  "text": "Unit-like\nstructs can be useful when you need to implement a trait on some type but don’t\nhave any data that you want to store in the type itself.",
                  "answer_start": 9188,
                  "answer_end": 9334,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to store references to data owned by something\nelse?",
              "id": 57,
              "answers": [
                {
                  "answer_id": 57,
                  "document_id": 26,
                  "question_id": 57,
                  "text": "t’s also possible for structs to store references to data owned by something\n> else, but to do so requires the use of *lifetimes*",
                  "answer_start": 10645,
                  "answer_end": 10774,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What lifetimes ensure?",
              "id": 58,
              "answers": [
                {
                  "answer_id": 58,
                  "document_id": 26,
                  "question_id": 58,
                  "text": "Lifetimes ensure that the data referenced by a struct\n> is valid for as long as the struct is",
                  "answer_start": 10827,
                  "answer_end": 10920,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## Defining and Instantiating Structs\n\nStructs are similar to tuples, discussed in [“The Tuple Type”][tuples]<!--\nignore --> section, in that both hold multiple related values. Like tuples, the\npieces of a struct can be different types. Unlike with tuples, in a struct\nyou’ll name each piece of data so it’s clear what the values mean. Adding these\nnames means that structs are more flexible than tuples: you don’t have to rely\non the order of the data to specify or access the values of an instance.\n\nTo define a struct, we enter the keyword `struct` and name the entire struct. A\nstruct’s name should describe the significance of the pieces of data being\ngrouped together. Then, inside curly brackets, we define the names and types of\nthe pieces of data, which we call *fields*. For example, Listing 5-1 shows a\nstruct that stores information about a user account.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-01/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 5-1: A `User` struct definition</span>\n\nTo use a struct after we’ve defined it, we create an *instance* of that struct\nby specifying concrete values for each of the fields. We create an instance by\nstating the name of the struct and then add curly brackets containing *key:\nvalue* pairs, where the keys are the names of the fields and the values are the\ndata we want to store in those fields. We don’t have to specify the fields in\nthe same order in which we declared them in the struct. In other words, the\nstruct definition is like a general template for the type, and instances fill\nin that template with particular data to create values of the type. For\nexample, we can declare a particular user as shown in Listing 5-2.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-02/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 5-2: Creating an instance of the `User`\nstruct</span>\n\nTo get a specific value from a struct, we use dot notation. For example, to\naccess this user’s email address, we use `user1.email`. If the instance is\nmutable, we can change a value by using the dot notation and assigning into a\nparticular field. Listing 5-3 shows how to change the value in the `email`\nfield of a mutable `User` instance.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-03/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 5-3: Changing the value in the `email` field of a\n`User` instance</span>\n\nNote that the entire instance must be mutable; Rust doesn’t allow us to mark\nonly certain fields as mutable. As with any expression, we can construct a new\ninstance of the struct as the last expression in the function body to\nimplicitly return that new instance.\n\nListing 5-4 shows a `build_user` function that returns a `User` instance with\nthe given email and username. The `active` field gets the value of `true`, and\nthe `sign_in_count` gets a value of `1`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-04/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 5-4: A `build_user` function that takes an email\nand username and returns a `User` instance</span>\n\nIt makes sense to name the function parameters with the same name as the struct\nfields, but having to repeat the `email` and `username` field names and\nvariables is a bit tedious. If the struct had more fields, repeating each name\nwould get even more annoying. Luckily, there’s a convenient shorthand!\n\n<!-- Old heading. Do not remove or links may break. -->\n<a id=\"using-the-field-init-shorthand-when-variables-and-fields-have-the-same-name\"></a>\n\n### Using the Field Init Shorthand\n\nBecause the parameter names and the struct field names are exactly the same in\nListing 5-4, we can use the *field init shorthand* syntax to rewrite\n`build_user` so it behaves exactly the same but doesn’t have the repetition of\n`username` and `email`, as shown in Listing 5-5.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-05/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 5-5: A `build_user` function that uses field init\nshorthand because the `username` and `email` parameters have the same name as\nstruct fields</span>\n\nHere, we’re creating a new instance of the `User` struct, which has a field\nnamed `email`. We want to set the `email` field’s value to the value in the\n`email` parameter of the `build_user` function. Because the `email` field and\nthe `email` parameter have the same name, we only need to write `email` rather\nthan `email: email`.\n\n### Creating Instances from Other Instances with Struct Update Syntax\n\nIt’s often useful to create a new instance of a struct that includes most of\nthe values from another instance, but changes some. You can do this using\n*struct update syntax*.\n\nFirst, in Listing 5-6 we show how to create a new `User` instance in `user2`\nregularly, without the update syntax. We set a new value for `email` but\notherwise use the same values from `user1` that we created in Listing 5-2.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-06/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 5-6: Creating a new `User` instance using one of\nthe values from `user1`</span>\n\nUsing struct update syntax, we can achieve the same effect with less code, as\nshown in Listing 5-7. The syntax `..` specifies that the remaining fields not\nexplicitly set should have the same value as the fields in the given instance.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-07/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 5-7: Using struct update syntax to set a new\n`email` value for a `User` instance but to use the rest of the values from\n`user1`</span>\n\nThe code in Listing 5-7 also creates an instance in `user2` that has a\ndifferent value for `email` but has the same values for the `username`,\n`active`, and `sign_in_count` fields from `user1`. The `..user1` must come last\nto specify that any remaining fields should get their values from the\ncorresponding fields in `user1`, but we can choose to specify values for as\nmany fields as we want in any order, regardless of the order of the fields in\nthe struct’s definition.\n\nNote that the struct update syntax uses `=` like an assignment; this is because\nit moves the data, just as we saw in the [“Variables and Data Interacting with\nMove”][move]<!-- ignore --> section. In this example, we can no longer use\n`user1` as a whole after creating `user2` because the `String` in the\n`username` field of `user1` was moved into `user2`. If we had given `user2` new\n`String` values for both `email` and `username`, and thus only used the\n`active` and `sign_in_count` values from `user1`, then `user1` would still be\nvalid after creating `user2`. Both `active` and `sign_in_count` are types that\nimplement the `Copy` trait, so the behavior we discussed in the [“Stack-Only\nData: Copy”][copy]<!-- ignore --> section would apply.\n\n### Using Tuple Structs Without Named Fields to Create Different Types\n\nRust also supports structs that look similar to tuples, called *tuple structs*.\nTuple structs have the added meaning the struct name provides but don’t have\nnames associated with their fields; rather, they just have the types of the\nfields. Tuple structs are useful when you want to give the whole tuple a name\nand make the tuple a different type from other tuples, and when naming each\nfield as in a regular struct would be verbose or redundant.\n\nTo define a tuple struct, start with the `struct` keyword and the struct name\nfollowed by the types in the tuple. For example, here we define and use two\ntuple structs named `Color` and `Point`:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/no-listing-01-tuple-structs/src/main.rs}}\n```\n\nNote that the `black` and `origin` values are different types because they’re\ninstances of different tuple structs. Each struct you define is its own type,\neven though the fields within the struct might have the same types. For\nexample, a function that takes a parameter of type `Color` cannot take a\n`Point` as an argument, even though both types are made up of three `i32`\nvalues. Otherwise, tuple struct instances are similar to tuples in that you can\ndestructure them into their individual pieces, and you can use a `.` followed\nby the index to access an individual value.\n\n### Unit-Like Structs Without Any Fields\n\nYou can also define structs that don’t have any fields! These are called\n*unit-like structs* because they behave similarly to `()`, the unit type that\nwe mentioned in [“The Tuple Type”][tuples]<!-- ignore --> section. Unit-like\nstructs can be useful when you need to implement a trait on some type but don’t\nhave any data that you want to store in the type itself. We’ll discuss traits\nin Chapter 10. Here’s an example of declaring and instantiating a unit struct\nnamed `AlwaysEqual`:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/no-listing-04-unit-like-structs/src/main.rs}}\n```\n\nTo define `AlwaysEqual`, we use the `struct` keyword, the name we want, and\nthen a semicolon. No need for curly brackets or parentheses! Then we can get an\ninstance of `AlwaysEqual` in the `subject` variable in a similar way: using the\nname we defined, without any curly brackets or parentheses. Imagine that later\nwe’ll implement behavior for this type such that every instance of\n`AlwaysEqual` is always equal to every instance of any other type, perhaps to\nhave a known result for testing purposes. We wouldn’t need any data to\nimplement that behavior! You’ll see in Chapter 10 how to define traits and\nimplement them on any type, including unit-like structs.\n\n> ### Ownership of Struct Data\n>\n> In the `User` struct definition in Listing 5-1, we used the owned `String`\n> type rather than the `&str` string slice type. This is a deliberate choice\n> because we want each instance of this struct to own all of its data and for\n> that data to be valid for as long as the entire struct is valid.\n>\n> It’s also possible for structs to store references to data owned by something\n> else, but to do so requires the use of *lifetimes*, a Rust feature that we’ll\n> discuss in Chapter 10. Lifetimes ensure that the data referenced by a struct\n> is valid for as long as the struct is. Let’s say you try to store a reference\n> in a struct without specifying lifetimes, like the following; this won’t work:\n>\n> <span class=\"filename\">Filename: src/main.rs</span>\n>\n> <!-- CAN'T EXTRACT SEE https://github.com/rust-lang/mdBook/issues/1127 -->\n>\n> ```rust,ignore,does_not_compile\n> struct User {\n>     active: bool,\n>     username: &str,\n>     email: &str,\n>     sign_in_count: u64,\n> }\n>\n> fn main() {\n>     let user1 = User {\n>         active: true,\n>         username: \"someusername123\",\n>         email: \"someone@example.com\",\n>         sign_in_count: 1,\n>     };\n> }\n> ```\n>\n> The compiler will complain that it needs lifetime specifiers:\n>\n> ```console\n> $ cargo run\n>    Compiling structs v0.1.0 (file:///projects/structs)\n> error[E0106]: missing lifetime specifier\n>  --> src/main.rs:3:15\n>   |\n> 3 |     username: &str,\n>   |               ^ expected named lifetime parameter\n>   |\n> help: consider introducing a named lifetime parameter\n>   |\n> 1 ~ struct User<'a> {\n> 2 |     active: bool,\n> 3 ~     username: &'a str,\n>   |\n>\n> error[E0106]: missing lifetime specifier\n>  --> src/main.rs:4:12\n>   |\n> 4 |     email: &str,\n>   |            ^ expected named lifetime parameter\n>   |\n> help: consider introducing a named lifetime parameter\n>   |\n> 1 ~ struct User<'a> {\n> 2 |     active: bool,\n> 3 |     username: &str,\n> 4 ~     email: &'a str,\n>   |\n>\n> For more information about this error, try `rustc --explain E0106`.\n> error: could not compile `structs` due to 2 previous errors\n> ```\n>\n> In Chapter 10, we’ll discuss how to fix these errors so you can store\n> references in structs, but for now, we’ll fix errors like these using owned\n> types like `String` instead of references like `&str`.\n\n<!-- manual-regeneration\nfor the error above\nafter running update-rustc.sh:\npbcopy < listings/ch05-using-structs-to-structure-related-data/no-listing-02-reference-in-struct/output.txt\npaste above\nadd `> ` before every line -->\n\n[tuples]: ch03-02-data-types.html#the-tuple-type\n[move]: ch04-01-what-is-ownership.html#variables-and-data-interacting-with-move\n[copy]: ch04-01-what-is-ownership.html#stack-only-data-copy\n",
          "document_id": 26
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "What are the advantages and disadvantages to use tuples in terms of refactoring?",
              "id": 59,
              "answers": [
                {
                  "answer_id": 59,
                  "document_id": 27,
                  "question_id": 59,
                  "text": "In one way, this program is better. Tuples let us add a bit of structure, and\nwe’re now passing just one argument. But in another way, this version is less\nclear: tuples don’t name their elements, so we have to index into the parts of\nthe tuple, making our calculation less obvious.",
                  "answer_start": 2141,
                  "answer_end": 2423,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to to add meaning by labeling the data??",
              "id": 60,
              "answers": [
                {
                  "answer_id": 60,
                  "document_id": 27,
                  "question_id": 60,
                  "text": "We use structs to add meaning by labeling the data. We can transform the tuple\nwe’re using into a struct with a name for the whole as well as names for the\nparts",
                  "answer_start": 2928,
                  "answer_end": 3089,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why structs don’t have a provided implementation of `Display` to use with `println!` and the `{}` placeholder?",
              "id": 61,
              "answers": [
                {
                  "answer_id": 61,
                  "document_id": 27,
                  "question_id": 61,
                  "text": "The `println!` macro can do many kinds of formatting, and by default, the curly\nbrackets tell `println!` to use formatting known as `Display`: output intended\nfor direct end user consumption. The primitive types we’ve seen so far\nimplement `Display` by default because there’s only one way you’d want to show\na `1` or any other primitive type to a user. But with structs, the way\n`println!` should format the output is less clear because there are more\ndisplay possibilities: Do you want commas or not? Do you want to print the\ncurly brackets? Should all the fields be shown? Due to this ambiguity, Rust\ndoesn’t try to guess what we want, and structs don’t have a provided\nimplementation of `Display` to use with `println!` and the `{}` placeholder.",
                  "answer_start": 5389,
                  "answer_end": 6138,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How I can make having functionality to print out debugging information available to my struct?",
              "id": 62,
              "answers": [
                {
                  "answer_id": 62,
                  "document_id": 27,
                  "question_id": 62,
                  "text": "Rust *does* include functionality to print out debugging information, but we\nhave to explicitly opt in to make that functionality available for our struct.\nTo do that, we add the outer attribute `#[derive(Debug)]` just before the\nstruct definition",
                  "answer_start": 7030,
                  "answer_end": 7277,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "`{:#?}` or `{:?}` is easier to read when I have\nlarger structs?",
              "id": 63,
              "answers": [
                {
                  "answer_id": 63,
                  "document_id": 27,
                  "question_id": 63,
                  "text": "When we have\nlarger structs, it’s useful to have output that’s a bit easier to read; in\nthose cases, we can use `{:#?}` instead of `{:?}` in the `println!` string.",
                  "answer_start": 7976,
                  "answer_end": 8139,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the difference between 'println!' and [`dbg!`\nmacro][dbg]‹!-- ignore -->?",
              "id": 64,
              "answers": [
                {
                  "answer_id": 64,
                  "document_id": 27,
                  "question_id": 64,
                  "text": "Another way to print out a value using the `Debug` format is to use the [`dbg!`\nmacro][dbg]‹!-- ignore -->, which takes ownership of an expression (as opposed\nto `println!`, which takes a reference), prints the file and line number of\nwhere that `dbg!` macro call occurs in your code along with the resultant value\nof that expression, and returns ownership of the value.\n\n> Note: Calling the `dbg!` macro prints to the standard error console stream\n> (`stderr`), as opposed to `println!`, which prints to the standard output\n> console stream (`stdout`). We’ll talk more about `stderr` and `stdout` in the\n> [“Writing Error Messages to Standard Error Instead of Standard Output”\n> section in Chapter 12][err]‹!-- ignore -->.\n",
                  "answer_start": 8334,
                  "answer_end": 9058,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which macro can be useful if I want to figure out what my code is doing?\n",
              "id": 65,
              "answers": [
                {
                  "answer_id": 65,
                  "document_id": 27,
                  "question_id": 65,
                  "text": "The `dbg!` macro can be really helpful when you’re trying to\nfigure out what your code is doing!\n",
                  "answer_start": 10224,
                  "answer_end": 10321,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What can do 'derive' attribute?",
              "id": 66,
              "answers": [
                {
                  "answer_id": 66,
                  "document_id": 27,
                  "question_id": 66,
                  "text": "In addition to the `Debug` trait, Rust has provided a number of traits for us\nto use with the `derive` attribute that can add useful behavior to our custom\ntypes.",
                  "answer_start": 10322,
                  "answer_end": 10484,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## An Example Program Using Structs\n\nTo understand when we might want to use structs, let’s write a program that\ncalculates the area of a rectangle. We’ll start by using single variables, and\nthen refactor the program until we’re using structs instead.\n\nLet’s make a new binary project with Cargo called *rectangles* that will take\nthe width and height of a rectangle specified in pixels and calculate the area\nof the rectangle. Listing 5-8 shows a short program with one way of doing\nexactly that in our project’s *src/main.rs*.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-08/src/main.rs:all}}\n```\n\n<span class=\"caption\">Listing 5-8: Calculating the area of a rectangle\nspecified by separate width and height variables</span>\n\nNow, run this program using `cargo run`:\n\n```console\n{{#include ../listings/ch05-using-structs-to-structure-related-data/listing-05-08/output.txt}}\n```\n\nThis code succeeds in figuring out the area of the rectangle by calling the\n`area` function with each dimension, but we can do more to make this code clear\nand readable.\n\nThe issue with this code is evident in the signature of `area`:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-08/src/main.rs:here}}\n```\n\nThe `area` function is supposed to calculate the area of one rectangle, but the\nfunction we wrote has two parameters, and it’s not clear anywhere in our\nprogram that the parameters are related. It would be more readable and more\nmanageable to group width and height together. We’ve already discussed one way\nwe might do that in [“The Tuple Type”][the-tuple-type]<!-- ignore --> section\nof Chapter 3: by using tuples.\n\n### Refactoring with Tuples\n\nListing 5-9 shows another version of our program that uses tuples.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-09/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 5-9: Specifying the width and height of the\nrectangle with a tuple</span>\n\nIn one way, this program is better. Tuples let us add a bit of structure, and\nwe’re now passing just one argument. But in another way, this version is less\nclear: tuples don’t name their elements, so we have to index into the parts of\nthe tuple, making our calculation less obvious.\n\nMixing up the width and height wouldn’t matter for the area calculation, but if\nwe want to draw the rectangle on the screen, it would matter! We would have to\nkeep in mind that `width` is the tuple index `0` and `height` is the tuple\nindex `1`. This would be even harder for someone else to figure out and keep in\nmind if they were to use our code. Because we haven’t conveyed the meaning of\nour data in our code, it’s now easier to introduce errors.\n\n### Refactoring with Structs: Adding More Meaning\n\nWe use structs to add meaning by labeling the data. We can transform the tuple\nwe’re using into a struct with a name for the whole as well as names for the\nparts, as shown in Listing 5-10.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-10/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 5-10: Defining a `Rectangle` struct</span>\n\nHere we’ve defined a struct and named it `Rectangle`. Inside the curly\nbrackets, we defined the fields as `width` and `height`, both of which have\ntype `u32`. Then, in `main`, we created a particular instance of `Rectangle`\nthat has a width of `30` and a height of `50`.\n\nOur `area` function is now defined with one parameter, which we’ve named\n`rectangle`, whose type is an immutable borrow of a struct `Rectangle`\ninstance. As mentioned in Chapter 4, we want to borrow the struct rather than\ntake ownership of it. This way, `main` retains its ownership and can continue\nusing `rect1`, which is the reason we use the `&` in the function signature and\nwhere we call the function.\n\nThe `area` function accesses the `width` and `height` fields of the `Rectangle`\ninstance (note that accessing fields of a borrowed struct instance does not\nmove the field values, which is why you often see borrows of structs). Our\nfunction signature for `area` now says exactly what we mean: calculate the area\nof `Rectangle`, using its `width` and `height` fields. This conveys that the\nwidth and height are related to each other, and it gives descriptive names to\nthe values rather than using the tuple index values of `0` and `1`. This is a\nwin for clarity.\n\n### Adding Useful Functionality with Derived Traits\n\nIt’d be useful to be able to print an instance of `Rectangle` while we’re\ndebugging our program and see the values for all its fields. Listing 5-11 tries\nusing the [`println!` macro][println]<!-- ignore --> as we have used in\nprevious chapters. This won’t work, however.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-11/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 5-11: Attempting to print a `Rectangle`\ninstance</span>\n\nWhen we compile this code, we get an error with this core message:\n\n```text\n{{#include ../listings/ch05-using-structs-to-structure-related-data/listing-05-11/output.txt:3}}\n```\n\nThe `println!` macro can do many kinds of formatting, and by default, the curly\nbrackets tell `println!` to use formatting known as `Display`: output intended\nfor direct end user consumption. The primitive types we’ve seen so far\nimplement `Display` by default because there’s only one way you’d want to show\na `1` or any other primitive type to a user. But with structs, the way\n`println!` should format the output is less clear because there are more\ndisplay possibilities: Do you want commas or not? Do you want to print the\ncurly brackets? Should all the fields be shown? Due to this ambiguity, Rust\ndoesn’t try to guess what we want, and structs don’t have a provided\nimplementation of `Display` to use with `println!` and the `{}` placeholder.\n\nIf we continue reading the errors, we’ll find this helpful note:\n\n```text\n{{#include ../listings/ch05-using-structs-to-structure-related-data/listing-05-11/output.txt:9:10}}\n```\n\nLet’s try it! The `println!` macro call will now look like `println!(\"rect1 is\n{:?}\", rect1);`. Putting the specifier `:?` inside the curly brackets tells\n`println!` we want to use an output format called `Debug`. The `Debug` trait\nenables us to print our struct in a way that is useful for developers so we can\nsee its value while we’re debugging our code.\n\nCompile the code with this change. Drat! We still get an error:\n\n```text\n{{#include ../listings/ch05-using-structs-to-structure-related-data/output-only-01-debug/output.txt:3}}\n```\n\nBut again, the compiler gives us a helpful note:\n\n```text\n{{#include ../listings/ch05-using-structs-to-structure-related-data/output-only-01-debug/output.txt:9:10}}\n```\n\nRust *does* include functionality to print out debugging information, but we\nhave to explicitly opt in to make that functionality available for our struct.\nTo do that, we add the outer attribute `#[derive(Debug)]` just before the\nstruct definition, as shown in Listing 5-12.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-12/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 5-12: Adding the attribute to derive the `Debug`\ntrait and printing the `Rectangle` instance using debug formatting</span>\n\nNow when we run the program, we won’t get any errors, and we’ll see the\nfollowing output:\n\n```console\n{{#include ../listings/ch05-using-structs-to-structure-related-data/listing-05-12/output.txt}}\n```\n\nNice! It’s not the prettiest output, but it shows the values of all the fields\nfor this instance, which would definitely help during debugging. When we have\nlarger structs, it’s useful to have output that’s a bit easier to read; in\nthose cases, we can use `{:#?}` instead of `{:?}` in the `println!` string. In\nthis example, using the `{:#?}` style will output the following:\n\n```console\n{{#include ../listings/ch05-using-structs-to-structure-related-data/output-only-02-pretty-debug/output.txt}}\n```\n\nAnother way to print out a value using the `Debug` format is to use the [`dbg!`\nmacro][dbg]<!-- ignore -->, which takes ownership of an expression (as opposed\nto `println!`, which takes a reference), prints the file and line number of\nwhere that `dbg!` macro call occurs in your code along with the resultant value\nof that expression, and returns ownership of the value.\n\n> Note: Calling the `dbg!` macro prints to the standard error console stream\n> (`stderr`), as opposed to `println!`, which prints to the standard output\n> console stream (`stdout`). We’ll talk more about `stderr` and `stdout` in the\n> [“Writing Error Messages to Standard Error Instead of Standard Output”\n> section in Chapter 12][err]<!-- ignore -->.\n\nHere’s an example where we’re interested in the value that gets assigned to the\n`width` field, as well as the value of the whole struct in `rect1`:\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/no-listing-05-dbg-macro/src/main.rs}}\n```\n\nWe can put `dbg!` around the expression `30 * scale` and, because `dbg!`\nreturns ownership of the expression’s value, the `width` field will get the\nsame value as if we didn’t have the `dbg!` call there. We don’t want `dbg!` to\ntake ownership of `rect1`, so we use a reference to `rect1` in the next call.\nHere’s what the output of this example looks like:\n\n```console\n{{#include ../listings/ch05-using-structs-to-structure-related-data/no-listing-05-dbg-macro/output.txt}}\n```\n\nWe can see the first bit of output came from *src/main.rs* line 10 where we’re\ndebugging the expression `30 * scale`, and its resultant value is `60` (the\n`Debug` formatting implemented for integers is to print only their value). The\n`dbg!` call on line 14 of *src/main.rs* outputs the value of `&rect1`, which is\nthe `Rectangle` struct. This output uses the pretty `Debug` formatting of the\n`Rectangle` type. The `dbg!` macro can be really helpful when you’re trying to\nfigure out what your code is doing!\n\nIn addition to the `Debug` trait, Rust has provided a number of traits for us\nto use with the `derive` attribute that can add useful behavior to our custom\ntypes. Those traits and their behaviors are listed in [Appendix C][app-c]<!--\nignore -->. We’ll cover how to implement these traits with custom behavior as\nwell as how to create your own traits in Chapter 10. There are also many\nattributes other than `derive`; for more information, see [the “Attributes”\nsection of the Rust Reference][attributes].\n\nOur `area` function is very specific: it only computes the area of rectangles.\nIt would be helpful to tie this behavior more closely to our `Rectangle` struct\nbecause it won’t work with any other type. Let’s look at how we can continue to\nrefactor this code by turning the `area` function into an `area` *method*\ndefined on our `Rectangle` type.\n\n[the-tuple-type]: ch03-02-data-types.html#the-tuple-type\n[app-c]: appendix-03-derivable-traits.md\n[println]: ../std/macro.println.html\n[dbg]: ../std/macro.dbg.html\n[err]: ch12-06-writing-to-stderr-instead-of-stdout.html\n[attributes]: ../reference/attributes.html\n",
          "document_id": 27
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "What are the similarities between methods and functions?",
              "id": 67,
              "answers": [
                {
                  "answer_id": 67,
                  "document_id": 28,
                  "question_id": 67,
                  "text": "*Methods* are similar to functions: we declare them with the `fn` keyword and a\nname, they can have parameters and a return value, and they contain some code\nthat’s run when the method is called from somewhere else.",
                  "answer_start": 18,
                  "answer_end": 233,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the differences between methods and functions?",
              "id": 68,
              "answers": [
                {
                  "answer_id": 68,
                  "document_id": 28,
                  "question_id": 68,
                  "text": "Unlike functions,\nmethods are defined within the context of a struct (or an enum or a trait\nobject, which we cover in [Chapter 6][enums]‹!-- ignore --> and [Chapter\n17][trait-objects]‹!-- ignore -->, respectively), and their first parameter is\nalways `self`, which represents the instance of the struct the method is being\ncalled on.",
                  "answer_start": 234,
                  "answer_end": 567,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When happens \"method syntax\"?\n",
              "id": 69,
              "answers": [
                {
                  "answer_id": 69,
                  "document_id": 28,
                  "question_id": 69,
                  "text": "*method syntax* to call the `area` method on our `Rectangle`\ninstance. The method syntax goes after an instance: we add a dot followed by\nthe method name, parentheses, and any arguments.\n",
                  "answer_start": 1517,
                  "answer_end": 1704,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When is useful to having a method that takes ownership of the instance by using just `self` as the first parameter?",
              "id": 70,
              "answers": [
                {
                  "answer_id": 70,
                  "document_id": 28,
                  "question_id": 70,
                  "text": "Having a method that takes ownership of the instance by\nusing just `self` as the first parameter is rare; this technique is usually\nused when the method transforms `self` into something else and you want to\nprevent the caller from using the original instance after the transformation.",
                  "answer_start": 2756,
                  "answer_end": 3040,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why use method instead of function?",
              "id": 71,
              "answers": [
                {
                  "answer_id": 71,
                  "document_id": 28,
                  "question_id": 71,
                  "text": "The main reason for using methods instead of functions, in addition to\nproviding method syntax and not having to repeat the type of `self` in every\nmethod’s signature, is for organization.",
                  "answer_start": 3042,
                  "answer_end": 3230,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are 'getters' in rust?\n",
              "id": 72,
              "answers": [
                {
                  "answer_id": 72,
                  "document_id": 28,
                  "question_id": 72,
                  "text": "Often, but not always, when we give a method the same name as a field we want\nit to only return the value in the field and do nothing else. Methods like this\nare called *getters*",
                  "answer_start": 4204,
                  "answer_end": 4382,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Does rust implement automatically getters for the struct fields?",
              "id": 73,
              "answers": [
                {
                  "answer_id": 73,
                  "document_id": 28,
                  "question_id": 73,
                  "text": "Often, but not always, when we give a method the same name as a field we want\nit to only return the value in the field and do nothing else. Methods like this\nare called *getters*, and Rust does not implement them automatically for struct\nfields as some other languages do.",
                  "answer_start": 4204,
                  "answer_end": 4476,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is an usage of getters?",
              "id": 74,
              "answers": [
                {
                  "answer_id": 74,
                  "document_id": 28,
                  "question_id": 74,
                  "text": "Getters are useful because you can make the\nfield private but the method public, and thus enable read-only access to that\nfield as part of the type’s public API.",
                  "answer_start": 4477,
                  "answer_end": 4638,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does rust do instead of '->' used in C and C++?",
              "id": 75,
              "answers": [
                {
                  "answer_id": 75,
                  "document_id": 28,
                  "question_id": 75,
                  "text": "> In C and C++, two different operators are used for calling methods: you use\n> `.` if you’re calling a method on the object directly and `->` if you’re\n> calling the method on a pointer to the object and need to dereference the\n> pointer first. In other words, if `object` is a pointer,\n> `object->something()` is similar to `(*object).something()`.\n>\n> Rust doesn’t have an equivalent to the `->` operator; instead, Rust has a\n> feature called *automatic referencing and dereferencing*. Calling methods is\n> one of the few places in Rust that has this behavior.",
                  "answer_start": 4818,
                  "answer_end": 5381,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How are called all functions defined within an `impl` block *associated functions* and why?\n",
              "id": 76,
              "answers": [
                {
                  "answer_id": 76,
                  "document_id": 28,
                  "question_id": 76,
                  "text": "All functions defined within an `impl` block are called *associated functions*\nbecause they’re associated with the type named after the `impl`. ",
                  "answer_start": 9093,
                  "answer_end": 9237,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why can I define associated functions that don’t have `self` as their first parameter?",
              "id": 77,
              "answers": [
                {
                  "answer_id": 77,
                  "document_id": 28,
                  "question_id": 77,
                  "text": "We can define\nassociated functions that don’t have `self` as their first parameter (and thus\nare not methods) because they don’t need an instance of the type to work with.",
                  "answer_start": 9237,
                  "answer_end": 9408,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When are used associated functions that aren’t methods ?",
              "id": 78,
              "answers": [
                {
                  "answer_id": 78,
                  "document_id": 28,
                  "question_id": 78,
                  "text": "Associated functions that aren’t methods are often used for constructors that\nwill return a new instance of the struct.",
                  "answer_start": 9518,
                  "answer_end": 9637,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What structs allow me?",
              "id": 79,
              "answers": [
                {
                  "answer_id": 79,
                  "document_id": 28,
                  "question_id": 79,
                  "text": "Structs let you create custom types that are meaningful for your domain. By\nusing structs, you can keep associated pieces of data connected to each other\nand name each piece to make your code clear.",
                  "answer_start": 11345,
                  "answer_end": 11543,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What can I define in 'impl' blocks?",
              "id": 80,
              "answers": [
                {
                  "answer_id": 80,
                  "document_id": 28,
                  "question_id": 80,
                  "text": "In `impl` blocks, you can define\nfunctions that are associated with your type, and methods are a kind of\nassociated function that let you specify the behavior that instances of your\nstructs have.",
                  "answer_start": 11544,
                  "answer_end": 11739,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## Method Syntax\n\n*Methods* are similar to functions: we declare them with the `fn` keyword and a\nname, they can have parameters and a return value, and they contain some code\nthat’s run when the method is called from somewhere else. Unlike functions,\nmethods are defined within the context of a struct (or an enum or a trait\nobject, which we cover in [Chapter 6][enums]<!-- ignore --> and [Chapter\n17][trait-objects]<!-- ignore -->, respectively), and their first parameter is\nalways `self`, which represents the instance of the struct the method is being\ncalled on.\n\n### Defining Methods\n\nLet’s change the `area` function that has a `Rectangle` instance as a parameter\nand instead make an `area` method defined on the `Rectangle` struct, as shown\nin Listing 5-13.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-13/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 5-13: Defining an `area` method on the\n`Rectangle` struct</span>\n\nTo define the function within the context of `Rectangle`, we start an `impl`\n(implementation) block for `Rectangle`. Everything within this `impl` block\nwill be associated with the `Rectangle` type. Then we move the `area` function\nwithin the `impl` curly brackets and change the first (and in this case, only)\nparameter to be `self` in the signature and everywhere within the body. In\n`main`, where we called the `area` function and passed `rect1` as an argument,\nwe can instead use *method syntax* to call the `area` method on our `Rectangle`\ninstance. The method syntax goes after an instance: we add a dot followed by\nthe method name, parentheses, and any arguments.\n\nIn the signature for `area`, we use `&self` instead of `rectangle: &Rectangle`.\nThe `&self` is actually short for `self: &Self`. Within an `impl` block, the\ntype `Self` is an alias for the type that the `impl` block is for. Methods must\nhave a parameter named `self` of type `Self` for their first parameter, so Rust\nlets you abbreviate this with only the name `self` in the first parameter spot.\nNote that we still need to use the `&` in front of the `self` shorthand to\nindicate that this method borrows the `Self` instance, just as we did in\n`rectangle: &Rectangle`. Methods can take ownership of `self`, borrow `self`\nimmutably, as we’ve done here, or borrow `self` mutably, just as they can any\nother parameter.\n\nWe chose `&self` here for the same reason we used `&Rectangle` in the function\nversion: we don’t want to take ownership, and we just want to read the data in\nthe struct, not write to it. If we wanted to change the instance that we’ve\ncalled the method on as part of what the method does, we’d use `&mut self` as\nthe first parameter. Having a method that takes ownership of the instance by\nusing just `self` as the first parameter is rare; this technique is usually\nused when the method transforms `self` into something else and you want to\nprevent the caller from using the original instance after the transformation.\n\nThe main reason for using methods instead of functions, in addition to\nproviding method syntax and not having to repeat the type of `self` in every\nmethod’s signature, is for organization. We’ve put all the things we can do\nwith an instance of a type in one `impl` block rather than making future users\nof our code search for capabilities of `Rectangle` in various places in the\nlibrary we provide.\n\nNote that we can choose to give a method the same name as one of the struct’s\nfields. For example, we can define a method on `Rectangle` that is also named\n`width`:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/no-listing-06-method-field-interaction/src/main.rs:here}}\n```\n\nHere, we’re choosing to make the `width` method return `true` if the value in\nthe instance’s `width` field is greater than `0` and `false` if the value is\n`0`: we can use a field within a method of the same name for any purpose. In\n`main`, when we follow `rect1.width` with parentheses, Rust knows we mean the\nmethod `width`. When we don’t use parentheses, Rust knows we mean the field\n`width`.\n\nOften, but not always, when we give a method the same name as a field we want\nit to only return the value in the field and do nothing else. Methods like this\nare called *getters*, and Rust does not implement them automatically for struct\nfields as some other languages do. Getters are useful because you can make the\nfield private but the method public, and thus enable read-only access to that\nfield as part of the type’s public API. We will discuss what public and private\nare and how to designate a field or method as public or private in [Chapter\n7][public]<!-- ignore -->.\n\n> ### Where’s the `->` Operator?\n>\n> In C and C++, two different operators are used for calling methods: you use\n> `.` if you’re calling a method on the object directly and `->` if you’re\n> calling the method on a pointer to the object and need to dereference the\n> pointer first. In other words, if `object` is a pointer,\n> `object->something()` is similar to `(*object).something()`.\n>\n> Rust doesn’t have an equivalent to the `->` operator; instead, Rust has a\n> feature called *automatic referencing and dereferencing*. Calling methods is\n> one of the few places in Rust that has this behavior.\n>\n> Here’s how it works: when you call a method with `object.something()`, Rust\n> automatically adds in `&`, `&mut`, or `*` so `object` matches the signature of\n> the method. In other words, the following are the same:\n>\n> <!-- CAN'T EXTRACT SEE BUG https://github.com/rust-lang/mdBook/issues/1127 -->\n> ```rust\n> # #[derive(Debug,Copy,Clone)]\n> # struct Point {\n> #     x: f64,\n> #     y: f64,\n> # }\n> #\n> # impl Point {\n> #    fn distance(&self, other: &Point) -> f64 {\n> #        let x_squared = f64::powi(other.x - self.x, 2);\n> #        let y_squared = f64::powi(other.y - self.y, 2);\n> #\n> #        f64::sqrt(x_squared + y_squared)\n> #    }\n> # }\n> # let p1 = Point { x: 0.0, y: 0.0 };\n> # let p2 = Point { x: 5.0, y: 6.5 };\n> p1.distance(&p2);\n> (&p1).distance(&p2);\n> ```\n>\n> The first one looks much cleaner. This automatic referencing behavior works\n> because methods have a clear receiver—the type of `self`. Given the receiver\n> and name of a method, Rust can figure out definitively whether the method is\n> reading (`&self`), mutating (`&mut self`), or consuming (`self`). The fact\n> that Rust makes borrowing implicit for method receivers is a big part of\n> making ownership ergonomic in practice.\n\n### Methods with More Parameters\n\nLet’s practice using methods by implementing a second method on the `Rectangle`\nstruct. This time we want an instance of `Rectangle` to take another instance\nof `Rectangle` and return `true` if the second `Rectangle` can fit completely\nwithin `self` (the first `Rectangle`); otherwise, it should return `false`.\nThat is, once we’ve defined the `can_hold` method, we want to be able to write\nthe program shown in Listing 5-14.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-14/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 5-14: Using the as-yet-unwritten `can_hold`\nmethod</span>\n\nThe expected output would look like the following because both dimensions of\n`rect2` are smaller than the dimensions of `rect1`, but `rect3` is wider than\n`rect1`:\n\n```text\nCan rect1 hold rect2? true\nCan rect1 hold rect3? false\n```\n\nWe know we want to define a method, so it will be within the `impl Rectangle`\nblock. The method name will be `can_hold`, and it will take an immutable borrow\nof another `Rectangle` as a parameter. We can tell what the type of the\nparameter will be by looking at the code that calls the method:\n`rect1.can_hold(&rect2)` passes in `&rect2`, which is an immutable borrow to\n`rect2`, an instance of `Rectangle`. This makes sense because we only need to\nread `rect2` (rather than write, which would mean we’d need a mutable borrow),\nand we want `main` to retain ownership of `rect2` so we can use it again after\ncalling the `can_hold` method. The return value of `can_hold` will be a\nBoolean, and the implementation will check whether the width and height of\n`self` are greater than the width and height of the other `Rectangle`,\nrespectively. Let’s add the new `can_hold` method to the `impl` block from\nListing 5-13, shown in Listing 5-15.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-15/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 5-15: Implementing the `can_hold` method on\n`Rectangle` that takes another `Rectangle` instance as a parameter</span>\n\nWhen we run this code with the `main` function in Listing 5-14, we’ll get our\ndesired output. Methods can take multiple parameters that we add to the\nsignature after the `self` parameter, and those parameters work just like\nparameters in functions.\n\n### Associated Functions\n\nAll functions defined within an `impl` block are called *associated functions*\nbecause they’re associated with the type named after the `impl`. We can define\nassociated functions that don’t have `self` as their first parameter (and thus\nare not methods) because they don’t need an instance of the type to work with.\nWe’ve already used one function like this: the `String::from` function that’s\ndefined on the `String` type.\n\nAssociated functions that aren’t methods are often used for constructors that\nwill return a new instance of the struct. These are often called `new`, but\n`new` isn’t a special name and isn’t built into the language. For example, we\ncould choose to provide an associated function named `square` that would have\none dimension parameter and use that as both width and height, thus making it\neasier to create a square `Rectangle` rather than having to specify the same\nvalue twice:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/no-listing-03-associated-functions/src/main.rs:here}}\n```\n\nThe `Self` keywords in the return type and in the body of the function are\naliases for the type that appears after the `impl` keyword, which in this case\nis `Rectangle`.\n\nTo call this associated function, we use the `::` syntax with the struct name;\n`let sq = Rectangle::square(3);` is an example. This function is namespaced by\nthe struct: the `::` syntax is used for both associated functions and\nnamespaces created by modules. We’ll discuss modules in [Chapter\n7][modules]<!-- ignore -->.\n\n### Multiple `impl` Blocks\n\nEach struct is allowed to have multiple `impl` blocks. For example, Listing\n5-15 is equivalent to the code shown in Listing 5-16, which has each method in\nits own `impl` block.\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-16/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 5-16: Rewriting Listing 5-15 using multiple `impl`\nblocks</span>\n\nThere’s no reason to separate these methods into multiple `impl` blocks here,\nbut this is valid syntax. We’ll see a case in which multiple `impl` blocks are\nuseful in Chapter 10, where we discuss generic types and traits.\n\n## Summary\n\nStructs let you create custom types that are meaningful for your domain. By\nusing structs, you can keep associated pieces of data connected to each other\nand name each piece to make your code clear. In `impl` blocks, you can define\nfunctions that are associated with your type, and methods are a kind of\nassociated function that let you specify the behavior that instances of your\nstructs have.\n\nBut structs aren’t the only way you can create custom types: let’s turn to\nRust’s enum feature to add another tool to your toolbox.\n\n[enums]: ch06-00-enums.html\n[trait-objects]: ch17-02-trait-objects.md\n[public]: ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html#exposing-paths-with-the-pub-keyword\n[modules]: ch07-02-defining-modules-to-control-scope-and-privacy.html\n",
          "document_id": 28
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "What is a different name to \"enumeration\"?",
              "id": 81,
              "answers": [
                {
                  "answer_id": 82,
                  "document_id": 29,
                  "question_id": 81,
                  "text": "In this chapter, we’ll look at *enumerations*, also referred to as *enums*.",
                  "answer_start": 30,
                  "answer_end": 105,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does enum allow me?",
              "id": 82,
              "answers": [
                {
                  "answer_id": 83,
                  "document_id": 29,
                  "question_id": 82,
                  "text": "Enums allow you to define a type by enumerating its possible *variants*. ",
                  "answer_start": 106,
                  "answer_end": 179,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "# Enums and Pattern Matching\n\nIn this chapter, we’ll look at *enumerations*, also referred to as *enums*.\nEnums allow you to define a type by enumerating its possible *variants*. First\nwe’ll define and use an enum to show how an enum can encode meaning along with\ndata. Next, we’ll explore a particularly useful enum, called `Option`, which\nexpresses that a value can be either something or nothing. Then we’ll look at\nhow pattern matching in the `match` expression makes it easy to run different\ncode for different values of an enum. Finally, we’ll cover how the `if let`\nconstruct is another convenient and concise idiom available to handle enums in\nyour code.\n",
          "document_id": 29
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "What is the difference between enum and struct?",
              "id": 83,
              "answers": [
                {
                  "answer_id": 85,
                  "document_id": 30,
                  "question_id": 83,
                  "text": "Where structs give you a way of grouping together related fields and data, like\na `Rectangle` with its `width` and `height`, enums give you a way of saying a\nvalue is one of a possible set of values. For example, we may want to say that\n`Rectangle` is one of a set of possible shapes that also includes `Circle` and\n`Triangle`. To do this, Rust allows us to encode these possibilities as an enum.",
                  "answer_start": 21,
                  "answer_end": 417,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is an advantage to use enum instead of struct?",
              "id": 84,
              "answers": [
                {
                  "answer_id": 86,
                  "document_id": 30,
                  "question_id": 84,
                  "text": "There’s another advantage to using an enum rather than a struct: each variant\ncan have different types and amounts of associated data. ",
                  "answer_start": 4538,
                  "answer_end": 4673,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which data type can I put inside an enum variant?",
              "id": 85,
              "answers": [
                {
                  "answer_id": 87,
                  "document_id": 30,
                  "question_id": 85,
                  "text": "\nThis code illustrates that you can put any kind of data inside an enum variant:\nstrings, numeric types, or structs, for example. You can even include another\nenum! Also, standard library types are often not much more complicated than\nwhat you might come up with.",
                  "answer_start": 5795,
                  "answer_end": 6058,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can I put enumeration inside another enum?",
              "id": 86,
              "answers": [
                {
                  "answer_id": 88,
                  "document_id": 30,
                  "question_id": 86,
                  "text": "This code illustrates that you can put any kind of data inside an enum variant:\nstrings, numeric types, or structs, for example. You can even include another\nenum! Also, standard library types are often not much more complicated than\nwhat you might come up with.",
                  "answer_start": 5796,
                  "answer_end": 6058,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the similarity between struct and enum?",
              "id": 87,
              "answers": [
                {
                  "answer_id": 89,
                  "document_id": 30,
                  "question_id": 87,
                  "text": "There is one more similarity between enums and structs: just as we’re able to\ndefine methods on structs using `impl`, we’re also able to define methods on\nenums.",
                  "answer_start": 7631,
                  "answer_end": 7792,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What the 'Option' type encodes?",
              "id": 88,
              "answers": [
                {
                  "answer_id": 90,
                  "document_id": 30,
                  "question_id": 88,
                  "text": "This section explores a case study of `Option`, which is another enum defined\nby the standard library. The `Option` type encodes the very common scenario in\nwhich a value could be something or it could be nothing.",
                  "answer_start": 8427,
                  "answer_end": 8640,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Is Null type available in rust language?",
              "id": 89,
              "answers": [
                {
                  "answer_id": 91,
                  "document_id": 30,
                  "question_id": 89,
                  "text": "Programming language design is often thought of in terms of which features you\ninclude, but the features you exclude are important too. Rust doesn’t have the\nnull feature that many other languages have. *Null* is a value that means there\nis no value there. In languages with null, variables can always be in one of\ntwo states: null or not-null.",
                  "answer_start": 9037,
                  "answer_end": 9381,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the characteristics of the null type?",
              "id": 90,
              "answers": [
                {
                  "answer_id": 92,
                  "document_id": 30,
                  "question_id": 90,
                  "text": " *Null* is a value that means there\nis no value there.",
                  "answer_start": 9239,
                  "answer_end": 9293,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the disadvantage of null values?",
              "id": 91,
              "answers": [
                {
                  "answer_id": 93,
                  "document_id": 30,
                  "question_id": 91,
                  "text": "\nThe problem with null values is that if you try to use a null value as a\nnot-null value, you’ll get an error of some kind. Because this null or not-null\nproperty is pervasive, it’s extremely easy to make this kind of error.",
                  "answer_start": 10075,
                  "answer_end": 10299,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What compensates for the lack of the null type in rust?",
              "id": 92,
              "answers": [
                {
                  "answer_id": 94,
                  "document_id": 30,
                  "question_id": 92,
                  "text": "The problem isn’t really with the concept but with the particular\nimplementation. As such, Rust does not have nulls, but it does have an enum\nthat can encode the concept of a value being present or absent. This enum is\n`Option‹T>`, and it is [defined by the standard library][option]‹!-- ignore -->\nas follows:",
                  "answer_start": 10448,
                  "answer_end": 10758,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What means 'some' and 'none' values?",
              "id": 93,
              "answers": [
                {
                  "answer_id": 95,
                  "document_id": 30,
                  "question_id": 93,
                  "text": "When we have a `Some` value, we know that a value is present and the value is\nheld within the `Some`. When we have a `None` value, in some sense it means the\nsame thing as null",
                  "answer_start": 12262,
                  "answer_end": 12438,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why 'Option<T>'is better option than null?",
              "id": 95,
              "answers": [
                {
                  "answer_id": 97,
                  "document_id": 30,
                  "question_id": 95,
                  "text": "So why is having `Option‹T>`\nany better than having null?\n\nIn short, because `Option‹T>` and `T` (where `T` can be any type) are different\ntypes, the compiler won’t let us use an `Option‹T>` value as if it were\ndefinitely a valid value. For example, this code won’t compile, because it’s\ntrying to add an `i8` to an `Option‹i8>`:\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-07-cant-use-option-directly/src/main.rs:here}}\n```\n\nIf we run this code, we get an error message like this one:\n\n```console\n{{#include ../listings/ch06-enums-and-pattern-matching/no-listing-07-cant-use-option-directly/output.txt}}\n```\n\nIntense! In effect, this error message means that Rust doesn’t understand how\nto add an `i8` and an `Option‹i8>`, because they’re different types. When we\nhave a value of a type like `i8` in Rust, the compiler will ensure that we\nalways have a valid value. We can proceed confidently without having to check\nfor null before using that value. Only when we have an `Option‹i8>` (or\nwhatever type of value we’re working with) do we have to worry about possibly\nnot having a value, and the compiler will make sure we handle that case before\nusing the value.\n\nIn other words, you have to convert an `Option‹T>` to a `T` before you can\nperform `T` operations with it. Generally, this helps catch one of the most\ncommon issues with null: assuming that something isn’t null when it actually is.\n",
                  "answer_start": 12469,
                  "answer_end": 13929,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## Defining an Enum\n\nWhere structs give you a way of grouping together related fields and data, like\na `Rectangle` with its `width` and `height`, enums give you a way of saying a\nvalue is one of a possible set of values. For example, we may want to say that\n`Rectangle` is one of a set of possible shapes that also includes `Circle` and\n`Triangle`. To do this, Rust allows us to encode these possibilities as an enum.\n\nLet’s look at a situation we might want to express in code and see why enums\nare useful and more appropriate than structs in this case. Say we need to work\nwith IP addresses. Currently, two major standards are used for IP addresses:\nversion four and version six. Because these are the only possibilities for an\nIP address that our program will come across, we can *enumerate* all possible\nvariants, which is where enumeration gets its name.\n\nAny IP address can be either a version four or a version six address, but not\nboth at the same time. That property of IP addresses makes the enum data\nstructure appropriate because an enum value can only be one of its variants.\nBoth version four and version six addresses are still fundamentally IP\naddresses, so they should be treated as the same type when the code is handling\nsituations that apply to any kind of IP address.\n\nWe can express this concept in code by defining an `IpAddrKind` enumeration and\nlisting the possible kinds an IP address can be, `V4` and `V6`. These are the\nvariants of the enum:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-01-defining-enums/src/main.rs:def}}\n```\n\n`IpAddrKind` is now a custom data type that we can use elsewhere in our code.\n\n### Enum Values\n\nWe can create instances of each of the two variants of `IpAddrKind` like this:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-01-defining-enums/src/main.rs:instance}}\n```\n\nNote that the variants of the enum are namespaced under its identifier, and we\nuse a double colon to separate the two. This is useful because now both values\n`IpAddrKind::V4` and `IpAddrKind::V6` are of the same type: `IpAddrKind`. We\ncan then, for instance, define a function that takes any `IpAddrKind`:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-01-defining-enums/src/main.rs:fn}}\n```\n\nAnd we can call this function with either variant:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-01-defining-enums/src/main.rs:fn_call}}\n```\n\nUsing enums has even more advantages. Thinking more about our IP address type,\nat the moment we don’t have a way to store the actual IP address *data*; we\nonly know what *kind* it is. Given that you just learned about structs in\nChapter 5, you might be tempted to tackle this problem with structs as shown in\nListing 6-1.\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-01/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 6-1: Storing the data and `IpAddrKind` variant of\nan IP address using a `struct`</span>\n\nHere, we’ve defined a struct `IpAddr` that has two fields: a `kind` field that\nis of type `IpAddrKind` (the enum we defined previously) and an `address` field\nof type `String`. We have two instances of this struct. The first is `home`,\nand it has the value `IpAddrKind::V4` as its `kind` with associated address\ndata of `127.0.0.1`. The second instance is `loopback`. It has the other\nvariant of `IpAddrKind` as its `kind` value, `V6`, and has address `::1`\nassociated with it. We’ve used a struct to bundle the `kind` and `address`\nvalues together, so now the variant is associated with the value.\n\nHowever, representing the same concept using just an enum is more concise:\nrather than an enum inside a struct, we can put data directly into each enum\nvariant. This new definition of the `IpAddr` enum says that both `V4` and `V6`\nvariants will have associated `String` values:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-02-enum-with-data/src/main.rs:here}}\n```\n\nWe attach data to each variant of the enum directly, so there is no need for an\nextra struct. Here, it’s also easier to see another detail of how enums work:\nthe name of each enum variant that we define also becomes a function that\nconstructs an instance of the enum. That is, `IpAddr::V4()` is a function call\nthat takes a `String` argument and returns an instance of the `IpAddr` type. We\nautomatically get this constructor function defined as a result of defining the\nenum.\n\nThere’s another advantage to using an enum rather than a struct: each variant\ncan have different types and amounts of associated data. Version four IP\naddresses will always have four numeric components that will have values\nbetween 0 and 255. If we wanted to store `V4` addresses as four `u8` values but\nstill express `V6` addresses as one `String` value, we wouldn’t be able to with\na struct. Enums handle this case with ease:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-03-variants-with-different-data/src/main.rs:here}}\n```\n\nWe’ve shown several different ways to define data structures to store version\nfour and version six IP addresses. However, as it turns out, wanting to store\nIP addresses and encode which kind they are is so common that [the standard\nlibrary has a definition we can use!][IpAddr]<!-- ignore --> Let’s look at how\nthe standard library defines `IpAddr`: it has the exact enum and variants that\nwe’ve defined and used, but it embeds the address data inside the variants in\nthe form of two different structs, which are defined differently for each\nvariant:\n\n```rust\nstruct Ipv4Addr {\n    // --snip--\n}\n\nstruct Ipv6Addr {\n    // --snip--\n}\n\nenum IpAddr {\n    V4(Ipv4Addr),\n    V6(Ipv6Addr),\n}\n```\n\nThis code illustrates that you can put any kind of data inside an enum variant:\nstrings, numeric types, or structs, for example. You can even include another\nenum! Also, standard library types are often not much more complicated than\nwhat you might come up with.\n\nNote that even though the standard library contains a definition for `IpAddr`,\nwe can still create and use our own definition without conflict because we\nhaven’t brought the standard library’s definition into our scope. We’ll talk\nmore about bringing types into scope in Chapter 7.\n\nLet’s look at another example of an enum in Listing 6-2: this one has a wide\nvariety of types embedded in its variants.\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-02/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 6-2: A `Message` enum whose variants each store\ndifferent amounts and types of values</span>\n\nThis enum has four variants with different types:\n\n* `Quit` has no data associated with it at all.\n* `Move` has named fields, like a struct does.\n* `Write` includes a single `String`.\n* `ChangeColor` includes three `i32` values.\n\nDefining an enum with variants such as the ones in Listing 6-2 is similar to\ndefining different kinds of struct definitions, except the enum doesn’t use the\n`struct` keyword and all the variants are grouped together under the `Message`\ntype. The following structs could hold the same data that the preceding enum\nvariants hold:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-04-structs-similar-to-message-enum/src/main.rs:here}}\n```\n\nBut if we used the different structs, each of which has its own type, we\ncouldn’t as easily define a function to take any of these kinds of messages as\nwe could with the `Message` enum defined in Listing 6-2, which is a single type.\n\nThere is one more similarity between enums and structs: just as we’re able to\ndefine methods on structs using `impl`, we’re also able to define methods on\nenums. Here’s a method named `call` that we could define on our `Message` enum:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-05-methods-on-enums/src/main.rs:here}}\n```\n\nThe body of the method would use `self` to get the value that we called the\nmethod on. In this example, we’ve created a variable `m` that has the value\n`Message::Write(String::from(\"hello\"))`, and that is what `self` will be in the\nbody of the `call` method when `m.call()` runs.\n\nLet’s look at another enum in the standard library that is very common and\nuseful: `Option`.\n\n### The `Option` Enum and Its Advantages Over Null Values\n\nThis section explores a case study of `Option`, which is another enum defined\nby the standard library. The `Option` type encodes the very common scenario in\nwhich a value could be something or it could be nothing.\n\nFor example, if you request the first item in a non-empty list, you would get\na value. If you request the first item in an empty list, you would get nothing.\nExpressing this concept in terms of the type system means the compiler can\ncheck whether you’ve handled all the cases you should be handling; this\nfunctionality can prevent bugs that are extremely common in other programming\nlanguages.\n\nProgramming language design is often thought of in terms of which features you\ninclude, but the features you exclude are important too. Rust doesn’t have the\nnull feature that many other languages have. *Null* is a value that means there\nis no value there. In languages with null, variables can always be in one of\ntwo states: null or not-null.\n\nIn his 2009 presentation “Null References: The Billion Dollar Mistake,” Tony\nHoare, the inventor of null, has this to say:\n\n> I call it my billion-dollar mistake. At that time, I was designing the first\n> comprehensive type system for references in an object-oriented language. My\n> goal was to ensure that all use of references should be absolutely safe, with\n> checking performed automatically by the compiler. But I couldn’t resist the\n> temptation to put in a null reference, simply because it was so easy to\n> implement. This has led to innumerable errors, vulnerabilities, and system\n> crashes, which have probably caused a billion dollars of pain and damage in\n> the last forty years.\n\nThe problem with null values is that if you try to use a null value as a\nnot-null value, you’ll get an error of some kind. Because this null or not-null\nproperty is pervasive, it’s extremely easy to make this kind of error.\n\nHowever, the concept that null is trying to express is still a useful one: a\nnull is a value that is currently invalid or absent for some reason.\n\nThe problem isn’t really with the concept but with the particular\nimplementation. As such, Rust does not have nulls, but it does have an enum\nthat can encode the concept of a value being present or absent. This enum is\n`Option<T>`, and it is [defined by the standard library][option]<!-- ignore -->\nas follows:\n\n```rust\nenum Option<T> {\n    None,\n    Some(T),\n}\n```\n\nThe `Option<T>` enum is so useful that it’s even included in the prelude; you\ndon’t need to bring it into scope explicitly. Its variants are also included in\nthe prelude: you can use `Some` and `None` directly without the `Option::`\nprefix. The `Option<T>` enum is still just a regular enum, and `Some(T)` and\n`None` are still variants of type `Option<T>`.\n\nThe `<T>` syntax is a feature of Rust we haven’t talked about yet. It’s a\ngeneric type parameter, and we’ll cover generics in more detail in Chapter 10.\nFor now, all you need to know is that `<T>` means that the `Some` variant of\nthe `Option` enum can hold one piece of data of any type, and that each\nconcrete type that gets used in place of `T` makes the overall `Option<T>` type\na different type. Here are some examples of using `Option` values to hold\nnumber types and string types:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-06-option-examples/src/main.rs:here}}\n```\n\nThe type of `some_number` is `Option<i32>`. The type of `some_char` is\n`Option<char>`, which is a different type. Rust can infer these types because\nwe’ve specified a value inside the `Some` variant. For `absent_number`, Rust\nrequires us to annotate the overall `Option` type: the compiler can’t infer the\ntype that the corresponding `Some` variant will hold by looking only at a\n`None` value. Here, we tell Rust that we mean for `absent_number` to be of type\n`Option<i32>`.\n\nWhen we have a `Some` value, we know that a value is present and the value is\nheld within the `Some`. When we have a `None` value, in some sense it means the\nsame thing as null: we don’t have a valid value. So why is having `Option<T>`\nany better than having null?\n\nIn short, because `Option<T>` and `T` (where `T` can be any type) are different\ntypes, the compiler won’t let us use an `Option<T>` value as if it were\ndefinitely a valid value. For example, this code won’t compile, because it’s\ntrying to add an `i8` to an `Option<i8>`:\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-07-cant-use-option-directly/src/main.rs:here}}\n```\n\nIf we run this code, we get an error message like this one:\n\n```console\n{{#include ../listings/ch06-enums-and-pattern-matching/no-listing-07-cant-use-option-directly/output.txt}}\n```\n\nIntense! In effect, this error message means that Rust doesn’t understand how\nto add an `i8` and an `Option<i8>`, because they’re different types. When we\nhave a value of a type like `i8` in Rust, the compiler will ensure that we\nalways have a valid value. We can proceed confidently without having to check\nfor null before using that value. Only when we have an `Option<i8>` (or\nwhatever type of value we’re working with) do we have to worry about possibly\nnot having a value, and the compiler will make sure we handle that case before\nusing the value.\n\nIn other words, you have to convert an `Option<T>` to a `T` before you can\nperform `T` operations with it. Generally, this helps catch one of the most\ncommon issues with null: assuming that something isn’t null when it actually is.\n\nEliminating the risk of incorrectly assuming a not-null value helps you to be\nmore confident in your code. In order to have a value that can possibly be\nnull, you must explicitly opt in by making the type of that value `Option<T>`.\nThen, when you use that value, you are required to explicitly handle the case\nwhen the value is null. Everywhere that a value has a type that isn’t an\n`Option<T>`, you *can* safely assume that the value isn’t null. This was a\ndeliberate design decision for Rust to limit null’s pervasiveness and increase\nthe safety of Rust code.\n\nSo how do you get the `T` value out of a `Some` variant when you have a value\nof type `Option<T>` so that you can use that value? The `Option<T>` enum has a\nlarge number of methods that are useful in a variety of situations; you can\ncheck them out in [its documentation][docs]<!-- ignore -->. Becoming familiar\nwith the methods on `Option<T>` will be extremely useful in your journey with\nRust.\n\nIn general, in order to use an `Option<T>` value, you want to have code that\nwill handle each variant. You want some code that will run only when you have a\n`Some(T)` value, and this code is allowed to use the inner `T`. You want some\nother code to run only if you have a `None` value, and that code doesn’t have a\n`T` value available. The `match` expression is a control flow construct that\ndoes just this when used with enums: it will run different code depending on\nwhich variant of the enum it has, and that code can use the data inside the\nmatching value.\n\n[IpAddr]: ../std/net/enum.IpAddr.html\n[option]: ../std/option/enum.Option.html\n[docs]: ../std/option/enum.Option.html\n",
          "document_id": 30
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "What can 'match' do?",
              "id": 96,
              "answers": [
                {
                  "answer_id": 98,
                  "document_id": 31,
                  "question_id": 96,
                  "text": "Rust has an extremely powerful control flow construct called `match` that\nallows you to compare a value against a series of patterns and then execute\ncode based on which pattern matches.",
                  "answer_start": 140,
                  "answer_end": 326,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can patterns be made um?",
              "id": 97,
              "answers": [
                {
                  "answer_id": 99,
                  "document_id": 31,
                  "question_id": 97,
                  "text": "Patterns can be made up of literal values,\nvariable names, wildcards, and many other things",
                  "answer_start": 327,
                  "answer_end": 418,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why 'match' expression is so good?",
              "id": 98,
              "answers": [
                {
                  "answer_id": 100,
                  "document_id": 31,
                  "question_id": 98,
                  "text": "The power of `match` comes from the expressiveness of the\npatterns and the fact that the compiler confirms that all possible cases are\nhandled.",
                  "answer_start": 527,
                  "answer_end": 670,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What happens after execute 'match'?",
              "id": 99,
              "answers": [
                {
                  "answer_id": 101,
                  "document_id": 31,
                  "question_id": 99,
                  "text": "When the `match` expression executes, it compares the resultant value against\nthe pattern of each arm, in order. If a pattern matches the value, the code\nassociated with that pattern is executed. If that pattern doesn’t match the\nvalue, execution continues to the next arm, much as in a coin-sorting machine.\nWe can have as many arms as we need",
                  "answer_start": 2299,
                  "answer_end": 2643,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is returned for the entire `match` expression?",
              "id": 100,
              "answers": [
                {
                  "answer_id": 102,
                  "document_id": 31,
                  "question_id": 100,
                  "text": "The code associated with each arm is an expression, and the resultant value of\nthe expression in the matching arm is the value that gets returned for the\nentire `match` expression.\n",
                  "answer_start": 2689,
                  "answer_end": 2870,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What can I do if Iwant to run multiple lines of code in a match arm?",
              "id": 101,
              "answers": [
                {
                  "answer_id": 103,
                  "document_id": 31,
                  "question_id": 101,
                  "text": "If you want to run multiple\nlines of code in a match arm, you must use curly brackets, and the comma\nfollowing the arm is then optional. ",
                  "answer_start": 3002,
                  "answer_end": 3139,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is an example of useful feature of match arms?",
              "id": 102,
              "answers": [
                {
                  "answer_id": 104,
                  "document_id": 31,
                  "question_id": 102,
                  "text": "Another useful feature of match arms is that they can bind to the parts of the\nvalues that match the pattern.",
                  "answer_start": 3468,
                  "answer_end": 3577,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Does it make sense to combine `match` and enums?",
              "id": 103,
              "answers": [
                {
                  "answer_id": 105,
                  "document_id": 31,
                  "question_id": 103,
                  "text": "Combining `match` and enums is useful in many situations. You’ll see this\npattern a lot in Rust code: `match` against an enum, bind a variable to the\ndata inside, and then execute code based on it. It’s a bit tricky at first, but\nonce you get used to it, you’ll wish you had it in all languages. It’s\nconsistently a user favorite.",
                  "answer_start": 7588,
                  "answer_end": 7918,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What do '_' pattern?",
              "id": 104,
              "answers": [
                {
                  "answer_id": 106,
                  "document_id": 31,
                  "question_id": 104,
                  "text": "Rust also has a pattern we can use when we want a catch-all but don’t want to\n*use* the value in the catch-all pattern: `_` is a special pattern that matches\nany value and does not bind to that value. This tells Rust we aren’t going to\nuse the value, so Rust won’t warn us about an unused variable.",
                  "answer_start": 10595,
                  "answer_end": 10893,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "<!-- Old heading. Do not remove or links may break. -->\n<a id=\"the-match-control-flow-operator\"></a>\n## The `match` Control Flow Construct\n\nRust has an extremely powerful control flow construct called `match` that\nallows you to compare a value against a series of patterns and then execute\ncode based on which pattern matches. Patterns can be made up of literal values,\nvariable names, wildcards, and many other things; [Chapter\n18][ch18-00-patterns]<!-- ignore --> covers all the different kinds of patterns\nand what they do. The power of `match` comes from the expressiveness of the\npatterns and the fact that the compiler confirms that all possible cases are\nhandled.\n\nThink of a `match` expression as being like a coin-sorting machine: coins slide\ndown a track with variously sized holes along it, and each coin falls through\nthe first hole it encounters that it fits into. In the same way, values go\nthrough each pattern in a `match`, and at the first pattern the value “fits,”\nthe value falls into the associated code block to be used during execution.\n\nSpeaking of coins, let’s use them as an example using `match`! We can write a\nfunction that takes an unknown US coin and, in a similar way as the counting\nmachine, determines which coin it is and returns its value in cents, as shown\nin Listing 6-3.\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-03/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 6-3: An enum and a `match` expression that has\nthe variants of the enum as its patterns</span>\n\nLet’s break down the `match` in the `value_in_cents` function. First we list\nthe `match` keyword followed by an expression, which in this case is the value\n`coin`. This seems very similar to a conditional expression used with `if`, but\nthere’s a big difference: with `if`, the condition needs to evaluate to a\nBoolean value, but here it can be any type. The type of `coin` in this example\nis the `Coin` enum that we defined on the first line.\n\nNext are the `match` arms. An arm has two parts: a pattern and some code. The\nfirst arm here has a pattern that is the value `Coin::Penny` and then the `=>`\noperator that separates the pattern and the code to run. The code in this case\nis just the value `1`. Each arm is separated from the next with a comma.\n\nWhen the `match` expression executes, it compares the resultant value against\nthe pattern of each arm, in order. If a pattern matches the value, the code\nassociated with that pattern is executed. If that pattern doesn’t match the\nvalue, execution continues to the next arm, much as in a coin-sorting machine.\nWe can have as many arms as we need: in Listing 6-3, our `match` has four arms.\n\nThe code associated with each arm is an expression, and the resultant value of\nthe expression in the matching arm is the value that gets returned for the\nentire `match` expression.\n\nWe don’t typically use curly brackets if the match arm code is short, as it is\nin Listing 6-3 where each arm just returns a value. If you want to run multiple\nlines of code in a match arm, you must use curly brackets, and the comma\nfollowing the arm is then optional. For example, the following code prints\n“Lucky penny!” every time the method is called with a `Coin::Penny`, but still\nreturns the last value of the block, `1`:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-08-match-arm-multiple-lines/src/main.rs:here}}\n```\n\n### Patterns That Bind to Values\n\nAnother useful feature of match arms is that they can bind to the parts of the\nvalues that match the pattern. This is how we can extract values out of enum\nvariants.\n\nAs an example, let’s change one of our enum variants to hold data inside it.\nFrom 1999 through 2008, the United States minted quarters with different\ndesigns for each of the 50 states on one side. No other coins got state\ndesigns, so only quarters have this extra value. We can add this information to\nour `enum` by changing the `Quarter` variant to include a `UsState` value\nstored inside it, which we’ve done in Listing 6-4.\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-04/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 6-4: A `Coin` enum in which the `Quarter` variant\nalso holds a `UsState` value</span>\n\nLet’s imagine that a friend is trying to collect all 50 state quarters. While\nwe sort our loose change by coin type, we’ll also call out the name of the\nstate associated with each quarter so that if it’s one our friend doesn’t have,\nthey can add it to their collection.\n\nIn the match expression for this code, we add a variable called `state` to the\npattern that matches values of the variant `Coin::Quarter`. When a\n`Coin::Quarter` matches, the `state` variable will bind to the value of that\nquarter’s state. Then we can use `state` in the code for that arm, like so:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-09-variable-in-pattern/src/main.rs:here}}\n```\n\nIf we were to call `value_in_cents(Coin::Quarter(UsState::Alaska))`, `coin`\nwould be `Coin::Quarter(UsState::Alaska)`. When we compare that value with each\nof the match arms, none of them match until we reach `Coin::Quarter(state)`. At\nthat point, the binding for `state` will be the value `UsState::Alaska`. We can\nthen use that binding in the `println!` expression, thus getting the inner\nstate value out of the `Coin` enum variant for `Quarter`.\n\n### Matching with `Option<T>`\n\nIn the previous section, we wanted to get the inner `T` value out of the `Some`\ncase when using `Option<T>`; we can also handle `Option<T>` using `match`, as\nwe did with the `Coin` enum! Instead of comparing coins, we’ll compare the\nvariants of `Option<T>`, but the way the `match` expression works remains the\nsame.\n\nLet’s say we want to write a function that takes an `Option<i32>` and, if\nthere’s a value inside, adds 1 to that value. If there isn’t a value inside,\nthe function should return the `None` value and not attempt to perform any\noperations.\n\nThis function is very easy to write, thanks to `match`, and will look like\nListing 6-5.\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-05/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 6-5: A function that uses a `match` expression on\nan `Option<i32>`</span>\n\nLet’s examine the first execution of `plus_one` in more detail. When we call\n`plus_one(five)`, the variable `x` in the body of `plus_one` will have the\nvalue `Some(5)`. We then compare that against each match arm:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-05/src/main.rs:first_arm}}\n```\n\nThe `Some(5)` value doesn’t match the pattern `None`, so we continue to the\nnext arm:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-05/src/main.rs:second_arm}}\n```\n\nDoes `Some(5)` match `Some(i)`? It does! We have the same variant. The `i`\nbinds to the value contained in `Some`, so `i` takes the value `5`. The code in\nthe match arm is then executed, so we add 1 to the value of `i` and create a\nnew `Some` value with our total `6` inside.\n\nNow let’s consider the second call of `plus_one` in Listing 6-5, where `x` is\n`None`. We enter the `match` and compare to the first arm:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-05/src/main.rs:first_arm}}\n```\n\nIt matches! There’s no value to add to, so the program stops and returns the\n`None` value on the right side of `=>`. Because the first arm matched, no other\narms are compared.\n\nCombining `match` and enums is useful in many situations. You’ll see this\npattern a lot in Rust code: `match` against an enum, bind a variable to the\ndata inside, and then execute code based on it. It’s a bit tricky at first, but\nonce you get used to it, you’ll wish you had it in all languages. It’s\nconsistently a user favorite.\n\n### Matches Are Exhaustive\n\nThere’s one other aspect of `match` we need to discuss: the arms’ patterns must\ncover all possibilities. Consider this version of our `plus_one` function,\nwhich has a bug and won’t compile:\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-10-non-exhaustive-match/src/main.rs:here}}\n```\n\nWe didn’t handle the `None` case, so this code will cause a bug. Luckily, it’s\na bug Rust knows how to catch. If we try to compile this code, we’ll get this\nerror:\n\n```console\n{{#include ../listings/ch06-enums-and-pattern-matching/no-listing-10-non-exhaustive-match/output.txt}}\n```\n\nRust knows that we didn’t cover every possible case, and even knows which\npattern we forgot! Matches in Rust are *exhaustive*: we must exhaust every last\npossibility in order for the code to be valid. Especially in the case of\n`Option<T>`, when Rust prevents us from forgetting to explicitly handle the\n`None` case, it protects us from assuming that we have a value when we might\nhave null, thus making the billion-dollar mistake discussed earlier impossible.\n\n### Catch-all Patterns and the `_` Placeholder\n\nUsing enums, we can also take special actions for a few particular values, but\nfor all other values take one default action. Imagine we’re implementing a game\nwhere, if you roll a 3 on a dice roll, your player doesn’t move, but instead\ngets a new fancy hat. If you roll a 7, your player loses a fancy hat. For all\nother values, your player moves that number of spaces on the game board. Here’s\na `match` that implements that logic, with the result of the dice roll\nhardcoded rather than a random value, and all other logic represented by\nfunctions without bodies because actually implementing them is out of scope for\nthis example:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-15-binding-catchall/src/main.rs:here}}\n```\n\nFor the first two arms, the patterns are the literal values `3` and `7`. For\nthe last arm that covers every other possible value, the pattern is the\nvariable we’ve chosen to name `other`. The code that runs for the `other` arm\nuses the variable by passing it to the `move_player` function.\n\nThis code compiles, even though we haven’t listed all the possible values a\n`u8` can have, because the last pattern will match all values not specifically\nlisted. This catch-all pattern meets the requirement that `match` must be\nexhaustive. Note that we have to put the catch-all arm last because the\npatterns are evaluated in order. If we put the catch-all arm earlier, the other\narms would never run, so Rust will warn us if we add arms after a catch-all!\n\nRust also has a pattern we can use when we want a catch-all but don’t want to\n*use* the value in the catch-all pattern: `_` is a special pattern that matches\nany value and does not bind to that value. This tells Rust we aren’t going to\nuse the value, so Rust won’t warn us about an unused variable.\n\nLet’s change the rules of the game: now, if you roll anything other than a 3 or\na 7, you must roll again. We no longer need to use the catch-all value, so we\ncan change our code to use `_` instead of the variable named `other`:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-16-underscore-catchall/src/main.rs:here}}\n```\n\nThis example also meets the exhaustiveness requirement because we’re explicitly\nignoring all other values in the last arm; we haven’t forgotten anything.\n\nFinally, we’ll change the rules of the game one more time so that nothing else\nhappens on your turn if you roll anything other than a 3 or a 7. We can express\nthat by using the unit value (the empty tuple type we mentioned in [“The Tuple\nType”][tuples]<!-- ignore --> section) as the code that goes with the `_` arm:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-17-underscore-unit/src/main.rs:here}}\n```\n\nHere, we’re telling Rust explicitly that we aren’t going to use any other value\nthat doesn’t match a pattern in an earlier arm, and we don’t want to run any\ncode in this case.\n\nThere’s more about patterns and matching that we’ll cover in [Chapter\n18][ch18-00-patterns]<!-- ignore -->. For now, we’re going to move on to the\n`if let` syntax, which can be useful in situations where the `match` expression\nis a bit wordy.\n\n[tuples]: ch03-02-data-types.html#the-tuple-type\n[ch18-00-patterns]: ch18-00-patterns.html\n",
          "document_id": 31
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "'if let' is a combine of which keywords?",
              "id": 105,
              "answers": [
                {
                  "answer_id": 107,
                  "document_id": 32,
                  "question_id": 105,
                  "text": "The `if let` syntax lets you combine `if` and `let` into a less verbose way to\nhandle values that match one pattern while ignoring the rest.",
                  "answer_start": 39,
                  "answer_end": 179,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "The syntax `if let` takes a pattern and an expression separated by which sign?",
              "id": 106,
              "answers": [
                {
                  "answer_id": 108,
                  "document_id": 32,
                  "question_id": 106,
                  "text": "The syntax `if let` takes a pattern and an expression separated by an equal\nsign. It works the same way as a `match`, where the expression is given to the\n`match` and the pattern is its first arm. ",
                  "answer_start": 1140,
                  "answer_end": 1337,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are pros and cons of 'if let' syntax?",
              "id": 107,
              "answers": [
                {
                  "answer_id": 109,
                  "document_id": 32,
                  "question_id": 107,
                  "text": "Using `if let` means less typing, less indentation, and less boilerplate code.\nHowever, you lose the exhaustive checking that `match` enforces. Choosing\nbetween `match` and `if let` depends on what you’re doing in your particular\nsituation and whether gaining conciseness is an appropriate trade-off for\nlosing exhaustive checking.",
                  "answer_start": 1633,
                  "answer_end": 1964,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How does 'else' work when I use 'if let'?",
              "id": 108,
              "answers": [
                {
                  "answer_id": 110,
                  "document_id": 32,
                  "question_id": 108,
                  "text": "We can include an `else` with an `if let`. The block of code that goes with the\n`else` is the same as the block of code that would go with the `_` case in the\n`match` expression that is equivalent to the `if let` and `else`. ",
                  "answer_start": 2124,
                  "answer_end": 2349,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When is useful to use 'if let' instead of 'match'?\n",
              "id": 109,
              "answers": [
                {
                  "answer_id": 111,
                  "document_id": 32,
                  "question_id": 109,
                  "text": "\nIf you have a situation in which your program has logic that is too verbose to\nexpress using a `match`, remember that `if let` is in your Rust toolbox as well.\n",
                  "answer_start": 2948,
                  "answer_end": 3109,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why is it good to creating custom types to use in the API?",
              "id": 110,
              "answers": [
                {
                  "answer_id": 112,
                  "document_id": 32,
                  "question_id": 110,
                  "text": "Your Rust programs can now express concepts in your domain using structs and\nenums. Creating custom types to use in your API ensures type safety: the\ncompiler will make certain your functions only get values of the type each\nfunction expects.",
                  "answer_start": 3486,
                  "answer_end": 3728,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## Concise Control Flow with `if let`\n\nThe `if let` syntax lets you combine `if` and `let` into a less verbose way to\nhandle values that match one pattern while ignoring the rest. Consider the\nprogram in Listing 6-6 that matches on an `Option<u8>` value in the\n`config_max` variable but only wants to execute code if the value is the `Some`\nvariant.\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-06/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 6-6: A `match` that only cares about executing\ncode when the value is `Some`</span>\n\nIf the value is `Some`, we print out the value in the `Some` variant by binding\nthe value to the variable `max` in the pattern. We don’t want to do anything\nwith the `None` value. To satisfy the `match` expression, we have to add `_ =>\n()` after processing just one variant, which is annoying boilerplate code to\nadd.\n\nInstead, we could write this in a shorter way using `if let`. The following\ncode behaves the same as the `match` in Listing 6-6:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-12-if-let/src/main.rs:here}}\n```\n\nThe syntax `if let` takes a pattern and an expression separated by an equal\nsign. It works the same way as a `match`, where the expression is given to the\n`match` and the pattern is its first arm. In this case, the pattern is\n`Some(max)`, and the `max` binds to the value inside the `Some`. We can then\nuse `max` in the body of the `if let` block in the same way we used `max` in\nthe corresponding `match` arm. The code in the `if let` block isn’t run if the\nvalue doesn’t match the pattern.\n\nUsing `if let` means less typing, less indentation, and less boilerplate code.\nHowever, you lose the exhaustive checking that `match` enforces. Choosing\nbetween `match` and `if let` depends on what you’re doing in your particular\nsituation and whether gaining conciseness is an appropriate trade-off for\nlosing exhaustive checking.\n\nIn other words, you can think of `if let` as syntax sugar for a `match` that\nruns code when the value matches one pattern and then ignores all other values.\n\nWe can include an `else` with an `if let`. The block of code that goes with the\n`else` is the same as the block of code that would go with the `_` case in the\n`match` expression that is equivalent to the `if let` and `else`. Recall the\n`Coin` enum definition in Listing 6-4, where the `Quarter` variant also held a\n`UsState` value. If we wanted to count all non-quarter coins we see while also\nannouncing the state of the quarters, we could do that with a `match`\nexpression, like this:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-13-count-and-announce-match/src/main.rs:here}}\n```\n\nOr we could use an `if let` and `else` expression, like this:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-14-count-and-announce-if-let-else/src/main.rs:here}}\n```\n\nIf you have a situation in which your program has logic that is too verbose to\nexpress using a `match`, remember that `if let` is in your Rust toolbox as well.\n\n## Summary\n\nWe’ve now covered how to use enums to create custom types that can be one of a\nset of enumerated values. We’ve shown how the standard library’s `Option<T>`\ntype helps you use the type system to prevent errors. When enum values have\ndata inside them, you can use `match` or `if let` to extract and use those\nvalues, depending on how many cases you need to handle.\n\nYour Rust programs can now express concepts in your domain using structs and\nenums. Creating custom types to use in your API ensures type safety: the\ncompiler will make certain your functions only get values of the type each\nfunction expects.\n\nIn order to provide a well-organized API to your users that is straightforward\nto use and only exposes exactly what your users will need, let’s now turn to\nRust’s modules.\n\n",
          "document_id": 32
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "What is the challenge of writing large programs?",
              "id": 111,
              "answers": [
                {
                  "answer_id": 113,
                  "document_id": 33,
                  "question_id": 111,
                  "text": "As you write large programs, organizing your code will become increasingly\nimportant. By grouping related functionality and separating code with distinct\nfeatures, you’ll clarify where to find code that implements a particular\nfeature and where to go to change how a feature works.",
                  "answer_start": 64,
                  "answer_end": 345,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I organize the code if my project grows up?",
              "id": 112,
              "answers": [
                {
                  "answer_id": 114,
                  "document_id": 33,
                  "question_id": 112,
                  "text": "The programs we’ve written so far have been in one module in one file. As a\nproject grows, you should organize code by splitting it into multiple modules\nand then multiple files.",
                  "answer_start": 347,
                  "answer_end": 525,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What can be inside a package?",
              "id": 113,
              "answers": [
                {
                  "answer_id": 115,
                  "document_id": 33,
                  "question_id": 113,
                  "text": "A package can contain multiple binary crates and\noptionally one library crate.",
                  "answer_start": 526,
                  "answer_end": 604,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I organize my code if the package grows?",
              "id": 114,
              "answers": [
                {
                  "answer_id": 116,
                  "document_id": 33,
                  "question_id": 114,
                  "text": "As a package grows, you can extract parts into\nseparate crates that become external dependencies.",
                  "answer_start": 605,
                  "answer_end": 702,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is an encapsulation?",
              "id": 115,
              "answers": [
                {
                  "answer_id": 117,
                  "document_id": 33,
                  "question_id": 115,
                  "text": "We’ll also discuss encapsulating implementation details, which lets you reuse\ncode at a higher level: once you’ve implemented an operation, other code can\ncall your code via its public interface without having to know how the\nimplementation works. The way you write code defines which parts are public for\nother code to use and which parts are private implementation details that you\nreserve the right to change. This is another way to limit the amount of detail\nyou have to keep in your head.",
                  "answer_start": 959,
                  "answer_end": 1452,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the concept of the scope?",
              "id": 116,
              "answers": [
                {
                  "answer_id": 118,
                  "document_id": 33,
                  "question_id": 116,
                  "text": "A related concept is scope: the nested context in which code is written has a\nset of names that are defined as “in scope.” When reading, writing, and\ncompiling code, programmers and compilers need to know whether a particular\nname at a particular spot refers to a variable, function, struct, enum, module,\nconstant, or other item and what that item means. You can create scopes and\nchange which names are in or out of scope. You can’t have two items with the\nsame name in the same scope; tools are available to resolve name conflicts.",
                  "answer_start": 1454,
                  "answer_end": 1988,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can I have two items with the same name in the same scope?",
              "id": 117,
              "answers": [
                {
                  "answer_id": 119,
                  "document_id": 33,
                  "question_id": 117,
                  "text": "You can’t have two items with the\nsame name in the same scope; tools are available to resolve name conflicts.",
                  "answer_start": 1879,
                  "answer_end": 1988,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the features that allow to manage code’s\norganization?",
              "id": 118,
              "answers": [
                {
                  "answer_id": 120,
                  "document_id": 33,
                  "question_id": 118,
                  "text": "Rust has a number of features that allow you to manage your code’s\norganization, including which details are exposed, which details are private,\nand what names are in each scope in your programs. These features, sometimes\ncollectively referred to as the *module system*, include:\n\n* **Packages:** A Cargo feature that lets you build, test, and share crates\n* **Crates:** A tree of modules that produces a library or executable\n* **Modules** and **use:** Let you control the organization, scope, and\n  privacy of paths\n* **Paths:** A way of naming an item, such as a struct, function, or module\n",
                  "answer_start": 1990,
                  "answer_end": 2584,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "# Managing Growing Projects with Packages, Crates, and Modules\n\nAs you write large programs, organizing your code will become increasingly\nimportant. By grouping related functionality and separating code with distinct\nfeatures, you’ll clarify where to find code that implements a particular\nfeature and where to go to change how a feature works.\n\nThe programs we’ve written so far have been in one module in one file. As a\nproject grows, you should organize code by splitting it into multiple modules\nand then multiple files. A package can contain multiple binary crates and\noptionally one library crate. As a package grows, you can extract parts into\nseparate crates that become external dependencies. This chapter covers all\nthese techniques. For very large projects comprising a set of interrelated\npackages that evolve together, Cargo provides *workspaces*, which we’ll cover\nin the [“Cargo Workspaces”][workspaces]<!-- ignore --> section in Chapter 14.\n\nWe’ll also discuss encapsulating implementation details, which lets you reuse\ncode at a higher level: once you’ve implemented an operation, other code can\ncall your code via its public interface without having to know how the\nimplementation works. The way you write code defines which parts are public for\nother code to use and which parts are private implementation details that you\nreserve the right to change. This is another way to limit the amount of detail\nyou have to keep in your head.\n\nA related concept is scope: the nested context in which code is written has a\nset of names that are defined as “in scope.” When reading, writing, and\ncompiling code, programmers and compilers need to know whether a particular\nname at a particular spot refers to a variable, function, struct, enum, module,\nconstant, or other item and what that item means. You can create scopes and\nchange which names are in or out of scope. You can’t have two items with the\nsame name in the same scope; tools are available to resolve name conflicts.\n\nRust has a number of features that allow you to manage your code’s\norganization, including which details are exposed, which details are private,\nand what names are in each scope in your programs. These features, sometimes\ncollectively referred to as the *module system*, include:\n\n* **Packages:** A Cargo feature that lets you build, test, and share crates\n* **Crates:** A tree of modules that produces a library or executable\n* **Modules** and **use:** Let you control the organization, scope, and\n  privacy of paths\n* **Paths:** A way of naming an item, such as a struct, function, or module\n\nIn this chapter, we’ll cover all these features, discuss how they interact, and\nexplain how to use them to manage scope. By the end, you should have a solid\nunderstanding of the module system and be able to work with scopes like a pro!\n\n[workspaces]: ch14-03-cargo-workspaces.html\n",
          "document_id": 33
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "What is the smallest amount of code that the Rust compiler considers at a\ntime?",
              "id": 119,
              "answers": [
                {
                  "answer_id": 121,
                  "document_id": 34,
                  "question_id": 119,
                  "text": "A *crate* is the smallest amount of code that the Rust compiler considers at a\ntime.",
                  "answer_start": 99,
                  "answer_end": 183,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "If I will run `rustc` rather than `cargo` and pass a single source code file, what will the compiler consider this file to be?",
              "id": 120,
              "answers": [
                {
                  "answer_id": 122,
                  "document_id": 34,
                  "question_id": 120,
                  "text": "Even if you run `rustc` rather than `cargo` and pass a single source code\nfile (as we did all the way back in the “Writing and Running a Rust Program”\nsection of Chapter 1), the compiler considers that file to be a crate. Crates\ncan contain modules, and the modules may be defined in other files that get\ncompiled with the crate, as we’ll see in the coming sections.\n",
                  "answer_start": 184,
                  "answer_end": 551,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How are named two forms of the crate?",
              "id": 121,
              "answers": [
                {
                  "answer_id": 123,
                  "document_id": 34,
                  "question_id": 121,
                  "text": "A crate can come in one of two forms: a binary crate or a library crate.",
                  "answer_start": 552,
                  "answer_end": 624,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is characteristic to \"binary crates\"?",
              "id": 122,
              "answers": [
                {
                  "answer_id": 124,
                  "document_id": 34,
                  "question_id": 122,
                  "text": "*Binary crates* are programs you can compile to an executable that you can run,\nsuch as a command-line program or a server. Each must have a function called\n`main` that defines what happens when the executable runs. All the crates we’ve\ncreated so far have been binary crates.",
                  "answer_start": 625,
                  "answer_end": 901,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How do library crate work?",
              "id": 123,
              "answers": [
                {
                  "answer_id": 125,
                  "document_id": 34,
                  "question_id": 123,
                  "text": "*Library crates* don’t have a `main` function, and they don’t compile to an\nexecutable. Instead, they define functionality intended to be shared with\nmultiple projects. For example, the `rand` crate we used in [Chapter\n2][rand]‹!-- ignore --> provides functionality that generates random numbers.\nMost of the time when Rustaceans say “crate”, they mean library crate, and they\nuse “crate” interchangeably with the general programming concept of a “library\".",
                  "answer_start": 903,
                  "answer_end": 1360,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is a cargo?",
              "id": 124,
              "answers": [
                {
                  "answer_id": 126,
                  "document_id": 34,
                  "question_id": 124,
                  "text": "A *package* is a bundle of one or more crates that provides a set of\nfunctionality. A package contains a *Cargo.toml* file that describes how to\nbuild those crates. Cargo is actually a package that contains the binary crate\nfor the command-line tool you’ve been using to build your code. The Cargo\npackage also contains a library crate that the binary crate depends on. Other\nprojects can depend on the Cargo library crate to use the same logic the Cargo\ncommand-line tool uses.\n",
                  "answer_start": 1598,
                  "answer_end": 2077,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does the cargo contain?",
              "id": 125,
              "answers": [
                {
                  "answer_id": 127,
                  "document_id": 34,
                  "question_id": 125,
                  "text": "Cargo is actually a package that contains the binary crate\nfor the command-line tool you’ve been using to build your code. The Cargo\npackage also contains a library crate that the binary crate depends on.",
                  "answer_start": 1763,
                  "answer_end": 1967,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How much binary crates and library crates can package contain.",
              "id": 126,
              "answers": [
                {
                  "answer_id": 128,
                  "document_id": 34,
                  "question_id": 126,
                  "text": "A package can contain as many binary crates as you like, but at most only one\nlibrary crate. A package must contain at least one crate, whether that’s a\nlibrary or binary crate.",
                  "answer_start": 2078,
                  "answer_end": 2255,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## Packages and Crates\n\nThe first parts of the module system we’ll cover are packages and crates.\n\nA *crate* is the smallest amount of code that the Rust compiler considers at a\ntime. Even if you run `rustc` rather than `cargo` and pass a single source code\nfile (as we did all the way back in the “Writing and Running a Rust Program”\nsection of Chapter 1), the compiler considers that file to be a crate. Crates\ncan contain modules, and the modules may be defined in other files that get\ncompiled with the crate, as we’ll see in the coming sections.\n\nA crate can come in one of two forms: a binary crate or a library crate.\n*Binary crates* are programs you can compile to an executable that you can run,\nsuch as a command-line program or a server. Each must have a function called\n`main` that defines what happens when the executable runs. All the crates we’ve\ncreated so far have been binary crates.\n\n*Library crates* don’t have a `main` function, and they don’t compile to an\nexecutable. Instead, they define functionality intended to be shared with\nmultiple projects. For example, the `rand` crate we used in [Chapter\n2][rand]<!-- ignore --> provides functionality that generates random numbers.\nMost of the time when Rustaceans say “crate”, they mean library crate, and they\nuse “crate” interchangeably with the general programming concept of a “library\".\n\nThe *crate root* is a source file that the Rust compiler starts from and makes\nup the root module of your crate (we’ll explain modules in depth in the\n[“Defining Modules to Control Scope and Privacy”][modules]<!-- ignore -->\nsection).\n\nA *package* is a bundle of one or more crates that provides a set of\nfunctionality. A package contains a *Cargo.toml* file that describes how to\nbuild those crates. Cargo is actually a package that contains the binary crate\nfor the command-line tool you’ve been using to build your code. The Cargo\npackage also contains a library crate that the binary crate depends on. Other\nprojects can depend on the Cargo library crate to use the same logic the Cargo\ncommand-line tool uses.\n\nA package can contain as many binary crates as you like, but at most only one\nlibrary crate. A package must contain at least one crate, whether that’s a\nlibrary or binary crate.\n\nLet’s walk through what happens when we create a package. First, we enter the\ncommand `cargo new`:\n\n```console\n$ cargo new my-project\n     Created binary (application) `my-project` package\n$ ls my-project\nCargo.toml\nsrc\n$ ls my-project/src\nmain.rs\n```\n\nAfter we run `cargo new`, we use `ls` to see what Cargo creates. In the project\ndirectory, there’s a *Cargo.toml* file, giving us a package. There’s also a\n*src* directory that contains *main.rs*. Open *Cargo.toml* in your text editor,\nand note there’s no mention of *src/main.rs*. Cargo follows a convention that\n*src/main.rs* is the crate root of a binary crate with the same name as the\npackage. Likewise, Cargo knows that if the package directory contains\n*src/lib.rs*, the package contains a library crate with the same name as the\npackage, and *src/lib.rs* is its crate root. Cargo passes the crate root files\nto `rustc` to build the library or binary.\n\nHere, we have a package that only contains *src/main.rs*, meaning it only\ncontains a binary crate named `my-project`. If a package contains *src/main.rs*\nand *src/lib.rs*, it has two crates: a binary and a library, both with the same\nname as the package. A package can have multiple binary crates by placing files\nin the *src/bin* directory: each file will be a separate binary crate.\n\n[modules]: ch07-02-defining-modules-to-control-scope-and-privacy.html\n[rand]: ch02-00-guessing-game-tutorial.html#generating-a-random-number\n",
          "document_id": 34
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "What paths allow me?",
              "id": 127,
              "answers": [
                {
                  "answer_id": 129,
                  "document_id": 35,
                  "question_id": 127,
                  "text": "we’ll talk about modules and other parts of the module system,\nnamely *paths* that allow you to name items",
                  "answer_start": 67,
                  "answer_end": 173,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the 'use' keyword used for?",
              "id": 128,
              "answers": [
                {
                  "answer_id": 130,
                  "document_id": 35,
                  "question_id": 128,
                  "text": "the `use` keyword that brings a\npath into scope;",
                  "answer_start": 175,
                  "answer_end": 223,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What do 'pub' keyword?",
              "id": 129,
              "answers": [
                {
                  "answer_id": 131,
                  "document_id": 35,
                  "question_id": 129,
                  "text": "and the `pub` keyword to make items public.",
                  "answer_start": 224,
                  "answer_end": 267,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What the compiler do at the beginning, when compiling the crate?",
              "id": 130,
              "answers": [
                {
                  "answer_id": 132,
                  "document_id": 35,
                  "question_id": 130,
                  "text": "- **Start from the crate root**: When compiling a crate, the compiler first\n  looks in the crate root file (usually *src/lib.rs* for a library crate or\n  *src/main.rs* for a binary crate) for code to compile.",
                  "answer_start": 857,
                  "answer_end": 1065,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "If I will declare the module, where will compiler look for module's code?",
              "id": 131,
              "answers": [
                {
                  "answer_id": 133,
                  "document_id": 35,
                  "question_id": 131,
                  "text": "- **Declaring modules**: In the crate root file, you can declare new modules;\nsay, you declare a “garden” module with `mod garden;`. The compiler will look\nfor the module’s code in these places:\n  - Inline, within curly brackets that replace the semicolon following `mod\n    garden`\n  - In the file *src/garden.rs*\n  - In the file *src/garden/mod.rs*",
                  "answer_start": 1066,
                  "answer_end": 1416,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "If I will declare the submodule, where will compiler look for module's code?",
              "id": 132,
              "answers": [
                {
                  "answer_id": 134,
                  "document_id": 35,
                  "question_id": 132,
                  "text": "- **Declaring submodules**: In any file other than the crate root, you can\n  declare submodules. For example, you might declare `mod vegetables;` in\n  *src/garden.rs*. The compiler will look for the submodule’s code within the\n  directory named for the parent module in these places:\n  - Inline, directly following `mod vegetables`, within curly brackets instead\n    of the semicolon\n  - In the file *src/garden/vegetables.rs*\n  - In the file *src/garden/vegetables/mod.rs*",
                  "answer_start": 1417,
                  "answer_end": 1890,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to make items public?",
              "id": 133,
              "answers": [
                {
                  "answer_id": 135,
                  "document_id": 35,
                  "question_id": 133,
                  "text": "To make a module public, declare it with `pub mod`\n  instead of `mod`. To make items within a public module public as well, use\n  `pub` before their declarations.",
                  "answer_start": 2326,
                  "answer_end": 2488,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Code within a module is private or public from its parent modules by default?",
              "id": 134,
              "answers": [
                {
                  "answer_id": 136,
                  "document_id": 35,
                  "question_id": 134,
                  "text": "- **Private vs public**: Code within a module is private from its parent\n  modules by default. ",
                  "answer_start": 2231,
                  "answer_end": 2326,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What the modules allow us?",
              "id": 135,
              "answers": [
                {
                  "answer_id": 137,
                  "document_id": 35,
                  "question_id": 135,
                  "text": "*Modules* let us organize code within a crate for readability and easy reuse.\nModules also allow us to control the *privacy* of items, because code within a\nmodule is private by default. Private items are internal implementation details\nnot available for outside use. We can choose to make modules and the items\nwithin them public, which exposes them to allow external code to use and depend\non them.",
                  "answer_start": 4073,
                  "answer_end": 4473,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why is it worth to use modules?",
              "id": 136,
              "answers": [
                {
                  "answer_id": 138,
                  "document_id": 35,
                  "question_id": 136,
                  "text": "By using modules, we can group related definitions together and name why\nthey’re related. Programmers using this code can navigate the code based on the\ngroups rather than having to read through all the definitions, making it easier\nto find the definitions relevant to them. Programmers adding new functionality\nto this code would know where to place the code to keep the program organized.\n",
                  "answer_start": 6120,
                  "answer_end": 6511,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why *src/main.rs* and *src/lib.rs* files are named crate roots?",
              "id": 137,
              "answers": [
                {
                  "answer_id": 139,
                  "document_id": 35,
                  "question_id": 137,
                  "text": "Earlier, we mentioned that *src/main.rs* and *src/lib.rs* are called crate\nroots. The reason for their name is that the contents of either of these two\nfiles form a module named `crate` at the root of the crate’s module structure,\nknown as the *module tree*.",
                  "answer_start": 6512,
                  "answer_end": 6770,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## Defining Modules to Control Scope and Privacy\n\nIn this section, we’ll talk about modules and other parts of the module system,\nnamely *paths* that allow you to name items; the `use` keyword that brings a\npath into scope; and the `pub` keyword to make items public. We’ll also discuss\nthe `as` keyword, external packages, and the glob operator.\n\nFirst, we’re going to start with a list of rules for easy reference when you’re\norganizing your code in the future. Then we’ll explain each of the rules in\ndetail.\n\n### Modules Cheat Sheet\n\nHere we provide a quick reference on how modules, paths, the `use` keyword, and\nthe `pub` keyword work in the compiler, and how most developers organize their\ncode. We’ll be going through examples of each of these rules throughout this\nchapter, but this is a great place to refer to as a reminder of how modules\nwork.\n\n- **Start from the crate root**: When compiling a crate, the compiler first\n  looks in the crate root file (usually *src/lib.rs* for a library crate or\n  *src/main.rs* for a binary crate) for code to compile.\n- **Declaring modules**: In the crate root file, you can declare new modules;\nsay, you declare a “garden” module with `mod garden;`. The compiler will look\nfor the module’s code in these places:\n  - Inline, within curly brackets that replace the semicolon following `mod\n    garden`\n  - In the file *src/garden.rs*\n  - In the file *src/garden/mod.rs*\n- **Declaring submodules**: In any file other than the crate root, you can\n  declare submodules. For example, you might declare `mod vegetables;` in\n  *src/garden.rs*. The compiler will look for the submodule’s code within the\n  directory named for the parent module in these places:\n  - Inline, directly following `mod vegetables`, within curly brackets instead\n    of the semicolon\n  - In the file *src/garden/vegetables.rs*\n  - In the file *src/garden/vegetables/mod.rs*\n- **Paths to code in modules**: Once a module is part of your crate, you can\n  refer to code in that module from anywhere else in that same crate, as long\n  as the privacy rules allow, using the path to the code. For example, an\n  `Asparagus` type in the garden vegetables module would be found at\n  `crate::garden::vegetables::Asparagus`.\n- **Private vs public**: Code within a module is private from its parent\n  modules by default. To make a module public, declare it with `pub mod`\n  instead of `mod`. To make items within a public module public as well, use\n  `pub` before their declarations.\n- **The `use` keyword**: Within a scope, the `use` keyword creates shortcuts to\n  items to reduce repetition of long paths. In any scope that can refer to\n  `crate::garden::vegetables::Asparagus`, you can create a shortcut with `use\n  crate::garden::vegetables::Asparagus;` and from then on you only need to\n  write `Asparagus` to make use of that type in the scope.\n\nHere we create a binary crate named `backyard` that illustrates these rules. The\ncrate’s directory, also named `backyard`, contains these files and directories:\n\n```text\nbackyard\n├── Cargo.lock\n├── Cargo.toml\n└── src\n    ├── garden\n    │   └── vegetables.rs\n    ├── garden.rs\n    └── main.rs\n```\n\nThe crate root file in this case is *src/main.rs*, and it contains:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,noplayground,ignore\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/quick-reference-example/src/main.rs}}\n```\n\nThe `pub mod garden;` line tells the compiler to include the code it finds in\n*src/garden.rs*, which is:\n\n<span class=\"filename\">Filename: src/garden.rs</span>\n\n```rust,noplayground,ignore\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/quick-reference-example/src/garden.rs}}\n```\n\nHere, `pub mod vegetables;` means the code in *src/garden/vegetables.rs* is\nincluded too. That code is:\n\n```rust,noplayground,ignore\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/quick-reference-example/src/garden/vegetables.rs}}\n```\n\nNow let’s get into the details of these rules and demonstrate them in action!\n\n### Grouping Related Code in Modules\n\n*Modules* let us organize code within a crate for readability and easy reuse.\nModules also allow us to control the *privacy* of items, because code within a\nmodule is private by default. Private items are internal implementation details\nnot available for outside use. We can choose to make modules and the items\nwithin them public, which exposes them to allow external code to use and depend\non them.\n\nAs an example, let’s write a library crate that provides the functionality of a\nrestaurant. We’ll define the signatures of functions but leave their bodies\nempty to concentrate on the organization of the code, rather than the\nimplementation of a restaurant.\n\nIn the restaurant industry, some parts of a restaurant are referred to as\n*front of house* and others as *back of house*. Front of house is where\ncustomers are; this encompasses where the hosts seat customers, servers take\norders and payment, and bartenders make drinks. Back of house is where the\nchefs and cooks work in the kitchen, dishwashers clean up, and managers do\nadministrative work.\n\nTo structure our crate in this way, we can organize its functions into nested\nmodules. Create a new library named `restaurant` by running `cargo new\nrestaurant --lib`; then enter the code in Listing 7-1 into *src/lib.rs* to\ndefine some modules and function signatures. Here’s the front of house section:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-01/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-1: A `front_of_house` module containing other\nmodules that then contain functions</span>\n\nWe define a module with the `mod` keyword followed by the name of the module\n(in this case, `front_of_house`). The body of the module then goes inside curly\nbrackets. Inside modules, we can place other modules, as in this case with the\nmodules `hosting` and `serving`. Modules can also hold definitions for other\nitems, such as structs, enums, constants, traits, and—as in Listing\n7-1—functions.\n\nBy using modules, we can group related definitions together and name why\nthey’re related. Programmers using this code can navigate the code based on the\ngroups rather than having to read through all the definitions, making it easier\nto find the definitions relevant to them. Programmers adding new functionality\nto this code would know where to place the code to keep the program organized.\n\nEarlier, we mentioned that *src/main.rs* and *src/lib.rs* are called crate\nroots. The reason for their name is that the contents of either of these two\nfiles form a module named `crate` at the root of the crate’s module structure,\nknown as the *module tree*.\n\nListing 7-2 shows the module tree for the structure in Listing 7-1.\n\n```text\ncrate\n └── front_of_house\n     ├── hosting\n     │   ├── add_to_waitlist\n     │   └── seat_at_table\n     └── serving\n         ├── take_order\n         ├── serve_order\n         └── take_payment\n```\n\n<span class=\"caption\">Listing 7-2: The module tree for the code in Listing\n7-1</span>\n\nThis tree shows how some of the modules nest inside one another; for example,\n`hosting` nests inside `front_of_house`. The tree also shows that some modules\nare *siblings* to each other, meaning they’re defined in the same module;\n`hosting` and `serving` are siblings defined within `front_of_house`. If module\nA is contained inside module B, we say that module A is the *child* of module B\nand that module B is the *parent* of module A. Notice that the entire module\ntree is rooted under the implicit module named `crate`.\n\nThe module tree might remind you of the filesystem’s directory tree on your\ncomputer; this is a very apt comparison! Just like directories in a filesystem,\nyou use modules to organize your code. And just like files in a directory, we\nneed a way to find our modules.\n",
          "document_id": 35
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "What I should know to call a function?",
              "id": 138,
              "answers": [
                {
                  "answer_id": 140,
                  "document_id": 36,
                  "question_id": 138,
                  "text": "To show Rust where to find an item in a module tree, we use a path in the same\nway we use a path when navigating a filesystem. To call a function, we need to\nknow its path.",
                  "answer_start": 54,
                  "answer_end": 226,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the two forms of the paths?",
              "id": 139,
              "answers": [
                {
                  "answer_id": 141,
                  "document_id": 36,
                  "question_id": 139,
                  "text": "A path can take two forms:\n\n* An *absolute path* is the full path starting from a crate root; for code\n  from an external crate, the absolute path begins with the crate name, and for\n  code from the current crate, it starts with the literal `crate`.\n* A *relative path* starts from the current module and uses `self`, `super`, or\n  an identifier in the current module.",
                  "answer_start": 228,
                  "answer_end": 596,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the differences and similarities between absolute and relative path?",
              "id": 140,
              "answers": [
                {
                  "answer_id": 142,
                  "document_id": 36,
                  "question_id": 140,
                  "text": "* An *absolute path* is the full path starting from a crate root; for code\n  from an external crate, the absolute path begins with the crate name, and for\n  code from the current crate, it starts with the literal `crate`.\n* A *relative path* starts from the current module and uses `self`, `super`, or\n  an identifier in the current module.\n\nBoth absolute and relative paths are followed by one or more identifiers\nseparated by double colons (`::`).",
                  "answer_start": 256,
                  "answer_end": 705,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Decision to choose absolute or relative path depends on what?",
              "id": 141,
              "answers": [
                {
                  "answer_id": 143,
                  "document_id": 36,
                  "question_id": 141,
                  "text": "Choosing whether to use a relative or absolute path is a decision you’ll make\nbased on your project, and depends on whether you’re more likely to move item\ndefinition code separately from or together with the code that uses the item.\nFor example, if we move the `front_of_house` module and the `eat_at_restaurant`\nfunction into a module named `customer_experience`, we’d need to update the\nabsolute path to `add_to_waitlist`, but the relative path would still be valid.\nHowever, if we moved the `eat_at_restaurant` function separately into a module\nnamed `dining`, the absolute path to the `add_to_waitlist` call would stay the\nsame, but the relative path would need to be updated. Our preference in general\nis to specify absolute paths because it’s more likely we’ll want to move code\ndefinitions and item calls independently of each other.\n",
                  "answer_start": 2747,
                  "answer_end": 3589,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does it mean that I have error messages that module is private?",
              "id": 142,
              "answers": [
                {
                  "answer_id": 144,
                  "document_id": 36,
                  "question_id": 142,
                  "text": "The error messages say that module `hosting` is private. In other words, we\nhave the correct paths for the `hosting` module and the `add_to_waitlist`\nfunction, but Rust won’t let us use them because it doesn’t have access to the\nprivate sections.",
                  "answer_start": 3899,
                  "answer_end": 4145,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I make item in rust private?",
              "id": 143,
              "answers": [
                {
                  "answer_id": 145,
                  "document_id": 36,
                  "question_id": 143,
                  "text": "In Rust, all items (functions, methods, structs, enums,\nmodules, and constants) are private to parent modules by default. If you want\nto make an item like a function or struct private, you put it in a module.",
                  "answer_start": 4146,
                  "answer_end": 4354,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can items in child modules use the items in their ancestor modules?",
              "id": 144,
              "answers": [
                {
                  "answer_id": 146,
                  "document_id": 36,
                  "question_id": 144,
                  "text": "Items in a parent module can’t use the private items inside child modules, but\nitems in child modules can use the items in their ancestor modules. This is\nbecause child modules wrap and hide their implementation details, but the child\nmodules can see the context in which they’re defined. ",
                  "answer_start": 4356,
                  "answer_end": 4645,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can I expose inner parts of child modules’ code to outer ancestor modules?",
              "id": 145,
              "answers": [
                {
                  "answer_id": 147,
                  "document_id": 36,
                  "question_id": 145,
                  "text": "Rust chose to have the module system function this way so that hiding inner\nimplementation details is the default. That way, you know which parts of the\ninner code you can change without breaking outer code. However, Rust does give\nyou the option to expose inner parts of child modules’ code to outer ancestor\nmodules by using the `pub` keyword to make an item public.\n",
                  "answer_start": 4887,
                  "answer_end": 5256,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "The `pub` keyword on a module give the access its inner code or not?",
              "id": 146,
              "answers": [
                {
                  "answer_id": 148,
                  "document_id": 36,
                  "question_id": 146,
                  "text": "The `pub` keyword on a module\nonly lets code in its ancestor modules refer to it, not access its inner code.\nBecause modules are containers, there’s not much we can do by only making the\nmodule public; we need to go further and choose to make one or more of the\nitems within the module public as well.\n",
                  "answer_start": 6462,
                  "answer_end": 6764,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Where should be defined module tree?",
              "id": 147,
              "answers": [
                {
                  "answer_id": 149,
                  "document_id": 36,
                  "question_id": 147,
                  "text": "> The module tree should be defined in *src/lib.rs*. Then, any public items can\n> be used in the binary crate by starting paths with the name of the package.\n> The binary crate becomes a user of the library crate just like a completely\n> external crate would use the library crate: it can only use the public API.\n> This helps you design a good API; not only are you the author, you’re also a\n> client!\n>",
                  "answer_start": 9763,
                  "answer_end": 10167,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What lets me keyword 'super'?",
              "id": 148,
              "answers": [
                {
                  "answer_id": 150,
                  "document_id": 36,
                  "question_id": 148,
                  "text": "We can construct relative paths that begin in the parent module, rather than\nthe current module or the crate root, by using `super` at the start of the\npath. This is like starting a filesystem path with the `..` syntax. Using\n`super` allows us to reference an item that we know is in the parent module,\nwhich can make rearranging the module tree easier when the module is closely\nrelated to the parent, but the parent might be moved elsewhere in the module\ntree someday.",
                  "answer_start": 10389,
                  "answer_end": 10859,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What I should remember if I want to make structs and enums public?",
              "id": 149,
              "answers": [
                {
                  "answer_id": 151,
                  "document_id": 36,
                  "question_id": 149,
                  "text": "We can also use `pub` to designate structs and enums as public, but there are a\nfew details extra to the usage of `pub` with structs and enums. If we use `pub`\nbefore a struct definition, we make the struct public, but the struct’s fields\nwill still be private. We can make each field public or not on a case-by-case\nbasis. In Listing 7-9, we’ve defined a public `back_of_house::Breakfast` struct\nwith a public `toast` field but a private `seasonal_fruit` field. This models\nthe case in a restaurant where the customer can pick the type of bread that\ncomes with a meal, but the chef decides which fruit accompanies the meal based\non what’s in season and in stock. The available fruit changes quickly, so\ncustomers can’t choose the fruit or even see which fruit they’ll get.",
                  "answer_start": 12111,
                  "answer_end": 12884,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "If I have public enum, are the fields inside the enum public too?",
              "id": 150,
              "answers": [
                {
                  "answer_id": 152,
                  "document_id": 36,
                  "question_id": 150,
                  "text": "In contrast, if we make an enum public, all of its variants are then public. We\nonly need the `pub` before the `enum` keyword",
                  "answer_start": 13940,
                  "answer_end": 14065,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why enums aren’t so useful unless their variants are public?",
              "id": 151,
              "answers": [
                {
                  "answer_id": 153,
                  "document_id": 36,
                  "question_id": 151,
                  "text": "Enums aren’t very useful unless their variants are public; it would be annoying\nto have to annotate all enum variants with `pub` in every case, so the default\nfor enum variants is to be public.",
                  "answer_start": 14478,
                  "answer_end": 14671,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Are struct fields public or private by default?",
              "id": 152,
              "answers": [
                {
                  "answer_id": 154,
                  "document_id": 36,
                  "question_id": 152,
                  "text": "Structs are often useful without their\nfields being public, so struct fields follow the general rule of everything\nbeing private by default unless annotated with `pub`.",
                  "answer_start": 14672,
                  "answer_end": 14840,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## Paths for Referring to an Item in the Module Tree\n\nTo show Rust where to find an item in a module tree, we use a path in the same\nway we use a path when navigating a filesystem. To call a function, we need to\nknow its path.\n\nA path can take two forms:\n\n* An *absolute path* is the full path starting from a crate root; for code\n  from an external crate, the absolute path begins with the crate name, and for\n  code from the current crate, it starts with the literal `crate`.\n* A *relative path* starts from the current module and uses `self`, `super`, or\n  an identifier in the current module.\n\nBoth absolute and relative paths are followed by one or more identifiers\nseparated by double colons (`::`).\n\nReturning to Listing 7-1, say we want to call the `add_to_waitlist` function.\nThis is the same as asking: what’s the path of the `add_to_waitlist` function?\nListing 7-3 contains Listing 7-1 with some of the modules and functions\nremoved.\n\nWe’ll show two ways to call the `add_to_waitlist` function from a new function\n`eat_at_restaurant` defined in the crate root. These paths are correct, but\nthere’s another problem remaining that will prevent this example from compiling\nas-is. We’ll explain why in a bit.\n\nThe `eat_at_restaurant` function is part of our library crate’s public API, so\nwe mark it with the `pub` keyword. In the [“Exposing Paths with the `pub`\nKeyword”][pub]<!-- ignore --> section, we’ll go into more detail about `pub`.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-03/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-3: Calling the `add_to_waitlist` function using\nabsolute and relative paths</span>\n\nThe first time we call the `add_to_waitlist` function in `eat_at_restaurant`,\nwe use an absolute path. The `add_to_waitlist` function is defined in the same\ncrate as `eat_at_restaurant`, which means we can use the `crate` keyword to\nstart an absolute path. We then include each of the successive modules until we\nmake our way to `add_to_waitlist`. You can imagine a filesystem with the same\nstructure: we’d specify the path `/front_of_house/hosting/add_to_waitlist` to\nrun the `add_to_waitlist` program; using the `crate` name to start from the\ncrate root is like using `/` to start from the filesystem root in your shell.\n\nThe second time we call `add_to_waitlist` in `eat_at_restaurant`, we use a\nrelative path. The path starts with `front_of_house`, the name of the module\ndefined at the same level of the module tree as `eat_at_restaurant`. Here the\nfilesystem equivalent would be using the path\n`front_of_house/hosting/add_to_waitlist`. Starting with a module name means\nthat the path is relative.\n\nChoosing whether to use a relative or absolute path is a decision you’ll make\nbased on your project, and depends on whether you’re more likely to move item\ndefinition code separately from or together with the code that uses the item.\nFor example, if we move the `front_of_house` module and the `eat_at_restaurant`\nfunction into a module named `customer_experience`, we’d need to update the\nabsolute path to `add_to_waitlist`, but the relative path would still be valid.\nHowever, if we moved the `eat_at_restaurant` function separately into a module\nnamed `dining`, the absolute path to the `add_to_waitlist` call would stay the\nsame, but the relative path would need to be updated. Our preference in general\nis to specify absolute paths because it’s more likely we’ll want to move code\ndefinitions and item calls independently of each other.\n\nLet’s try to compile Listing 7-3 and find out why it won’t compile yet! The\nerror we get is shown in Listing 7-4.\n\n```console\n{{#include ../listings/ch07-managing-growing-projects/listing-07-03/output.txt}}\n```\n\n<span class=\"caption\">Listing 7-4: Compiler errors from building the code in\nListing 7-3</span>\n\nThe error messages say that module `hosting` is private. In other words, we\nhave the correct paths for the `hosting` module and the `add_to_waitlist`\nfunction, but Rust won’t let us use them because it doesn’t have access to the\nprivate sections. In Rust, all items (functions, methods, structs, enums,\nmodules, and constants) are private to parent modules by default. If you want\nto make an item like a function or struct private, you put it in a module.\n\nItems in a parent module can’t use the private items inside child modules, but\nitems in child modules can use the items in their ancestor modules. This is\nbecause child modules wrap and hide their implementation details, but the child\nmodules can see the context in which they’re defined. To continue with our\nmetaphor, think of the privacy rules as being like the back office of a\nrestaurant: what goes on in there is private to restaurant customers, but\noffice managers can see and do everything in the restaurant they operate.\n\nRust chose to have the module system function this way so that hiding inner\nimplementation details is the default. That way, you know which parts of the\ninner code you can change without breaking outer code. However, Rust does give\nyou the option to expose inner parts of child modules’ code to outer ancestor\nmodules by using the `pub` keyword to make an item public.\n\n### Exposing Paths with the `pub` Keyword\n\nLet’s return to the error in Listing 7-4 that told us the `hosting` module is\nprivate. We want the `eat_at_restaurant` function in the parent module to have\naccess to the `add_to_waitlist` function in the child module, so we mark the\n`hosting` module with the `pub` keyword, as shown in Listing 7-5.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-05/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-5: Declaring the `hosting` module as `pub` to\nuse it from `eat_at_restaurant`</span>\n\nUnfortunately, the code in Listing 7-5 still results in an error, as shown in\nListing 7-6.\n\n```console\n{{#include ../listings/ch07-managing-growing-projects/listing-07-05/output.txt}}\n```\n\n<span class=\"caption\">Listing 7-6: Compiler errors from building the code in\nListing 7-5</span>\n\nWhat happened? Adding the `pub` keyword in front of `mod hosting` makes the\nmodule public. With this change, if we can access `front_of_house`, we can\naccess `hosting`. But the *contents* of `hosting` are still private; making the\nmodule public doesn’t make its contents public. The `pub` keyword on a module\nonly lets code in its ancestor modules refer to it, not access its inner code.\nBecause modules are containers, there’s not much we can do by only making the\nmodule public; we need to go further and choose to make one or more of the\nitems within the module public as well.\n\nThe errors in Listing 7-6 say that the `add_to_waitlist` function is private.\nThe privacy rules apply to structs, enums, functions, and methods as well as\nmodules.\n\nLet’s also make the `add_to_waitlist` function public by adding the `pub`\nkeyword before its definition, as in Listing 7-7.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground,test_harness\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-07/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-7: Adding the `pub` keyword to `mod hosting`\nand `fn add_to_waitlist` lets us call the function from\n`eat_at_restaurant`</span>\n\nNow the code will compile! To see why adding the `pub` keyword lets us use\nthese paths in `add_to_waitlist` with respect to the privacy rules, let’s look\nat the absolute and the relative paths.\n\nIn the absolute path, we start with `crate`, the root of our crate’s module\ntree. The `front_of_house` module is defined in the crate root. While\n`front_of_house` isn’t public, because the `eat_at_restaurant` function is\ndefined in the same module as `front_of_house` (that is, `eat_at_restaurant`\nand `front_of_house` are siblings), we can refer to `front_of_house` from\n`eat_at_restaurant`. Next is the `hosting` module marked with `pub`. We can\naccess the parent module of `hosting`, so we can access `hosting`. Finally, the\n`add_to_waitlist` function is marked with `pub` and we can access its parent\nmodule, so this function call works!\n\nIn the relative path, the logic is the same as the absolute path except for the\nfirst step: rather than starting from the crate root, the path starts from\n`front_of_house`. The `front_of_house` module is defined within the same module\nas `eat_at_restaurant`, so the relative path starting from the module in which\n`eat_at_restaurant` is defined works. Then, because `hosting` and\n`add_to_waitlist` are marked with `pub`, the rest of the path works, and this\nfunction call is valid!\n\nIf you plan on sharing your library crate so other projects can use your code,\nyour public API is your contract with users of your crate that determines how\nthey can interact with your code. There are many considerations around managing\nchanges to your public API to make it easier for people to depend on your\ncrate. These considerations are out of the scope of this book; if you’re\ninterested in this topic, see [The Rust API Guidelines][api-guidelines].\n\n> #### Best Practices for Packages with a Binary and a Library\n>\n> We mentioned a package can contain both a *src/main.rs* binary crate root as\n> well as a *src/lib.rs* library crate root, and both crates will have the\n> package name by default. Typically, packages with this pattern of containing\n> both a library and a binary crate will have just enough code in the binary\n> crate to start an executable that calls code with the library crate. This\n> lets other projects benefit from the most functionality that the package\n> provides, because the library crate’s code can be shared.\n>\n> The module tree should be defined in *src/lib.rs*. Then, any public items can\n> be used in the binary crate by starting paths with the name of the package.\n> The binary crate becomes a user of the library crate just like a completely\n> external crate would use the library crate: it can only use the public API.\n> This helps you design a good API; not only are you the author, you’re also a\n> client!\n>\n> In [Chapter 12][ch12]<!-- ignore -->, we’ll demonstrate this organizational\n> practice with a command-line program that will contain both a binary crate\n> and a library crate.\n\n### Starting Relative Paths with `super`\n\nWe can construct relative paths that begin in the parent module, rather than\nthe current module or the crate root, by using `super` at the start of the\npath. This is like starting a filesystem path with the `..` syntax. Using\n`super` allows us to reference an item that we know is in the parent module,\nwhich can make rearranging the module tree easier when the module is closely\nrelated to the parent, but the parent might be moved elsewhere in the module\ntree someday.\n\nConsider the code in Listing 7-8 that models the situation in which a chef\nfixes an incorrect order and personally brings it out to the customer. The\nfunction `fix_incorrect_order` defined in the `back_of_house` module calls the\nfunction `deliver_order` defined in the parent module by specifying the path to\n`deliver_order` starting with `super`:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground,test_harness\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-08/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-8: Calling a function using a relative path\nstarting with `super`</span>\n\nThe `fix_incorrect_order` function is in the `back_of_house` module, so we can\nuse `super` to go to the parent module of `back_of_house`, which in this case\nis `crate`, the root. From there, we look for `deliver_order` and find it.\nSuccess! We think the `back_of_house` module and the `deliver_order` function\nare likely to stay in the same relationship to each other and get moved\ntogether should we decide to reorganize the crate’s module tree. Therefore, we\nused `super` so we’ll have fewer places to update code in the future if this\ncode gets moved to a different module.\n\n### Making Structs and Enums Public\n\nWe can also use `pub` to designate structs and enums as public, but there are a\nfew details extra to the usage of `pub` with structs and enums. If we use `pub`\nbefore a struct definition, we make the struct public, but the struct’s fields\nwill still be private. We can make each field public or not on a case-by-case\nbasis. In Listing 7-9, we’ve defined a public `back_of_house::Breakfast` struct\nwith a public `toast` field but a private `seasonal_fruit` field. This models\nthe case in a restaurant where the customer can pick the type of bread that\ncomes with a meal, but the chef decides which fruit accompanies the meal based\non what’s in season and in stock. The available fruit changes quickly, so\ncustomers can’t choose the fruit or even see which fruit they’ll get.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-09/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-9: A struct with some public fields and some\nprivate fields</span>\n\nBecause the `toast` field in the `back_of_house::Breakfast` struct is public,\nin `eat_at_restaurant` we can write and read to the `toast` field using dot\nnotation. Notice that we can’t use the `seasonal_fruit` field in\n`eat_at_restaurant` because `seasonal_fruit` is private. Try uncommenting the\nline modifying the `seasonal_fruit` field value to see what error you get!\n\nAlso, note that because `back_of_house::Breakfast` has a private field, the\nstruct needs to provide a public associated function that constructs an\ninstance of `Breakfast` (we’ve named it `summer` here). If `Breakfast` didn’t\nhave such a function, we couldn’t create an instance of `Breakfast` in\n`eat_at_restaurant` because we couldn’t set the value of the private\n`seasonal_fruit` field in `eat_at_restaurant`.\n\nIn contrast, if we make an enum public, all of its variants are then public. We\nonly need the `pub` before the `enum` keyword, as shown in Listing 7-10.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-10/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-10: Designating an enum as public makes all its\nvariants public</span>\n\nBecause we made the `Appetizer` enum public, we can use the `Soup` and `Salad`\nvariants in `eat_at_restaurant`.\n\nEnums aren’t very useful unless their variants are public; it would be annoying\nto have to annotate all enum variants with `pub` in every case, so the default\nfor enum variants is to be public. Structs are often useful without their\nfields being public, so struct fields follow the general rule of everything\nbeing private by default unless annotated with `pub`.\n\nThere’s one more situation involving `pub` that we haven’t covered, and that is\nour last module system feature: the `use` keyword. We’ll cover `use` by itself\nfirst, and then we’ll show how to combine `pub` and `use`.\n\n[pub]: ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html#exposing-paths-with-the-pub-keyword\n[api-guidelines]: https://rust-lang.github.io/api-guidelines/\n[ch12]: ch12-00-an-io-project.html\n",
          "document_id": 36
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "What I can do if i writing out the paths to call functions is too inconvenient and repetitive?",
              "id": 153,
              "answers": [
                {
                  "answer_id": 155,
                  "document_id": 37,
                  "question_id": 153,
                  "text": "Having to write out the paths to call functions can feel inconvenient and\nrepetitive. In Listing 7-7, whether we chose the absolute or relative path to\nthe `add_to_waitlist` function, every time we wanted to call `add_to_waitlist`\nwe had to specify `front_of_house` and `hosting` too. Fortunately, there’s a\nway to simplify this process: we can create a shortcut to a path with the `use`\nkeyword once, and then use the shorter name everywhere else in the scope.",
                  "answer_start": 53,
                  "answer_end": 514,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "If I have path brought into scope with `use`, it checks privacy or not?\n",
              "id": 154,
              "answers": [
                {
                  "answer_id": 156,
                  "document_id": 37,
                  "question_id": 154,
                  "text": "Paths brought into scope with `use`\nalso check privacy, like any other paths.",
                  "answer_start": 1295,
                  "answer_end": 1372,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "I have warning that the `use` is no longer used in its scope. How can I fix it?",
              "id": 155,
              "answers": [
                {
                  "answer_id": 157,
                  "document_id": 37,
                  "question_id": 155,
                  "text": "Notice there’s also a warning that the `use` is no longer used in its scope! To\nfix this problem, move the `use` within the `customer` module too, or reference\nthe shortcut in the parent module with `super::hosting` within the child\n`customer` module.",
                  "answer_start": 2146,
                  "answer_end": 2397,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When it is idiomatic to specify the full path?",
              "id": 156,
              "answers": [
                {
                  "answer_id": 158,
                  "document_id": 37,
                  "question_id": 156,
                  "text": "On the other hand, when bringing in structs, enums, and other items with `use`,\nit’s idiomatic to specify the full path.",
                  "answer_start": 3551,
                  "answer_end": 3671,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can I bring two items with the same name\ninto scope with `use` statements?",
              "id": 157,
              "answers": [
                {
                  "answer_id": 159,
                  "document_id": 37,
                  "question_id": 157,
                  "text": "The exception to this idiom is if we’re bringing two items with the same name\ninto scope with `use` statements, because Rust doesn’t allow that. ",
                  "answer_start": 4201,
                  "answer_end": 4346,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "If I would specify std::fmt::Result` and `use std::io::Result`, rust could distingush them?",
              "id": 158,
              "answers": [
                {
                  "answer_id": 160,
                  "document_id": 37,
                  "question_id": 158,
                  "text": "As you can see, using the parent modules distinguishes the two `Result` types.\nIf instead we specified `use std::fmt::Result` and `use std::io::Result`, we’d\nhave two `Result` types in the same scope and Rust wouldn’t know which one we\nmeant when we used `Result`.",
                  "answer_start": 4799,
                  "answer_end": 5063,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I bring two types of the same name\ninto the same scope with `use`?",
              "id": 159,
              "answers": [
                {
                  "answer_id": 161,
                  "document_id": 37,
                  "question_id": 159,
                  "text": "There’s another solution to the problem of bringing two types of the same name\ninto the same scope with `use`: after the path, we can specify `as` and a new\nlocal name, or *alias*, for the type.",
                  "answer_start": 5112,
                  "answer_end": 5306,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When is the re-exporting useful?",
              "id": 160,
              "answers": [
                {
                  "answer_id": 162,
                  "document_id": 37,
                  "question_id": 160,
                  "text": "Re-exporting is useful when the internal structure of your code is different\nfrom how programmers calling your code would think about the domain.",
                  "answer_start": 7149,
                  "answer_end": 7294,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to bring 'rand' into the scope?",
              "id": 161,
              "answers": [
                {
                  "answer_id": 163,
                  "document_id": 37,
                  "question_id": 161,
                  "text": "Then, to bring `rand` definitions into the scope of our package, we added a\n`use` line starting with the name of the crate, `rand`, and listed the items\nwe wanted to bring into scope. ",
                  "answer_start": 8681,
                  "answer_end": 8865,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why I don’t need to change *Cargo.toml* to include `std`?",
              "id": 162,
              "answers": [
                {
                  "answer_id": 164,
                  "document_id": 37,
                  "question_id": 162,
                  "text": "Note that the standard `std` library is also a crate that’s external to our\npackage. Because the standard library is shipped with the Rust language, we\ndon’t need to change *Cargo.toml* to include `std`. ",
                  "answer_start": 9436,
                  "answer_end": 9640,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How I can bring items from std into the scope?",
              "id": 163,
              "answers": [
                {
                  "answer_id": 165,
                  "document_id": 37,
                  "question_id": 163,
                  "text": " But we do need to refer to\nit with `use` to bring items from there into our package’s scope. For example,\nwith `HashMap` we would use this line:\n\n```rust\nuse std::collections::HashMap;\n```\n\nThis is an absolute path starting with `std`, the name of the standard library\ncrate.",
                  "answer_start": 9639,
                  "answer_end": 9915,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What I can do to bring same items into the scope in one line?",
              "id": 164,
              "answers": [
                {
                  "answer_id": 166,
                  "document_id": 37,
                  "question_id": 164,
                  "text": "we can use nested paths to bring the same items into scope in one\nline. We do this by specifying the common part of the path, followed by two\ncolons, and then curly brackets around a list of the parts of the paths that\ndiffer",
                  "answer_start": 10440,
                  "answer_end": 10665,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When is it useful to use a nested path at any level in a path?",
              "id": 165,
              "answers": [
                {
                  "answer_id": 167,
                  "document_id": 37,
                  "question_id": 165,
                  "text": "We can use a nested path at any level in a path, which is useful when combining\ntwo `use` statements that share a subpath.",
                  "answer_start": 11156,
                  "answer_end": 11278,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to bring all public items defined in a path into scope?",
              "id": 166,
              "answers": [
                {
                  "answer_id": 168,
                  "document_id": 37,
                  "question_id": 166,
                  "text": "If we want to bring *all* public items defined in a path into scope, we can\nspecify that path followed by the `*` glob operator:\n\n```rust\nuse std::collections::*;\n```",
                  "answer_start": 12245,
                  "answer_end": 12411,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What do I have to watch out for using glob operator?",
              "id": 167,
              "answers": [
                {
                  "answer_id": 169,
                  "document_id": 37,
                  "question_id": 167,
                  "text": "Be careful when using the glob operator! Glob can make it\nharder to tell what names are in scope and where a name used in your program\nwas defined.\n",
                  "answer_start": 12512,
                  "answer_end": 12660,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When is useful to use glob operator?",
              "id": 168,
              "answers": [
                {
                  "answer_id": 170,
                  "document_id": 37,
                  "question_id": 168,
                  "text": "The glob operator is often used when testing to bring everything under test\ninto the `tests` module; we’ll talk about that in the [“How to Write\nTests”][writing-tests]‹!-- ignore --> section in Chapter 11. The glob operator\nis also sometimes used as part of the prelude pattern",
                  "answer_start": 12661,
                  "answer_end": 12938,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## Bringing Paths into Scope with the `use` Keyword\n\nHaving to write out the paths to call functions can feel inconvenient and\nrepetitive. In Listing 7-7, whether we chose the absolute or relative path to\nthe `add_to_waitlist` function, every time we wanted to call `add_to_waitlist`\nwe had to specify `front_of_house` and `hosting` too. Fortunately, there’s a\nway to simplify this process: we can create a shortcut to a path with the `use`\nkeyword once, and then use the shorter name everywhere else in the scope.\n\nIn Listing 7-11, we bring the `crate::front_of_house::hosting` module into the\nscope of the `eat_at_restaurant` function so we only have to specify\n`hosting::add_to_waitlist` to call the `add_to_waitlist` function in\n`eat_at_restaurant`.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground,test_harness\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-11/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-11: Bringing a module into scope with\n`use`</span>\n\nAdding `use` and a path in a scope is similar to creating a symbolic link in\nthe filesystem. By adding `use crate::front_of_house::hosting` in the crate\nroot, `hosting` is now a valid name in that scope, just as though the `hosting`\nmodule had been defined in the crate root. Paths brought into scope with `use`\nalso check privacy, like any other paths.\n\nNote that `use` only creates the shortcut for the particular scope in which the\n`use` occurs. Listing 7-12 moves the `eat_at_restaurant` function into a new\nchild module named `customer`, which is then a different scope than the `use`\nstatement, so the function body won’t compile:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground,test_harness,does_not_compile,ignore\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-12/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-12: A `use` statement only applies in the scope\nit’s in</span>\n\nThe compiler error shows that the shortcut no longer applies within the\n`customer` module:\n\n```console\n{{#include ../listings/ch07-managing-growing-projects/listing-07-12/output.txt}}\n```\n\nNotice there’s also a warning that the `use` is no longer used in its scope! To\nfix this problem, move the `use` within the `customer` module too, or reference\nthe shortcut in the parent module with `super::hosting` within the child\n`customer` module.\n\n### Creating Idiomatic `use` Paths\n\nIn Listing 7-11, you might have wondered why we specified `use\ncrate::front_of_house::hosting` and then called `hosting::add_to_waitlist` in\n`eat_at_restaurant` rather than specifying the `use` path all the way out to\nthe `add_to_waitlist` function to achieve the same result, as in Listing 7-13.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground,test_harness\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-13/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-13: Bringing the `add_to_waitlist` function\ninto scope with `use`, which is unidiomatic</span>\n\nAlthough both Listing 7-11 and 7-13 accomplish the same task, Listing 7-11 is\nthe idiomatic way to bring a function into scope with `use`. Bringing the\nfunction’s parent module into scope with `use` means we have to specify the\nparent module when calling the function. Specifying the parent module when\ncalling the function makes it clear that the function isn’t locally defined\nwhile still minimizing repetition of the full path. The code in Listing 7-13 is\nunclear as to where `add_to_waitlist` is defined.\n\nOn the other hand, when bringing in structs, enums, and other items with `use`,\nit’s idiomatic to specify the full path. Listing 7-14 shows the idiomatic way\nto bring the standard library’s `HashMap` struct into the scope of a binary\ncrate.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-14/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 7-14: Bringing `HashMap` into scope in an\nidiomatic way</span>\n\nThere’s no strong reason behind this idiom: it’s just the convention that has\nemerged, and folks have gotten used to reading and writing Rust code this way.\n\nThe exception to this idiom is if we’re bringing two items with the same name\ninto scope with `use` statements, because Rust doesn’t allow that. Listing 7-15\nshows how to bring two `Result` types into scope that have the same name but\ndifferent parent modules and how to refer to them.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-15/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 7-15: Bringing two types with the same name into\nthe same scope requires using their parent modules.</span>\n\nAs you can see, using the parent modules distinguishes the two `Result` types.\nIf instead we specified `use std::fmt::Result` and `use std::io::Result`, we’d\nhave two `Result` types in the same scope and Rust wouldn’t know which one we\nmeant when we used `Result`.\n\n### Providing New Names with the `as` Keyword\n\nThere’s another solution to the problem of bringing two types of the same name\ninto the same scope with `use`: after the path, we can specify `as` and a new\nlocal name, or *alias*, for the type. Listing 7-16 shows another way to write\nthe code in Listing 7-15 by renaming one of the two `Result` types using `as`.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-16/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 7-16: Renaming a type when it’s brought into\nscope with the `as` keyword</span>\n\nIn the second `use` statement, we chose the new name `IoResult` for the\n`std::io::Result` type, which won’t conflict with the `Result` from `std::fmt`\nthat we’ve also brought into scope. Listing 7-15 and Listing 7-16 are\nconsidered idiomatic, so the choice is up to you!\n\n### Re-exporting Names with `pub use`\n\nWhen we bring a name into scope with the `use` keyword, the name available in\nthe new scope is private. To enable the code that calls our code to refer to\nthat name as if it had been defined in that code’s scope, we can combine `pub`\nand `use`. This technique is called *re-exporting* because we’re bringing\nan item into scope but also making that item available for others to bring into\ntheir scope.\n\nListing 7-17 shows the code in Listing 7-11 with `use` in the root module\nchanged to `pub use`.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground,test_harness\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-17/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-17: Making a name available for any code to use\nfrom a new scope with `pub use`</span>\n\nBefore this change, external code would have to call the `add_to_waitlist`\nfunction by using the path\n`restaurant::front_of_house::hosting::add_to_waitlist()`. Now that this `pub\nuse` has re-exported the `hosting` module from the root module, external code\ncan now use the path `restaurant::hosting::add_to_waitlist()` instead.\n\nRe-exporting is useful when the internal structure of your code is different\nfrom how programmers calling your code would think about the domain. For\nexample, in this restaurant metaphor, the people running the restaurant think\nabout “front of house” and “back of house.” But customers visiting a restaurant\nprobably won’t think about the parts of the restaurant in those terms. With\n`pub use`, we can write our code with one structure but expose a different\nstructure. Doing so makes our library well organized for programmers working on\nthe library and programmers calling the library. We’ll look at another example\nof `pub use` and how it affects your crate’s documentation in the [“Exporting a\nConvenient Public API with `pub use`”][ch14-pub-use]<!-- ignore --> section of\nChapter 14.\n\n### Using External Packages\n\nIn Chapter 2, we programmed a guessing game project that used an external\npackage called `rand` to get random numbers. To use `rand` in our project, we\nadded this line to *Cargo.toml*:\n\n<!-- When updating the version of `rand` used, also update the version of\n`rand` used in these files so they all match:\n* ch02-00-guessing-game-tutorial.md\n* ch14-03-cargo-workspaces.md\n-->\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n{{#include ../listings/ch02-guessing-game-tutorial/listing-02-02/Cargo.toml:9:}}\n```\n\nAdding `rand` as a dependency in *Cargo.toml* tells Cargo to download the\n`rand` package and any dependencies from [crates.io](https://crates.io/) and\nmake `rand` available to our project.\n\nThen, to bring `rand` definitions into the scope of our package, we added a\n`use` line starting with the name of the crate, `rand`, and listed the items\nwe wanted to bring into scope. Recall that in the [“Generating a Random\nNumber”][rand]<!-- ignore --> section in Chapter 2, we brought the `Rng` trait\ninto scope and called the `rand::thread_rng` function:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-03/src/main.rs:ch07-04}}\n```\n\nMembers of the Rust community have made many packages available at\n[crates.io](https://crates.io/), and pulling any of them into your package\ninvolves these same steps: listing them in your package’s *Cargo.toml* file and\nusing `use` to bring items from their crates into scope.\n\nNote that the standard `std` library is also a crate that’s external to our\npackage. Because the standard library is shipped with the Rust language, we\ndon’t need to change *Cargo.toml* to include `std`. But we do need to refer to\nit with `use` to bring items from there into our package’s scope. For example,\nwith `HashMap` we would use this line:\n\n```rust\nuse std::collections::HashMap;\n```\n\nThis is an absolute path starting with `std`, the name of the standard library\ncrate.\n\n### Using Nested Paths to Clean Up Large `use` Lists\n\nIf we’re using multiple items defined in the same crate or same module,\nlisting each item on its own line can take up a lot of vertical space in our\nfiles. For example, these two `use` statements we had in the Guessing Game in\nListing 2-4 bring items from `std` into scope:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/no-listing-01-use-std-unnested/src/main.rs:here}}\n```\n\nInstead, we can use nested paths to bring the same items into scope in one\nline. We do this by specifying the common part of the path, followed by two\ncolons, and then curly brackets around a list of the parts of the paths that\ndiffer, as shown in Listing 7-18.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-18/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 7-18: Specifying a nested path to bring multiple\nitems with the same prefix into scope</span>\n\nIn bigger programs, bringing many items into scope from the same crate or\nmodule using nested paths can reduce the number of separate `use` statements\nneeded by a lot!\n\nWe can use a nested path at any level in a path, which is useful when combining\ntwo `use` statements that share a subpath. For example, Listing 7-19 shows two\n`use` statements: one that brings `std::io` into scope and one that brings\n`std::io::Write` into scope.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-19/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-19: Two `use` statements where one is a subpath\nof the other</span>\n\nThe common part of these two paths is `std::io`, and that’s the complete first\npath. To merge these two paths into one `use` statement, we can use `self` in\nthe nested path, as shown in Listing 7-20.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-20/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-20: Combining the paths in Listing 7-19 into\none `use` statement</span>\n\nThis line brings `std::io` and `std::io::Write` into scope.\n\n### The Glob Operator\n\nIf we want to bring *all* public items defined in a path into scope, we can\nspecify that path followed by the `*` glob operator:\n\n```rust\nuse std::collections::*;\n```\n\nThis `use` statement brings all public items defined in `std::collections` into\nthe current scope. Be careful when using the glob operator! Glob can make it\nharder to tell what names are in scope and where a name used in your program\nwas defined.\n\nThe glob operator is often used when testing to bring everything under test\ninto the `tests` module; we’ll talk about that in the [“How to Write\nTests”][writing-tests]<!-- ignore --> section in Chapter 11. The glob operator\nis also sometimes used as part of the prelude pattern: see [the standard\nlibrary documentation](../std/prelude/index.html#other-preludes)<!-- ignore -->\nfor more information on that pattern.\n\n[ch14-pub-use]: ch14-02-publishing-to-crates-io.html#exporting-a-convenient-public-api-with-pub-use\n[rand]: ch02-00-guessing-game-tutorial.html#generating-a-random-number\n[writing-tests]: ch11-01-writing-tests.html#how-to-write-tests\n",
          "document_id": 37
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "How can I make easier to navigate the code, when the code becomes large?",
              "id": 169,
              "answers": [
                {
                  "answer_id": 171,
                  "document_id": 38,
                  "question_id": 169,
                  "text": "When modules get large, you might want to move their definitions to a separate\nfile to make the code easier to navigate.",
                  "answer_start": 123,
                  "answer_end": 243,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How many times I should load a file using a `mod` declaration in my module tree?",
              "id": 170,
              "answers": [
                {
                  "answer_id": 172,
                  "document_id": 38,
                  "question_id": 170,
                  "text": "Note that you only need to load a file using a `mod` declaration *once* in your\nmodule tree.",
                  "answer_start": 1812,
                  "answer_end": 1904,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why I only need to load a file using a `mod` declaration *once* in my module tree?",
              "id": 171,
              "answers": [
                {
                  "answer_id": 173,
                  "document_id": 38,
                  "question_id": 171,
                  "text": "Note that you only need to load a file using a `mod` declaration *once* in your\nmodule tree. Once the compiler knows the file is part of the project (and knows\nwhere in the module tree the code resides because of where you’ve put the `mod`\nstatement), other files in your project should refer to the loaded file’s code\nusing a path to where it was declared",
                  "answer_start": 1812,
                  "answer_end": 2168,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Does rust support older style of file paths?",
              "id": 172,
              "answers": [
                {
                  "answer_id": 174,
                  "document_id": 38,
                  "question_id": 172,
                  "text": "> So far we’ve covered the most idiomatic file paths the Rust compiler uses,\n> but Rust also supports an older style of file path.",
                  "answer_start": 3757,
                  "answer_end": 3887,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can I use both styles in the same module?",
              "id": 173,
              "answers": [
                {
                  "answer_id": 175,
                  "document_id": 38,
                  "question_id": 173,
                  "text": "> If you use both styles for the same module, you’ll get a compiler error.",
                  "answer_start": 4380,
                  "answer_end": 4454,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can I use both styles for different modules?",
              "id": 174,
              "answers": [
                {
                  "answer_id": 176,
                  "document_id": 38,
                  "question_id": 174,
                  "text": "Using\n> a mix of both styles for different modules in the same project is allowed, but\n> might be confusing for people navigating your project.\n>",
                  "answer_start": 4455,
                  "answer_end": 4600,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the disadvantage of using the style using \"mod.rs\"?",
              "id": 175,
              "answers": [
                {
                  "answer_id": 177,
                  "document_id": 38,
                  "question_id": 175,
                  "text": "> The main downside to the style that uses files named *mod.rs* is that your\n> project can end up with many files named *mod.rs*, which can get confusing\n> when you have them open in your editor at the same time.\n",
                  "answer_start": 4601,
                  "answer_end": 4814,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## Separating Modules into Different Files\n\nSo far, all the examples in this chapter defined multiple modules in one file.\nWhen modules get large, you might want to move their definitions to a separate\nfile to make the code easier to navigate.\n\nFor example, let’s start from the code in Listing 7-17 that had multiple\nrestaurant modules. We’ll extract modules into files instead of having all the\nmodules defined in the crate root file. In this case, the crate root file is\n*src/lib.rs*, but this procedure also works with binary crates whose crate root\nfile is *src/main.rs*.\n\nFirst, we’ll extract the `front_of_house` module to its own file. Remove the\ncode inside the curly brackets for the `front_of_house` module, leaving only\nthe `mod front_of_house;` declaration, so that *src/lib.rs* contains the code\nshown in Listing 7-21. Note that this won’t compile until we create the\n*src/front_of_house.rs* file in Listing 7-22.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-21-and-22/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-21: Declaring the `front_of_house` module whose\nbody will be in *src/front_of_house.rs*</span>\n\nNext, place the code that was in the curly brackets into a new file named\n*src/front_of_house.rs*, as shown in Listing 7-22. The compiler knows to look\nin this file because it came across the module declaration in the crate root\nwith the name `front_of_house`.\n\n<span class=\"filename\">Filename: src/front_of_house.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-21-and-22/src/front_of_house.rs}}\n```\n\n<span class=\"caption\">Listing 7-22: Definitions inside the `front_of_house`\nmodule in *src/front_of_house.rs*</span>\n\nNote that you only need to load a file using a `mod` declaration *once* in your\nmodule tree. Once the compiler knows the file is part of the project (and knows\nwhere in the module tree the code resides because of where you’ve put the `mod`\nstatement), other files in your project should refer to the loaded file’s code\nusing a path to where it was declared, as covered in the [“Paths for Referring\nto an Item in the Module Tree”][paths]<!-- ignore --> section. In other words,\n`mod` is *not* an “include” operation that you may have seen in other\nprogramming languages.\n\nNext, we’ll extract the `hosting` module to its own file. The process is a bit\ndifferent because `hosting` is a child module of `front_of_house`, not of the\nroot module. We’ll place the file for `hosting` in a new directory that will be\nnamed for its ancestors in the module tree, in this case *src/front_of_house/*.\n\nTo start moving `hosting`, we change *src/front_of_house.rs* to contain only the\ndeclaration of the `hosting` module:\n\n<span class=\"filename\">Filename: src/front_of_house.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/no-listing-02-extracting-hosting/src/front_of_house.rs}}\n```\n\nThen we create a *src/front_of_house* directory and a file *hosting.rs* to\ncontain the definitions made in the `hosting` module:\n\n<span class=\"filename\">Filename: src/front_of_house/hosting.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/no-listing-02-extracting-hosting/src/front_of_house/hosting.rs}}\n```\n\nIf we instead put *hosting.rs* in the *src* directory, the compiler would\nexpect the *hosting.rs* code to be in a `hosting` module declared in the crate\nroot, and not declared as a child of the `front_of_house` module. The\ncompiler’s rules for which files to check for which modules’ code means the\ndirectories and files more closely match the module tree.\n\n> ### Alternate File Paths\n>\n> So far we’ve covered the most idiomatic file paths the Rust compiler uses,\n> but Rust also supports an older style of file path. For a module named\n> `front_of_house` declared in the crate root, the compiler will look for the\n> module’s code in:\n>\n> * *src/front_of_house.rs* (what we covered)\n> * *src/front_of_house/mod.rs* (older style, still supported path)\n>\n> For a module named `hosting` that is a submodule of `front_of_house`, the\n> compiler will look for the module’s code in:\n>\n> * *src/front_of_house/hosting.rs* (what we covered)\n> * *src/front_of_house/hosting/mod.rs* (older style, still supported path)\n>\n> If you use both styles for the same module, you’ll get a compiler error. Using\n> a mix of both styles for different modules in the same project is allowed, but\n> might be confusing for people navigating your project.\n>\n> The main downside to the style that uses files named *mod.rs* is that your\n> project can end up with many files named *mod.rs*, which can get confusing\n> when you have them open in your editor at the same time.\n\nWe’ve moved each module’s code to a separate file, and the module tree remains\nthe same. The function calls in `eat_at_restaurant` will work without any\nmodification, even though the definitions live in different files. This\ntechnique lets you move modules to new files as they grow in size.\n\nNote that the `pub use crate::front_of_house::hosting` statement in\n*src/lib.rs* also hasn’t changed, nor does `use` have any impact on what files\nare compiled as part of the crate. The `mod` keyword declares modules, and Rust\nlooks in a file with the same name as the module for the code that goes into\nthat module.\n\n## Summary\n\nRust lets you split a package into multiple crates and a crate into modules\nso you can refer to items defined in one module from another module. You can do\nthis by specifying absolute or relative paths. These paths can be brought into\nscope with a `use` statement so you can use a shorter path for multiple uses of\nthe item in that scope. Module code is private by default, but you can make\ndefinitions public by adding the `pub` keyword.\n\nIn the next chapter, we’ll look at some collection data structures in the\nstandard library that you can use in your neatly organized code.\n\n[paths]: ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\n",
          "document_id": 38
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "Can collections contain single or multiple values?",
              "id": 176,
              "answers": [
                {
                  "answer_id": 178,
                  "document_id": 39,
                  "question_id": 176,
                  "text": "Most other data types represent one specific value, but\ncollections can contain multiple values.",
                  "answer_start": 117,
                  "answer_end": 213,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How do collections work?",
              "id": 177,
              "answers": [
                {
                  "answer_id": 179,
                  "document_id": 39,
                  "question_id": 177,
                  "text": "Most other data types represent one specific value, but\ncollections can contain multiple values. Unlike the built-in array and tuple\ntypes, the data these collections point to is stored on the heap, which means\nthe amount of data does not need to be known at compile time and can grow or\nshrink as the program runs. Each kind of collection has different capabilities\nand costs, and choosing an appropriate one for your current situation is a\nskill you’ll develop over time.",
                  "answer_start": 117,
                  "answer_end": 590,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does vector let me?",
              "id": 178,
              "answers": [
                {
                  "answer_id": 180,
                  "document_id": 39,
                  "question_id": 178,
                  "text": "* A *vector* allows you to store a variable number of values next to each other.",
                  "answer_start": 684,
                  "answer_end": 764,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "String is a collection of what?",
              "id": 179,
              "answers": [
                {
                  "answer_id": 181,
                  "document_id": 39,
                  "question_id": 179,
                  "text": "* A *string* is a collection of characters. We’ve mentioned the `String` type\n  previously, but in this chapter we’ll talk about it in depth.",
                  "answer_start": 765,
                  "answer_end": 906,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is a hashmap?",
              "id": 180,
              "answers": [
                {
                  "answer_id": 182,
                  "document_id": 39,
                  "question_id": 180,
                  "text": "* A *hash map* allows you to associate a value with a particular key. It’s a\n  particular implementation of the more general data structure called a *map*.",
                  "answer_start": 907,
                  "answer_end": 1062,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "# Common Collections\n\nRust’s standard library includes a number of very useful data structures called\n*collections*. Most other data types represent one specific value, but\ncollections can contain multiple values. Unlike the built-in array and tuple\ntypes, the data these collections point to is stored on the heap, which means\nthe amount of data does not need to be known at compile time and can grow or\nshrink as the program runs. Each kind of collection has different capabilities\nand costs, and choosing an appropriate one for your current situation is a\nskill you’ll develop over time. In this chapter, we’ll discuss three\ncollections that are used very often in Rust programs:\n\n* A *vector* allows you to store a variable number of values next to each other.\n* A *string* is a collection of characters. We’ve mentioned the `String` type\n  previously, but in this chapter we’ll talk about it in depth.\n* A *hash map* allows you to associate a value with a particular key. It’s a\n  particular implementation of the more general data structure called a *map*.\n\nTo learn about the other kinds of collections provided by the standard library,\nsee [the documentation][collections].\n\nWe’ll discuss how to create and update vectors, strings, and hash maps, as well\nas what makes each special.\n\n[collections]: ../std/collections/index.html\n",
          "document_id": 39
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "What can vector do?",
              "id": 181,
              "answers": [
                {
                  "answer_id": 183,
                  "document_id": 40,
                  "question_id": 181,
                  "text": "Vectors allow you to store more than one value in a single data structure that\nputs all the values next to each other in memory. Vectors can only store values\nof the same type.",
                  "answer_start": 120,
                  "answer_end": 296,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When are vectors useful?",
              "id": 182,
              "answers": [
                {
                  "answer_id": 184,
                  "document_id": 40,
                  "question_id": 182,
                  "text": "Vectors can only store values\nof the same type. They are useful when you have a list of items, such as the\nlines of text in a file or the prices of items in a shopping cart.\n",
                  "answer_start": 249,
                  "answer_end": 423,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to create an empty vector?",
              "id": 183,
              "answers": [
                {
                  "answer_id": 185,
                  "document_id": 40,
                  "question_id": 183,
                  "text": "To create a new empty vector, we call the `Vec::new` function, as shown in",
                  "answer_start": 451,
                  "answer_end": 525,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How are vectors implemented?",
              "id": 184,
              "answers": [
                {
                  "answer_id": 186,
                  "document_id": 40,
                  "question_id": 184,
                  "text": "Vectors are implemented using generics;",
                  "answer_start": 930,
                  "answer_end": 969,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which type can `Vec‹T>` hold?",
              "id": 185,
              "answers": [
                {
                  "answer_id": 187,
                  "document_id": 40,
                  "question_id": 185,
                  "text": "`Vec‹T>` type provided by the standard library can hold any type.\nWhen we create a vector to hold a specific type, we can specify the type within\nangle brackets.",
                  "answer_start": 1060,
                  "answer_end": 1221,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What do \"vec!\" macro?",
              "id": 186,
              "answers": [
                {
                  "answer_id": 188,
                  "document_id": 40,
                  "question_id": 186,
                  "text": " Rust conveniently provides the `vec!` macro, which will create a\nnew vector that holds the values you give it.",
                  "answer_start": 1478,
                  "answer_end": 1589,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to add elements to vector?",
              "id": 187,
              "answers": [
                {
                  "answer_id": 189,
                  "document_id": 40,
                  "question_id": 187,
                  "text": "To create a vector and then add elements to it, we can use the `push` method,",
                  "answer_start": 2209,
                  "answer_end": 2286,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which keyword is useful if I want to change value inside vector?",
              "id": 188,
              "answers": [
                {
                  "answer_id": 190,
                  "document_id": 40,
                  "question_id": 188,
                  "text": "As with any variable, if we want to be able to change its value, we need to\nmake it mutable using the `mut` keyword",
                  "answer_start": 2507,
                  "answer_end": 2622,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the methods to reference the values of the vector?",
              "id": 189,
              "answers": [
                {
                  "answer_id": 191,
                  "document_id": 40,
                  "question_id": 189,
                  "text": "There are two ways to reference a value stored in a vector: via indexing or\nusing the `get` method. In the following examples",
                  "answer_start": 2816,
                  "answer_end": 2941,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why Rust use two techniques to reference the element of vector?",
              "id": 190,
              "answers": [
                {
                  "answer_id": 192,
                  "document_id": 40,
                  "question_id": 190,
                  "text": "The reason Rust provides these two ways to reference an element is so you can\nchoose how the program behaves when you try to use an index value outside the\nrange of existing elements. As an example, let’s see what happens when we have\na vector of five elements",
                  "answer_start": 3700,
                  "answer_end": 3960,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What will happen if I pass an index outside the vector to the `get` method?",
              "id": 191,
              "answers": [
                {
                  "answer_id": 193,
                  "document_id": 40,
                  "question_id": 191,
                  "text": "When the `get` method is passed an index that is outside the vector, it returns\n`None` without panicking.",
                  "answer_start": 4560,
                  "answer_end": 4665,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to access each element in a vector?",
              "id": 192,
              "answers": [
                {
                  "answer_id": 194,
                  "document_id": 40,
                  "question_id": 192,
                  "text": "To access each element in a vector in turn, we would iterate through all of the\nelements rather than use indices to access one at a time.",
                  "answer_start": 6994,
                  "answer_end": 7131,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to change the value that the mutable reference refers to?",
              "id": 193,
              "answers": [
                {
                  "answer_id": 195,
                  "document_id": 40,
                  "question_id": 193,
                  "text": "To change the value that the mutable reference refers to, we have to use the\n`*` dereference operator to get to the value in `i` before we can use the `+=`\noperator.",
                  "answer_start": 7881,
                  "answer_end": 8046,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why iterating over a vector, whether immutably or mutably, is safe?",
              "id": 194,
              "answers": [
                {
                  "answer_id": 196,
                  "document_id": 40,
                  "question_id": 194,
                  "text": "Iterating over a vector, whether immutably or mutably, is safe because of the\nborrow checker's rules. If we attempted to insert or remove items in the `for`\nloop bodies in Listing 8-7 and Listing 8-8, we would get a compiler error\nsimilar to the one we got with the code in Listing 8-6. The reference to the\nvector that the `for` loop holds prevents simultaneous modification of the\nwhole vector.\n",
                  "answer_start": 8216,
                  "answer_end": 8613,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can vectors store values with different types?",
              "id": 195,
              "answers": [
                {
                  "answer_id": 197,
                  "document_id": 40,
                  "question_id": 195,
                  "text": "Vectors can only store values that are the same type. ",
                  "answer_start": 8657,
                  "answer_end": 8711,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What if I want to use different data types in one vector?",
              "id": 196,
              "answers": [
                {
                  "answer_id": 198,
                  "document_id": 40,
                  "question_id": 196,
                  "text": "Vectors can only store values that are the same type. This can be inconvenient;\nthere are definitely use cases for needing to store a list of items of\ndifferent types. Fortunately, the variants of an enum are defined under the\nsame enum type, so when we need one type to represent elements of different\ntypes, we can define and use an enum!",
                  "answer_start": 8657,
                  "answer_end": 8997,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which element returns/remove pop method?",
              "id": 197,
              "answers": [
                {
                  "answer_id": 199,
                  "document_id": 40,
                  "question_id": 197,
                  "text": "For example, in\naddition to `push`, a `pop` method removes and returns the last element.",
                  "answer_start": 10628,
                  "answer_end": 10716,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What happens after vector gets dropped?",
              "id": 198,
              "answers": [
                {
                  "answer_id": 200,
                  "document_id": 40,
                  "question_id": 198,
                  "text": "When the vector gets dropped, all of its contents are also dropped, meaning the\nintegers it holds will be cleaned up. The borrow checker ensures that any\nreferences to contents of a vector are only used while the vector itself is\nvalid.",
                  "answer_start": 11060,
                  "answer_end": 11296,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## Storing Lists of Values with Vectors\n\nThe first collection type we’ll look at is `Vec<T>`, also known as a *vector*.\nVectors allow you to store more than one value in a single data structure that\nputs all the values next to each other in memory. Vectors can only store values\nof the same type. They are useful when you have a list of items, such as the\nlines of text in a file or the prices of items in a shopping cart.\n\n### Creating a New Vector\n\nTo create a new empty vector, we call the `Vec::new` function, as shown in\nListing 8-1.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-01/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-1: Creating a new, empty vector to hold values\nof type `i32`</span>\n\nNote that we added a type annotation here. Because we aren’t inserting any\nvalues into this vector, Rust doesn’t know what kind of elements we intend to\nstore. This is an important point. Vectors are implemented using generics;\nwe’ll cover how to use generics with your own types in Chapter 10. For now,\nknow that the `Vec<T>` type provided by the standard library can hold any type.\nWhen we create a vector to hold a specific type, we can specify the type within\nangle brackets. In Listing 8-1, we’ve told Rust that the `Vec<T>` in `v` will\nhold elements of the `i32` type.\n\nMore often, you’ll create a `Vec<T>` with initial values and Rust will infer\nthe type of value you want to store, so you rarely need to do this type\nannotation. Rust conveniently provides the `vec!` macro, which will create a\nnew vector that holds the values you give it. Listing 8-2 creates a new\n`Vec<i32>` that holds the values `1`, `2`, and `3`. The integer type is `i32`\nbecause that’s the default integer type, as we discussed in the [“Data\nTypes”][data-types]<!-- ignore --> section of Chapter 3.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-02/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-2: Creating a new vector containing\nvalues</span>\n\nBecause we’ve given initial `i32` values, Rust can infer that the type of `v`\nis `Vec<i32>`, and the type annotation isn’t necessary. Next, we’ll look at how\nto modify a vector.\n\n### Updating a Vector\n\nTo create a vector and then add elements to it, we can use the `push` method,\nas shown in Listing 8-3.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-03/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-3: Using the `push` method to add values to a\nvector</span>\n\nAs with any variable, if we want to be able to change its value, we need to\nmake it mutable using the `mut` keyword, as discussed in Chapter 3. The numbers\nwe place inside are all of type `i32`, and Rust infers this from the data, so\nwe don’t need the `Vec<i32>` annotation.\n\n### Reading Elements of Vectors\n\nThere are two ways to reference a value stored in a vector: via indexing or\nusing the `get` method. In the following examples, we’ve annotated the types of\nthe values that are returned from these functions for extra clarity.\n\nListing 8-4 shows both methods of accessing a value in a vector, with indexing\nsyntax and the `get` method.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-04/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-4: Using indexing syntax or the `get` method to\naccess an item in a vector</span>\n\nNote a few details here. We use the index value of `2` to get the third element\nbecause vectors are indexed by number, starting at zero. Using `&` and `[]`\ngives us a reference to the element at the index value. When we use the `get`\nmethod with the index passed as an argument, we get an `Option<&T>` that we can\nuse with `match`.\n\nThe reason Rust provides these two ways to reference an element is so you can\nchoose how the program behaves when you try to use an index value outside the\nrange of existing elements. As an example, let’s see what happens when we have\na vector of five elements and then we try to access an element at index 100\nwith each technique, as shown in Listing 8-5.\n\n```rust,should_panic,panics\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-05/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-5: Attempting to access the element at index\n100 in a vector containing five elements</span>\n\nWhen we run this code, the first `[]` method will cause the program to panic\nbecause it references a nonexistent element. This method is best used when you\nwant your program to crash if there’s an attempt to access an element past the\nend of the vector.\n\nWhen the `get` method is passed an index that is outside the vector, it returns\n`None` without panicking. You would use this method if accessing an element\nbeyond the range of the vector may happen occasionally under normal\ncircumstances. Your code will then have logic to handle having either\n`Some(&element)` or `None`, as discussed in Chapter 6. For example, the index\ncould be coming from a person entering a number. If they accidentally enter a\nnumber that’s too large and the program gets a `None` value, you could tell the\nuser how many items are in the current vector and give them another chance to\nenter a valid value. That would be more user-friendly than crashing the program\ndue to a typo!\n\nWhen the program has a valid reference, the borrow checker enforces the\nownership and borrowing rules (covered in Chapter 4) to ensure this reference\nand any other references to the contents of the vector remain valid. Recall the\nrule that states you can’t have mutable and immutable references in the same\nscope. That rule applies in Listing 8-6, where we hold an immutable reference\nto the first element in a vector and try to add an element to the end. This\nprogram won’t work if we also try to refer to that element later in the\nfunction:\n\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-06/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-6: Attempting to add an element to a vector\nwhile holding a reference to an item</span>\n\nCompiling this code will result in this error:\n\n\n```console\n{{#include ../listings/ch08-common-collections/listing-08-06/output.txt}}\n```\n\nThe code in Listing 8-6 might look like it should work: why should a reference\nto the first element care about changes at the end of the vector? This error is\ndue to the way vectors work: because vectors put the values next to each other\nin memory, adding a new element onto the end of the vector might require\nallocating new memory and copying the old elements to the new space, if there\nisn’t enough room to put all the elements next to each other where the vector\nis currently stored. In that case, the reference to the first element would be\npointing to deallocated memory. The borrowing rules prevent programs from\nending up in that situation.\n\n> Note: For more on the implementation details of the `Vec<T>` type, see [“The\n> Rustonomicon”][nomicon].\n\n### Iterating over the Values in a Vector\n\nTo access each element in a vector in turn, we would iterate through all of the\nelements rather than use indices to access one at a time. Listing 8-7 shows how\nto use a `for` loop to get immutable references to each element in a vector of\n`i32` values and print them.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-07/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-7: Printing each element in a vector by\niterating over the elements using a `for` loop</span>\n\nWe can also iterate over mutable references to each element in a mutable vector\nin order to make changes to all the elements. The `for` loop in Listing 8-8\nwill add `50` to each element.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-08/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-8: Iterating over mutable references to\nelements in a vector</span>\n\nTo change the value that the mutable reference refers to, we have to use the\n`*` dereference operator to get to the value in `i` before we can use the `+=`\noperator. We’ll talk more about the dereference operator in the [“Following the\nPointer to the Value with the Dereference Operator”][deref]<!-- ignore -->\nsection of Chapter 15.\n\nIterating over a vector, whether immutably or mutably, is safe because of the\nborrow checker's rules. If we attempted to insert or remove items in the `for`\nloop bodies in Listing 8-7 and Listing 8-8, we would get a compiler error\nsimilar to the one we got with the code in Listing 8-6. The reference to the\nvector that the `for` loop holds prevents simultaneous modification of the\nwhole vector.\n\n### Using an Enum to Store Multiple Types\n\nVectors can only store values that are the same type. This can be inconvenient;\nthere are definitely use cases for needing to store a list of items of\ndifferent types. Fortunately, the variants of an enum are defined under the\nsame enum type, so when we need one type to represent elements of different\ntypes, we can define and use an enum!\n\nFor example, say we want to get values from a row in a spreadsheet in which\nsome of the columns in the row contain integers, some floating-point numbers,\nand some strings. We can define an enum whose variants will hold the different\nvalue types, and all the enum variants will be considered the same type: that\nof the enum. Then we can create a vector to hold that enum and so, ultimately,\nholds different types. We’ve demonstrated this in Listing 8-9.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-09/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-9: Defining an `enum` to store values of\ndifferent types in one vector</span>\n\nRust needs to know what types will be in the vector at compile time so it knows\nexactly how much memory on the heap will be needed to store each element. We\nmust also be explicit about what types are allowed in this vector. If Rust\nallowed a vector to hold any type, there would be a chance that one or more of\nthe types would cause errors with the operations performed on the elements of\nthe vector. Using an enum plus a `match` expression means that Rust will ensure\nat compile time that every possible case is handled, as discussed in Chapter 6.\n\nIf you don’t know the exhaustive set of types a program will get at runtime to\nstore in a vector, the enum technique won’t work. Instead, you can use a trait\nobject, which we’ll cover in Chapter 17.\n\nNow that we’ve discussed some of the most common ways to use vectors, be sure\nto review [the API documentation][vec-api]<!-- ignore --> for all the many\nuseful methods defined on `Vec<T>` by the standard library. For example, in\naddition to `push`, a `pop` method removes and returns the last element.\n\n### Dropping a Vector Drops Its Elements\n\nLike any other `struct`, a vector is freed when it goes out of scope, as\nannotated in Listing 8-10.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-10/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-10: Showing where the vector and its elements\nare dropped</span>\n\nWhen the vector gets dropped, all of its contents are also dropped, meaning the\nintegers it holds will be cleaned up. The borrow checker ensures that any\nreferences to contents of a vector are only used while the vector itself is\nvalid.\n\nLet’s move on to the next collection type: `String`!\n\n[data-types]: ch03-02-data-types.html#data-types\n[nomicon]: ../nomicon/vec/vec.html\n[vec-api]: ../std/vec/struct.Vec.html\n[deref]: ch15-02-deref.html#following-the-pointer-to-the-value-with-the-dereference-operator\n",
          "document_id": 40
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "How are strings implemented?",
              "id": 199,
              "answers": [
                {
                  "answer_id": 201,
                  "document_id": 41,
                  "question_id": 199,
                  "text": "strings are\nimplemented as a collection of bytes, plus some methods",
                  "answer_start": 522,
                  "answer_end": 589,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the differences and similarities between strings and string slices?",
              "id": 200,
              "answers": [
                {
                  "answer_id": 202,
                  "document_id": 41,
                  "question_id": 200,
                  "text": "The `String` type, which is provided by Rust’s standard library rather than\ncoded into the core language, is a growable, mutable, owned, UTF-8 encoded\nstring type. When Rustaceans refer to “strings” in Rust, they might be\nreferring to either the `String` or the string slice `&str` types, not just one\nof those types. Although this section is largely about `String`, both types are\nused heavily in Rust’s standard library, and both `String` and string slices\nare UTF-8 encoded.",
                  "answer_start": 1444,
                  "answer_end": 1921,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why many of the same operations available with `Vec‹T>` are available with `String` as wellstrictions, and capabilities?",
              "id": 201,
              "answers": [
                {
                  "answer_id": 203,
                  "document_id": 41,
                  "question_id": 201,
                  "text": "Many of the same operations available with `Vec‹T>` are available with `String`\nas well, because `String` is actually implemented as a wrapper around a vector\nof bytes with some extra guarantees, restrictions, and capabilities.",
                  "answer_start": 1950,
                  "answer_end": 2177,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to create a string from a string literal?",
              "id": 202,
              "answers": [
                {
                  "answer_id": 204,
                  "document_id": 41,
                  "question_id": 202,
                  "text": "We can also use the function `String::from` to create a `String` from a string\nliteral.",
                  "answer_start": 3099,
                  "answer_end": 3186,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to compare`String::from` and `to_string`?",
              "id": 203,
              "answers": [
                {
                  "answer_id": 205,
                  "document_id": 41,
                  "question_id": 203,
                  "text": "`String::from` and\n`to_string` do the same thing, so which you choose is a matter of style and\nreadability.",
                  "answer_start": 3713,
                  "answer_end": 3820,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why I can include any properly encoded data in strings?",
              "id": 204,
              "answers": [
                {
                  "answer_id": 206,
                  "document_id": 41,
                  "question_id": 204,
                  "text": "strings are UTF-8 encoded, so we can include any properly encoded\ndata in them",
                  "answer_start": 3836,
                  "answer_end": 3914,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to append a string slice to string?",
              "id": 205,
              "answers": [
                {
                  "answer_id": 207,
                  "document_id": 41,
                  "question_id": 205,
                  "text": "We can grow a `String` by using the `push_str` method to append a string slice,",
                  "answer_start": 4496,
                  "answer_end": 4575,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to combine two strings?",
              "id": 206,
              "answers": [
                {
                  "answer_id": 208,
                  "document_id": 41,
                  "question_id": 206,
                  "text": "Often, you’ll want to combine two existing strings. One way to do so is to use\nthe `+` operator",
                  "answer_start": 5909,
                  "answer_end": 6004,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Is it useful to use '+' operator to combine multiple strings?",
              "id": 207,
              "answers": [
                {
                  "answer_id": 209,
                  "document_id": 41,
                  "question_id": 207,
                  "text": "If we need to concatenate multiple strings, the behavior of the `+` operator\ngets unwieldy:",
                  "answer_start": 8311,
                  "answer_end": 8402,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "For complex string combining what I can use insted of \"+\"?",
              "id": 208,
              "answers": [
                {
                  "answer_id": 210,
                  "document_id": 41,
                  "question_id": 208,
                  "text": "With all of the `+` and `\"`\ncharacters, it’s difficult to see what’s going on. For more complicated string\ncombining, we can instead use the `format!` macro:\n",
                  "answer_start": 8571,
                  "answer_end": 8729,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the advantages of 'format!' macro?",
              "id": 209,
              "answers": [
                {
                  "answer_id": 211,
                  "document_id": 41,
                  "question_id": 209,
                  "text": "The version of the code using `format!` is much\neasier to read, and the code generated by the `format!` macro uses references\nso that this call doesn’t take ownership of any of its parameters.",
                  "answer_start": 9014,
                  "answer_end": 9206,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What will happen if I will try to access parts of string using index?",
              "id": 210,
              "answers": [
                {
                  "answer_id": 212,
                  "document_id": 41,
                  "question_id": 210,
                  "text": "if you try to access parts of a `String` using indexing syntax in Rust, you’ll\nget an error.",
                  "answer_start": 9387,
                  "answer_end": 9479,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Do rust strings support indexing?",
              "id": 211,
              "answers": [
                {
                  "answer_id": 213,
                  "document_id": 41,
                  "question_id": 211,
                  "text": "Rust strings don’t support indexing.",
                  "answer_start": 9917,
                  "answer_end": 9953,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why Rust doesn’t allow us to index into a `String` to get a character?",
              "id": 212,
              "answers": [
                {
                  "answer_id": 214,
                  "document_id": 41,
                  "question_id": 212,
                  "text": "reason Rust doesn’t allow us to index into a `String` to get a\ncharacter is that indexing operations are expected to always take constant time\n(O(1)). But it isn’t possible to guarantee that performance with a `String`,\nbecause Rust would have to walk through the contents from the beginning to the\nindex to determine how many valid characters there were.",
                  "answer_start": 13259,
                  "answer_end": 13614,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why indexing into a string is not a good idea?",
              "id": 213,
              "answers": [
                {
                  "answer_id": 215,
                  "document_id": 41,
                  "question_id": 213,
                  "text": "Indexing into a string is often a bad idea because it’s not clear what the\nreturn type of the string-indexing operation should be: a byte value, a\ncharacter, a grapheme cluster, or a string slice.",
                  "answer_start": 13637,
                  "answer_end": 13833,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## Storing UTF-8 Encoded Text with Strings\n\nWe talked about strings in Chapter 4, but we’ll look at them in more depth now.\nNew Rustaceans commonly get stuck on strings for a combination of three\nreasons: Rust’s propensity for exposing possible errors, strings being a more\ncomplicated data structure than many programmers give them credit for, and\nUTF-8. These factors combine in a way that can seem difficult when you’re\ncoming from other programming languages.\n\nWe discuss strings in the context of collections because strings are\nimplemented as a collection of bytes, plus some methods to provide useful\nfunctionality when those bytes are interpreted as text. In this section, we’ll\ntalk about the operations on `String` that every collection type has, such as\ncreating, updating, and reading. We’ll also discuss the ways in which `String`\nis different from the other collections, namely how indexing into a `String` is\ncomplicated by the differences between how people and computers interpret\n`String` data.\n\n### What Is a String?\n\nWe’ll first define what we mean by the term *string*. Rust has only one string\ntype in the core language, which is the string slice `str` that is usually seen\nin its borrowed form `&str`. In Chapter 4, we talked about *string slices*,\nwhich are references to some UTF-8 encoded string data stored elsewhere. String\nliterals, for example, are stored in the program’s binary and are therefore\nstring slices.\n\nThe `String` type, which is provided by Rust’s standard library rather than\ncoded into the core language, is a growable, mutable, owned, UTF-8 encoded\nstring type. When Rustaceans refer to “strings” in Rust, they might be\nreferring to either the `String` or the string slice `&str` types, not just one\nof those types. Although this section is largely about `String`, both types are\nused heavily in Rust’s standard library, and both `String` and string slices\nare UTF-8 encoded.\n\n### Creating a New String\n\nMany of the same operations available with `Vec<T>` are available with `String`\nas well, because `String` is actually implemented as a wrapper around a vector\nof bytes with some extra guarantees, restrictions, and capabilities. An example\nof a function that works the same way with `Vec<T>` and `String` is the `new`\nfunction to create an instance, shown in Listing 8-11.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-11/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-11: Creating a new, empty `String`</span>\n\nThis line creates a new empty string called `s`, which we can then load data\ninto. Often, we’ll have some initial data that we want to start the string\nwith. For that, we use the `to_string` method, which is available on any type\nthat implements the `Display` trait, as string literals do. Listing 8-12 shows\ntwo examples.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-12/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-12: Using the `to_string` method to create a\n`String` from a string literal</span>\n\nThis code creates a string containing `initial contents`.\n\nWe can also use the function `String::from` to create a `String` from a string\nliteral. The code in Listing 8-13 is equivalent to the code from Listing 8-12\nthat uses `to_string`.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-13/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-13: Using the `String::from` function to create\na `String` from a string literal</span>\n\nBecause strings are used for so many things, we can use many different generic\nAPIs for strings, providing us with a lot of options. Some of them can seem\nredundant, but they all have their place! In this case, `String::from` and\n`to_string` do the same thing, so which you choose is a matter of style and\nreadability.\n\nRemember that strings are UTF-8 encoded, so we can include any properly encoded\ndata in them, as shown in Listing 8-14.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-14/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-14: Storing greetings in different languages in\nstrings</span>\n\nAll of these are valid `String` values.\n\n### Updating a String\n\nA `String` can grow in size and its contents can change, just like the contents\nof a `Vec<T>`, if you push more data into it. In addition, you can conveniently\nuse the `+` operator or the `format!` macro to concatenate `String` values.\n\n#### Appending to a String with `push_str` and `push`\n\nWe can grow a `String` by using the `push_str` method to append a string slice,\nas shown in Listing 8-15.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-15/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-15: Appending a string slice to a `String`\nusing the `push_str` method</span>\n\nAfter these two lines, `s` will contain `foobar`. The `push_str` method takes a\nstring slice because we don’t necessarily want to take ownership of the\nparameter. For example, in the code in Listing 8-16, we want to be able to use\n`s2` after appending its contents to `s1`.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-16/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-16: Using a string slice after appending its\ncontents to a `String`</span>\n\nIf the `push_str` method took ownership of `s2`, we wouldn’t be able to print\nits value on the last line. However, this code works as we’d expect!\n\nThe `push` method takes a single character as a parameter and adds it to the\n`String`. Listing 8-17 adds the letter “l” to a `String` using the `push`\nmethod.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-17/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-17: Adding one character to a `String` value\nusing `push`</span>\n\nAs a result, `s` will contain `lol`.\n\n#### Concatenation with the `+` Operator or the `format!` Macro\n\nOften, you’ll want to combine two existing strings. One way to do so is to use\nthe `+` operator, as shown in Listing 8-18.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-18/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-18: Using the `+` operator to combine two\n`String` values into a new `String` value</span>\n\nThe string `s3` will contain `Hello, world!`. The reason `s1` is no longer\nvalid after the addition, and the reason we used a reference to `s2`, has to do\nwith the signature of the method that’s called when we use the `+` operator.\nThe `+` operator uses the `add` method, whose signature looks something like\nthis:\n\n```rust,ignore\nfn add(self, s: &str) -> String {\n```\n\nIn the standard library, you'll see `add` defined using generics and associated\ntypes. Here, we’ve substituted in concrete types, which is what happens when we\ncall this method with `String` values. We’ll discuss generics in Chapter 10.\nThis signature gives us the clues we need to understand the tricky bits of the\n`+` operator.\n\nFirst, `s2` has an `&`, meaning that we’re adding a *reference* of the second\nstring to the first string. This is because of the `s` parameter in the `add`\nfunction: we can only add a `&str` to a `String`; we can’t add two `String`\nvalues together. But wait—the type of `&s2` is `&String`, not `&str`, as\nspecified in the second parameter to `add`. So why does Listing 8-18 compile?\n\nThe reason we’re able to use `&s2` in the call to `add` is that the compiler\ncan *coerce* the `&String` argument into a `&str`. When we call the `add`\nmethod, Rust uses a *deref coercion*, which here turns `&s2` into `&s2[..]`.\nWe’ll discuss deref coercion in more depth in Chapter 15. Because `add` does\nnot take ownership of the `s` parameter, `s2` will still be a valid `String`\nafter this operation.\n\nSecond, we can see in the signature that `add` takes ownership of `self`,\nbecause `self` does *not* have an `&`. This means `s1` in Listing 8-18 will be\nmoved into the `add` call and will no longer be valid after that. So although\n`let s3 = s1 + &s2;` looks like it will copy both strings and create a new one,\nthis statement actually takes ownership of `s1`, appends a copy of the contents\nof `s2`, and then returns ownership of the result. In other words, it looks\nlike it’s making a lot of copies but isn’t; the implementation is more\nefficient than copying.\n\nIf we need to concatenate multiple strings, the behavior of the `+` operator\ngets unwieldy:\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/no-listing-01-concat-multiple-strings/src/main.rs:here}}\n```\n\nAt this point, `s` will be `tic-tac-toe`. With all of the `+` and `\"`\ncharacters, it’s difficult to see what’s going on. For more complicated string\ncombining, we can instead use the `format!` macro:\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/no-listing-02-format/src/main.rs:here}}\n```\n\nThis code also sets `s` to `tic-tac-toe`. The `format!` macro works like\n`println!`, but instead of printing the output to the screen, it returns a\n`String` with the contents. The version of the code using `format!` is much\neasier to read, and the code generated by the `format!` macro uses references\nso that this call doesn’t take ownership of any of its parameters.\n\n### Indexing into Strings\n\nIn many other programming languages, accessing individual characters in a\nstring by referencing them by index is a valid and common operation. However,\nif you try to access parts of a `String` using indexing syntax in Rust, you’ll\nget an error. Consider the invalid code in Listing 8-19.\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-19/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-19: Attempting to use indexing syntax with a\nString</span>\n\nThis code will result in the following error:\n\n```console\n{{#include ../listings/ch08-common-collections/listing-08-19/output.txt}}\n```\n\nThe error and the note tell the story: Rust strings don’t support indexing. But\nwhy not? To answer that question, we need to discuss how Rust stores strings in\nmemory.\n\n#### Internal Representation\n\nA `String` is a wrapper over a `Vec<u8>`. Let’s look at some of our properly\nencoded UTF-8 example strings from Listing 8-14. First, this one:\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-14/src/main.rs:spanish}}\n```\n\nIn this case, `len` will be 4, which means the vector storing the string “Hola”\nis 4 bytes long. Each of these letters takes 1 byte when encoded in UTF-8. The\nfollowing line, however, may surprise you. (Note that this string begins with\nthe capital Cyrillic letter Ze, not the number 3.)\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-14/src/main.rs:russian}}\n```\n\nAsked how long the string is, you might say 12. In fact, Rust’s answer is 24:\nthat’s the number of bytes it takes to encode “Здравствуйте” in UTF-8, because\neach Unicode scalar value in that string takes 2 bytes of storage. Therefore,\nan index into the string’s bytes will not always correlate to a valid Unicode\nscalar value. To demonstrate, consider this invalid Rust code:\n\n```rust,ignore,does_not_compile\nlet hello = \"Здравствуйте\";\nlet answer = &hello[0];\n```\n\nYou already know that `answer` will not be `З`, the first letter. When encoded\nin UTF-8, the first byte of `З` is `208` and the second is `151`, so it would\nseem that `answer` should in fact be `208`, but `208` is not a valid character\non its own. Returning `208` is likely not what a user would want if they asked\nfor the first letter of this string; however, that’s the only data that Rust\nhas at byte index 0. Users generally don’t want the byte value returned, even\nif the string contains only Latin letters: if `&\"hello\"[0]` were valid code\nthat returned the byte value, it would return `104`, not `h`.\n\nThe answer, then, is that to avoid returning an unexpected value and causing\nbugs that might not be discovered immediately, Rust doesn’t compile this code\nat all and prevents misunderstandings early in the development process.\n\n#### Bytes and Scalar Values and Grapheme Clusters! Oh My!\n\nAnother point about UTF-8 is that there are actually three relevant ways to\nlook at strings from Rust’s perspective: as bytes, scalar values, and grapheme\nclusters (the closest thing to what we would call *letters*).\n\nIf we look at the Hindi word “नमस्ते” written in the Devanagari script, it is\nstored as a vector of `u8` values that looks like this:\n\n```text\n[224, 164, 168, 224, 164, 174, 224, 164, 184, 224, 165, 141, 224, 164, 164,\n224, 165, 135]\n```\n\nThat’s 18 bytes and is how computers ultimately store this data. If we look at\nthem as Unicode scalar values, which are what Rust’s `char` type is, those\nbytes look like this:\n\n```text\n['न', 'म', 'स', '्', 'त', 'े']\n```\n\nThere are six `char` values here, but the fourth and sixth are not letters:\nthey’re diacritics that don’t make sense on their own. Finally, if we look at\nthem as grapheme clusters, we’d get what a person would call the four letters\nthat make up the Hindi word:\n\n```text\n[\"न\", \"म\", \"स्\", \"ते\"]\n```\n\nRust provides different ways of interpreting the raw string data that computers\nstore so that each program can choose the interpretation it needs, no matter\nwhat human language the data is in.\n\nA final reason Rust doesn’t allow us to index into a `String` to get a\ncharacter is that indexing operations are expected to always take constant time\n(O(1)). But it isn’t possible to guarantee that performance with a `String`,\nbecause Rust would have to walk through the contents from the beginning to the\nindex to determine how many valid characters there were.\n\n### Slicing Strings\n\nIndexing into a string is often a bad idea because it’s not clear what the\nreturn type of the string-indexing operation should be: a byte value, a\ncharacter, a grapheme cluster, or a string slice. If you really need to use\nindices to create string slices, therefore, Rust asks you to be more specific.\n\nRather than indexing using `[]` with a single number, you can use `[]` with a\nrange to create a string slice containing particular bytes:\n\n```rust\nlet hello = \"Здравствуйте\";\n\nlet s = &hello[0..4];\n```\n\nHere, `s` will be a `&str` that contains the first 4 bytes of the string.\nEarlier, we mentioned that each of these characters was 2 bytes, which means\n`s` will be `Зд`.\n\nIf we were to try to slice only part of a character’s bytes with something like\n`&hello[0..1]`, Rust would panic at runtime in the same way as if an invalid\nindex were accessed in a vector:\n\n```console\n{{#include ../listings/ch08-common-collections/output-only-01-not-char-boundary/output.txt}}\n```\n\nYou should use ranges to create string slices with caution, because doing so\ncan crash your program.\n\n### Methods for Iterating Over Strings\n\nThe best way to operate on pieces of strings is to be explicit about whether\nyou want characters or bytes. For individual Unicode scalar values, use the\n`chars` method. Calling `chars` on “Зд” separates out and returns two values\nof type `char`, and you can iterate over the result to access each element:\n\n```rust\nfor c in \"Зд\".chars() {\n    println!(\"{c}\");\n}\n```\n\nThis code will print the following:\n\n```text\nЗ\nд\n```\n\nAlternatively, the `bytes` method returns each raw byte, which might be\nappropriate for your domain:\n\n```rust\nfor b in \"Зд\".bytes() {\n    println!(\"{b}\");\n}\n```\n\nThis code will print the four bytes that make up this string:\n\n```text\n208\n151\n208\n180\n```\n\nBut be sure to remember that valid Unicode scalar values may be made up of more\nthan 1 byte.\n\nGetting grapheme clusters from strings as with the Devanagari script is\ncomplex, so this functionality is not provided by the standard library. Crates\nare available on [crates.io](https://crates.io/)<!-- ignore --> if this is the\nfunctionality you need.\n\n### Strings Are Not So Simple\n\nTo summarize, strings are complicated. Different programming languages make\ndifferent choices about how to present this complexity to the programmer. Rust\nhas chosen to make the correct handling of `String` data the default behavior\nfor all Rust programs, which means programmers have to put more thought into\nhandling UTF-8 data upfront. This trade-off exposes more of the complexity of\nstrings than is apparent in other programming languages, but it prevents you\nfrom having to handle errors involving non-ASCII characters later in your\ndevelopment life cycle.\n\nThe good news is that the standard library offers a lot of functionality built\noff the `String` and `&str` types to help handle these complex situations\ncorrectly. Be sure to check out the documentation for useful methods like\n`contains` for searching in a string and `replace` for substituting parts of a\nstring with another string.\n\nLet’s switch to something a bit less complex: hash maps!\n",
          "document_id": 41
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "What hashmap stores?",
              "id": 214,
              "answers": [
                {
                  "answer_id": 216,
                  "document_id": 42,
                  "question_id": 214,
                  "text": "The last of our common collections is the *hash map*. The type `HashMap‹K, V>`\nstores a mapping of keys of type `K` to values of type `V` using a\n*hashing function*, which determines how it places these keys and values into\nmemory.",
                  "answer_start": 53,
                  "answer_end": 284,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What hashing function determines?",
              "id": 215,
              "answers": [
                {
                  "answer_id": 217,
                  "document_id": 42,
                  "question_id": 215,
                  "text": "*hashing function*, which determines how it places these keys and values into\nmemory. ",
                  "answer_start": 199,
                  "answer_end": 285,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are another names to hashmap used in another programming languages?\n",
              "id": 216,
              "answers": [
                {
                  "answer_id": 218,
                  "document_id": 42,
                  "question_id": 216,
                  "text": "Many programming languages support this kind of data structure, but\nthey often use a different name, such as hash, map, object, hash table,\ndictionary, or associative array, just to name a few.",
                  "answer_start": 285,
                  "answer_end": 478,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When are hashmaps useful?",
              "id": 217,
              "answers": [
                {
                  "answer_id": 219,
                  "document_id": 42,
                  "question_id": 217,
                  "text": "Hash maps are useful when you want to look up data not by using an index, as\nyou can with vectors, but by using a key that can be of any type. For example,\nin a game, you could keep track of each team’s score in a hash map in which\neach key is a team’s name and the values are each team’s score. Given a team\nname, you can retrieve its score.",
                  "answer_start": 480,
                  "answer_end": 822,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to create an empty hashmap?",
              "id": 218,
              "answers": [
                {
                  "answer_id": 220,
                  "document_id": 42,
                  "question_id": 218,
                  "text": "One way to create an empty hash map is using `new`",
                  "answer_start": 1088,
                  "answer_end": 1138,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to add elements to a hashmap",
              "id": 219,
              "answers": [
                {
                  "answer_id": 221,
                  "document_id": 42,
                  "question_id": 219,
                  "text": "One way to create an empty hash map is using `new` and adding elements with\n`insert`.",
                  "answer_start": 1088,
                  "answer_end": 1173,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Where hash maps store their data?",
              "id": 220,
              "answers": [
                {
                  "answer_id": 222,
                  "document_id": 42,
                  "question_id": 220,
                  "text": "Just like vectors, hash maps store their data on the heap.",
                  "answer_start": 1926,
                  "answer_end": 1984,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does it mean that hash maps are homogeneous?",
              "id": 221,
              "answers": [
                {
                  "answer_id": 223,
                  "document_id": 42,
                  "question_id": 221,
                  "text": "Like vectors, hash maps are\nhomogeneous: all of the keys must have the same type as each other, and all of\nthe values must have the same type.",
                  "answer_start": 2052,
                  "answer_end": 2194,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to iterate each key/value pair in a hash map?",
              "id": 222,
              "answers": [
                {
                  "answer_id": 224,
                  "document_id": 42,
                  "question_id": 222,
                  "text": "We can iterate over each key/value pair in a hash map in a similar manner as we\ndo with vectors, using a `for` loop:",
                  "answer_start": 2962,
                  "answer_end": 3078,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can one key have more than one value associated with it at a time?",
              "id": 223,
              "answers": [
                {
                  "answer_id": 225,
                  "document_id": 42,
                  "question_id": 223,
                  "text": "Although the number of key and value pairs is growable, each unique key can\nonly have one value associated with it at a time",
                  "answer_start": 4302,
                  "answer_end": 4426,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to change data in a hashmap?",
              "id": 224,
              "answers": [
                {
                  "answer_id": 226,
                  "document_id": 42,
                  "question_id": 224,
                  "text": "When you want to change the data in a hash map, you have to decide how to\nhandle the case when a key already has a value assigned. You could replace the\nold value with the new value, completely disregarding the old value. You could\nkeep the old value and ignore the new value, only adding the new value if the\nkey *doesn’t* already have a value. Or you could combine the old value and the\nnew value.",
                  "answer_start": 4555,
                  "answer_end": 4954,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is \"entry\"?",
              "id": 225,
              "answers": [
                {
                  "answer_id": 227,
                  "document_id": 42,
                  "question_id": 225,
                  "text": "Hash maps have a special API for this called `entry` that takes the key you\nwant to check as a parameter. The return value of the `entry` method is an enum\ncalled `Entry` that represents a value that might or might not exist. ",
                  "answer_start": 6076,
                  "answer_end": 6302,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which hashing function uses hash map by default?",
              "id": 226,
              "answers": [
                {
                  "answer_id": 228,
                  "document_id": 42,
                  "question_id": 226,
                  "text": "By default, `HashMap` uses a hashing function called *SipHash*",
                  "answer_start": 8941,
                  "answer_end": 9003,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the advantage of *SipHash* hashing function?",
              "id": 227,
              "answers": [
                {
                  "answer_id": 229,
                  "document_id": 42,
                  "question_id": 227,
                  "text": "hashing function called *SipHash* that can provide\nresistance to Denial of Service (DoS) attacks involving hash\ntables[^siphash]‹!-- ignore -->. This is not the fastest hashing algorithm\navailable, but the trade-off for better security that comes with the drop in\nperformance is worth it.",
                  "answer_start": 8970,
                  "answer_end": 9258,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What can I do If i want to use faster hashing function?",
              "id": 228,
              "answers": [
                {
                  "answer_id": 230,
                  "document_id": 42,
                  "question_id": 228,
                  "text": "If you profile your code and find that the default\nhash function is too slow for your purposes, you can switch to another function\nby specifying a different hasher.",
                  "answer_start": 9259,
                  "answer_end": 9423,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## Storing Keys with Associated Values in Hash Maps\n\nThe last of our common collections is the *hash map*. The type `HashMap<K, V>`\nstores a mapping of keys of type `K` to values of type `V` using a\n*hashing function*, which determines how it places these keys and values into\nmemory. Many programming languages support this kind of data structure, but\nthey often use a different name, such as hash, map, object, hash table,\ndictionary, or associative array, just to name a few.\n\nHash maps are useful when you want to look up data not by using an index, as\nyou can with vectors, but by using a key that can be of any type. For example,\nin a game, you could keep track of each team’s score in a hash map in which\neach key is a team’s name and the values are each team’s score. Given a team\nname, you can retrieve its score.\n\nWe’ll go over the basic API of hash maps in this section, but many more goodies\nare hiding in the functions defined on `HashMap<K, V>` by the standard library.\nAs always, check the standard library documentation for more information.\n\n### Creating a New Hash Map\n\nOne way to create an empty hash map is using `new` and adding elements with\n`insert`. In Listing 8-20, we’re keeping track of the scores of two teams whose\nnames are *Blue* and *Yellow*. The Blue team starts with 10 points, and the\nYellow team starts with 50.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-20/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-20: Creating a new hash map and inserting some\nkeys and values</span>\n\nNote that we need to first `use` the `HashMap` from the collections portion of\nthe standard library. Of our three common collections, this one is the least\noften used, so it’s not included in the features brought into scope\nautomatically in the prelude. Hash maps also have less support from the\nstandard library; there’s no built-in macro to construct them, for example.\n\nJust like vectors, hash maps store their data on the heap. This `HashMap` has\nkeys of type `String` and values of type `i32`. Like vectors, hash maps are\nhomogeneous: all of the keys must have the same type as each other, and all of\nthe values must have the same type.\n\n### Accessing Values in a Hash Map\n\nWe can get a value out of the hash map by providing its key to the `get`\nmethod, as shown in Listing 8-21.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-21/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-21: Accessing the score for the Blue team\nstored in the hash map</span>\n\nHere, `score` will have the value that’s associated with the Blue team, and the\nresult will be `10`. The `get` method returns an `Option<&V>`; if there’s no\nvalue for that key in the hash map, `get` will return `None`. This program\nhandles the `Option` by calling `copied` to get an `Option<i32>` rather than an\n`Option<&i32>`, then `unwrap_or` to set `score` to zero if `scores` doesn't\nhave an entry for the key.\n\nWe can iterate over each key/value pair in a hash map in a similar manner as we\ndo with vectors, using a `for` loop:\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/no-listing-03-iterate-over-hashmap/src/main.rs:here}}\n```\n\nThis code will print each pair in an arbitrary order:\n\n```text\nYellow: 50\nBlue: 10\n```\n\n### Hash Maps and Ownership\n\nFor types that implement the `Copy` trait, like `i32`, the values are copied\ninto the hash map. For owned values like `String`, the values will be moved and\nthe hash map will be the owner of those values, as demonstrated in Listing 8-22.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-22/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-22: Showing that keys and values are owned by\nthe hash map once they’re inserted</span>\n\nWe aren’t able to use the variables `field_name` and `field_value` after\nthey’ve been moved into the hash map with the call to `insert`.\n\nIf we insert references to values into the hash map, the values won’t be moved\ninto the hash map. The values that the references point to must be valid for at\nleast as long as the hash map is valid. We’ll talk more about these issues in\nthe [“Validating References with\nLifetimes”][validating-references-with-lifetimes]<!-- ignore --> section in\nChapter 10.\n\n### Updating a Hash Map\n\nAlthough the number of key and value pairs is growable, each unique key can\nonly have one value associated with it at a time (but not vice versa: for\nexample, both the Blue team and the Yellow team could have value 10 stored in\nthe `scores` hash map).\n\nWhen you want to change the data in a hash map, you have to decide how to\nhandle the case when a key already has a value assigned. You could replace the\nold value with the new value, completely disregarding the old value. You could\nkeep the old value and ignore the new value, only adding the new value if the\nkey *doesn’t* already have a value. Or you could combine the old value and the\nnew value. Let’s look at how to do each of these!\n\n#### Overwriting a Value\n\nIf we insert a key and a value into a hash map and then insert that same key\nwith a different value, the value associated with that key will be replaced.\nEven though the code in Listing 8-23 calls `insert` twice, the hash map will\nonly contain one key/value pair because we’re inserting the value for the Blue\nteam’s key both times.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-23/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-23: Replacing a value stored with a particular\nkey</span>\n\nThis code will print `{\"Blue\": 25}`. The original value of `10` has been\noverwritten.\n\n<!-- Old headings. Do not remove or links may break. -->\n<a id=\"only-inserting-a-value-if-the-key-has-no-value\"></a>\n\n#### Adding a Key and Value Only If a Key Isn’t Present\n\nIt’s common to check whether a particular key already exists in the hash map\nwith a value then take the following actions: if the key does exist in the hash\nmap, the existing value should remain the way it is. If the key doesn’t exist,\ninsert it and a value for it.\n\nHash maps have a special API for this called `entry` that takes the key you\nwant to check as a parameter. The return value of the `entry` method is an enum\ncalled `Entry` that represents a value that might or might not exist. Let’s say\nwe want to check whether the key for the Yellow team has a value associated\nwith it. If it doesn’t, we want to insert the value 50, and the same for the\nBlue team. Using the `entry` API, the code looks like Listing 8-24.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-24/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-24: Using the `entry` method to only insert if\nthe key does not already have a value</span>\n\nThe `or_insert` method on `Entry` is defined to return a mutable reference to\nthe value for the corresponding `Entry` key if that key exists, and if not,\ninserts the parameter as the new value for this key and returns a mutable\nreference to the new value. This technique is much cleaner than writing the\nlogic ourselves and, in addition, plays more nicely with the borrow checker.\n\nRunning the code in Listing 8-24 will print `{\"Yellow\": 50, \"Blue\": 10}`. The\nfirst call to `entry` will insert the key for the Yellow team with the value\n50 because the Yellow team doesn’t have a value already. The second call to\n`entry` will not change the hash map because the Blue team already has the\nvalue 10.\n\n#### Updating a Value Based on the Old Value\n\nAnother common use case for hash maps is to look up a key’s value and then\nupdate it based on the old value. For instance, Listing 8-25 shows code that\ncounts how many times each word appears in some text. We use a hash map with\nthe words as keys and increment the value to keep track of how many times we’ve\nseen that word. If it’s the first time we’ve seen a word, we’ll first insert\nthe value 0.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-25/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-25: Counting occurrences of words using a hash\nmap that stores words and counts</span>\n\nThis code will print `{\"world\": 2, \"hello\": 1, \"wonderful\": 1}`. You might see\nthe same key/value pairs printed in a different order: recall from the\n[“Accessing Values in a Hash Map”][access]<!-- ignore --> section that\niterating over a hash map happens in an arbitrary order.\n\nThe `split_whitespace` method returns an iterator over sub-slices, separated by\nwhitespace, of the value in `text`. The `or_insert` method returns a mutable\nreference (`&mut V`) to the value for the specified key. Here we store that\nmutable reference in the `count` variable, so in order to assign to that value,\nwe must first dereference `count` using the asterisk (`*`). The mutable\nreference goes out of scope at the end of the `for` loop, so all of these\nchanges are safe and allowed by the borrowing rules.\n\n### Hashing Functions\n\nBy default, `HashMap` uses a hashing function called *SipHash* that can provide\nresistance to Denial of Service (DoS) attacks involving hash\ntables[^siphash]<!-- ignore -->. This is not the fastest hashing algorithm\navailable, but the trade-off for better security that comes with the drop in\nperformance is worth it. If you profile your code and find that the default\nhash function is too slow for your purposes, you can switch to another function\nby specifying a different hasher. A *hasher* is a type that implements the\n`BuildHasher` trait. We’ll talk about traits and how to implement them in\nChapter 10. You don’t necessarily have to implement your own hasher from\nscratch; [crates.io](https://crates.io/)<!-- ignore --> has libraries shared by\nother Rust users that provide hashers implementing many common hashing\nalgorithms.\n\n[^siphash]: [https://en.wikipedia.org/wiki/SipHash](https://en.wikipedia.org/wiki/SipHash)\n\n## Summary\n\nVectors, strings, and hash maps will provide a large amount of functionality\nnecessary in programs when you need to store, access, and modify data. Here are\nsome exercises you should now be equipped to solve:\n\n* Given a list of integers, use a vector and return the median (when sorted,\n  the value in the middle position) and mode (the value that occurs most often;\n  a hash map will be helpful here) of the list.\n* Convert strings to pig latin. The first consonant of each word is moved to\n  the end of the word and “ay” is added, so “first” becomes “irst-fay.” Words\n  that start with a vowel have “hay” added to the end instead (“apple” becomes\n  “apple-hay”). Keep in mind the details about UTF-8 encoding!\n* Using a hash map and vectors, create a text interface to allow a user to add\n  employee names to a department in a company. For example, “Add Sally to\n  Engineering” or “Add Amir to Sales.” Then let the user retrieve a list of all\n  people in a department or all people in the company by department, sorted\n  alphabetically.\n\nThe standard library API documentation describes methods that vectors, strings,\nand hash maps have that will be helpful for these exercises!\n\nWe’re getting into more complex programs in which operations can fail, so, it’s\na perfect time to discuss error handling. We’ll do that next!\n\n[validating-references-with-lifetimes]:\nch10-03-lifetime-syntax.html#validating-references-with-lifetimes\n[access]: #accessing-values-in-a-hash-map\n",
          "document_id": 42
        }
      ]
    }
  ]
}