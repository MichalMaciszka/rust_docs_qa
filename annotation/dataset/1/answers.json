{
  "data": [
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "What are identifiers?",
              "id": 1,
              "answers": [
                {
                  "answer_id": 1,
                  "document_id": 2,
                  "question_id": 1,
                  "text": "names\nof functions, variables, parameters, struct fields, modules, crates, constants,\nmacros, static values, attributes, types, traits, or lifetimes",
                  "answer_start": 301,
                  "answer_end": 449,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can keywords be used as identifiers?",
              "id": 2,
              "answers": [
                {
                  "answer_id": 2,
                  "document_id": 2,
                  "question_id": 2,
                  "text": "they cannot be used as identifiers",
                  "answer_start": 137,
                  "answer_end": 171,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does 'as' keyword do?",
              "id": 3,
              "answers": [
                {
                  "answer_id": 3,
                  "document_id": 2,
                  "question_id": 3,
                  "text": "perform primitive casting, disambiguate the specific trait containing\n  an item, or rename items in `use` statements",
                  "answer_start": 620,
                  "answer_end": 736,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What keyword return a 'Future' instead of blocking the current thread?",
              "id": 4,
              "answers": [
                {
                  "answer_id": 4,
                  "document_id": 2,
                  "question_id": 4,
                  "text": "async",
                  "answer_start": 740,
                  "answer_end": 745,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of 'await'?",
              "id": 5,
              "answers": [
                {
                  "answer_id": 5,
                  "document_id": 2,
                  "question_id": 5,
                  "text": "suspend execution until the result of a `Future` is ready",
                  "answer_start": 819,
                  "answer_end": 876,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what keyword can I exit a loop immediately?",
              "id": 6,
              "answers": [
                {
                  "answer_id": 6,
                  "document_id": 2,
                  "question_id": 6,
                  "text": "break",
                  "answer_start": 880,
                  "answer_end": 885,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is 'const' doing?",
              "id": 7,
              "answers": [
                {
                  "answer_id": 7,
                  "document_id": 2,
                  "question_id": 7,
                  "text": "define constant items or constant raw pointers",
                  "answer_start": 925,
                  "answer_end": 971,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I continue to the next loop iteration?",
              "id": 8,
              "answers": [
                {
                  "answer_id": 8,
                  "document_id": 2,
                  "question_id": 8,
                  "text": "continue",
                  "answer_start": 975,
                  "answer_end": 983,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What 'crate' keyword does?",
              "id": 9,
              "answers": [
                {
                  "answer_id": 9,
                  "document_id": 2,
                  "question_id": 9,
                  "text": "in a module path, refers to the crate root",
                  "answer_start": 1035,
                  "answer_end": 1077,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the fallback for 'if' and 'if let' control flow?",
              "id": 10,
              "answers": [
                {
                  "answer_id": 10,
                  "document_id": 2,
                  "question_id": 10,
                  "text": "else",
                  "answer_start": 1126,
                  "answer_end": 1130,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What means 'enum'",
              "id": 11,
              "answers": [
                {
                  "answer_id": 11,
                  "document_id": 2,
                  "question_id": 11,
                  "text": "define an enumeration",
                  "answer_start": 1200,
                  "answer_end": 1221,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I link an external function or variable?",
              "id": 12,
              "answers": [
                {
                  "answer_id": 12,
                  "document_id": 2,
                  "question_id": 12,
                  "text": "extern",
                  "answer_start": 1225,
                  "answer_end": 1231,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How is boolean false literal called?",
              "id": 13,
              "answers": [
                {
                  "answer_id": 13,
                  "document_id": 2,
                  "question_id": 13,
                  "text": "false",
                  "answer_start": 1276,
                  "answer_end": 1281,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What keyword defines function?",
              "id": 14,
              "answers": [
                {
                  "answer_id": 14,
                  "document_id": 2,
                  "question_id": 14,
                  "text": "fn",
                  "answer_start": 1310,
                  "answer_end": 1312,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does 'for' keyword do?",
              "id": 15,
              "answers": [
                {
                  "answer_id": 15,
                  "document_id": 2,
                  "question_id": 15,
                  "text": "loop over items from an iterator, implement a trait, or specify a\n  higher-ranked lifetime",
                  "answer_start": 1373,
                  "answer_end": 1463,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What means 'if'?",
              "id": 16,
              "answers": [
                {
                  "answer_id": 16,
                  "document_id": 2,
                  "question_id": 16,
                  "text": "branch based on the result of a conditional expression",
                  "answer_start": 1473,
                  "answer_end": 1527,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is 'impl' doing?",
              "id": 17,
              "answers": [
                {
                  "answer_id": 17,
                  "document_id": 2,
                  "question_id": 17,
                  "text": "implement inherent or trait functionality",
                  "answer_start": 1539,
                  "answer_end": 1580,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is 'in'?",
              "id": 18,
              "answers": [
                {
                  "answer_id": 18,
                  "document_id": 2,
                  "question_id": 18,
                  "text": "part of `for` loop syntax",
                  "answer_start": 1590,
                  "answer_end": 1615,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I bind a variable?",
              "id": 19,
              "answers": [
                {
                  "answer_id": 19,
                  "document_id": 2,
                  "question_id": 19,
                  "text": "let",
                  "answer_start": 1619,
                  "answer_end": 1622,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What keyword can I use when I want to loop unconditionally?",
              "id": 20,
              "answers": [
                {
                  "answer_id": 20,
                  "document_id": 2,
                  "question_id": 20,
                  "text": "loop",
                  "answer_start": 1645,
                  "answer_end": 1649,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is 'match' doing?",
              "id": 21,
              "answers": [
                {
                  "answer_id": 21,
                  "document_id": 2,
                  "question_id": 21,
                  "text": " match a value to patterns",
                  "answer_start": 1685,
                  "answer_end": 1711,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I define a module?",
              "id": 22,
              "answers": [
                {
                  "answer_id": 22,
                  "document_id": 2,
                  "question_id": 22,
                  "text": "mod",
                  "answer_start": 1715,
                  "answer_end": 1718,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what keyword can I take ownership of all captures?",
              "id": 23,
              "answers": [
                {
                  "answer_id": 23,
                  "document_id": 2,
                  "question_id": 23,
                  "text": "move",
                  "answer_start": 1741,
                  "answer_end": 1745,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of 'mut'?",
              "id": 24,
              "answers": [
                {
                  "answer_id": 24,
                  "document_id": 2,
                  "question_id": 24,
                  "text": "denote mutability in references, raw pointers, or pattern bindings",
                  "answer_start": 1809,
                  "answer_end": 1875,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what keyword can I denote public visibility in struct, impl or modules",
              "id": 25,
              "answers": [
                {
                  "answer_id": 25,
                  "document_id": 2,
                  "question_id": 25,
                  "text": "pub",
                  "answer_start": 1879,
                  "answer_end": 1882,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I bind by reference?",
              "id": 26,
              "answers": [
                {
                  "answer_id": 26,
                  "document_id": 2,
                  "question_id": 26,
                  "text": "ref",
                  "answer_start": 1958,
                  "answer_end": 1961,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is 'return' doing?",
              "id": 27,
              "answers": [
                {
                  "answer_id": 27,
                  "document_id": 2,
                  "question_id": 27,
                  "text": "return from function",
                  "answer_start": 1996,
                  "answer_end": 2016,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is a keyword for a type alias when we are defining or implementing the type?",
              "id": 28,
              "answers": [
                {
                  "answer_id": 28,
                  "document_id": 2,
                  "question_id": 28,
                  "text": "Self",
                  "answer_start": 2020,
                  "answer_end": 2024,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I refer to method subject or current module?",
              "id": 29,
              "answers": [
                {
                  "answer_id": 29,
                  "document_id": 2,
                  "question_id": 29,
                  "text": "self",
                  "answer_start": 2089,
                  "answer_end": 2093,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning if static?",
              "id": 30,
              "answers": [
                {
                  "answer_id": 30,
                  "document_id": 2,
                  "question_id": 30,
                  "text": "global variable or lifetime lasting the entire program execution",
                  "answer_start": 2143,
                  "answer_end": 2207,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does 'struct' keyword do?",
              "id": 31,
              "answers": [
                {
                  "answer_id": 31,
                  "document_id": 2,
                  "question_id": 31,
                  "text": "define a structure",
                  "answer_start": 2221,
                  "answer_end": 2239,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what keyword can I refer to a parent module of the current module?",
              "id": 32,
              "answers": [
                {
                  "answer_id": 32,
                  "document_id": 2,
                  "question_id": 32,
                  "text": "super",
                  "answer_start": 2243,
                  "answer_end": 2248,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is 'trait' doing?",
              "id": 33,
              "answers": [
                {
                  "answer_id": 33,
                  "document_id": 2,
                  "question_id": 33,
                  "text": "define a trait",
                  "answer_start": 2300,
                  "answer_end": 2314,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does 'true' mean?",
              "id": 34,
              "answers": [
                {
                  "answer_id": 34,
                  "document_id": 2,
                  "question_id": 34,
                  "text": "Boolean true literal",
                  "answer_start": 2326,
                  "answer_end": 2346,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What defines a type alias?",
              "id": 35,
              "answers": [
                {
                  "answer_id": 35,
                  "document_id": 2,
                  "question_id": 35,
                  "text": "type",
                  "answer_start": 2350,
                  "answer_end": 2354,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What word is only a keyword when used in a union declaration?",
              "id": 36,
              "answers": [
                {
                  "answer_id": 36,
                  "document_id": 2,
                  "question_id": 36,
                  "text": "union",
                  "answer_start": 2400,
                  "answer_end": 2405,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What defines a union?",
              "id": 37,
              "answers": [
                {
                  "answer_id": 37,
                  "document_id": 2,
                  "question_id": 37,
                  "text": "union",
                  "answer_start": 2400,
                  "answer_end": 2405,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does 'unsafe' do?",
              "id": 38,
              "answers": [
                {
                  "answer_id": 38,
                  "document_id": 2,
                  "question_id": 38,
                  "text": "denote unsafe code, functions, traits, or implementations",
                  "answer_start": 2515,
                  "answer_end": 2572,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What brings symbols into scope?",
              "id": 39,
              "answers": [
                {
                  "answer_id": 39,
                  "document_id": 2,
                  "question_id": 39,
                  "text": "use",
                  "answer_start": 2576,
                  "answer_end": 2579,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "For what are we using 'where' keyword",
              "id": 40,
              "answers": [
                {
                  "answer_id": 40,
                  "document_id": 2,
                  "question_id": 40,
                  "text": "denote clauses that constrain a type",
                  "answer_start": 2620,
                  "answer_end": 2656,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I loop conditionally based on the result of an expression?",
              "id": 41,
              "answers": [
                {
                  "answer_id": 41,
                  "document_id": 2,
                  "question_id": 41,
                  "text": "while",
                  "answer_start": 2660,
                  "answer_end": 2665,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What keywords do not have any functionality yet?",
              "id": 42,
              "answers": [
                {
                  "answer_id": 42,
                  "document_id": 2,
                  "question_id": 42,
                  "text": "* `abstract`\n* `become`\n* `box`\n* `do`\n* `final`\n* `macro`\n* `override`\n* `priv`\n* `try`\n* `typeof`\n* `unsized`\n* `virtual`\n* `yield`",
                  "answer_start": 2914,
                  "answer_end": 3047,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What keywords are reserved for future use?",
              "id": 43,
              "answers": [
                {
                  "answer_id": 43,
                  "document_id": 2,
                  "question_id": 43,
                  "text": "* `abstract`\n* `become`\n* `box`\n* `do`\n* `final`\n* `macro`\n* `override`\n* `priv`\n* `try`\n* `typeof`\n* `unsized`\n* `virtual`\n* `yield`",
                  "answer_start": 2914,
                  "answer_end": 3047,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the raw identifiers?",
              "id": 44,
              "answers": [
                {
                  "answer_id": 44,
                  "document_id": 2,
                  "question_id": 44,
                  "text": "syntax that lets you use keywords where they wouldn’t\nnormally be allowed",
                  "answer_start": 3096,
                  "answer_end": 3169,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How do we call a syntax that lets us use keywords where they wouldn't be allowed?",
              "id": 45,
              "answers": [
                {
                  "answer_id": 45,
                  "document_id": 2,
                  "question_id": 45,
                  "text": "Raw identifiers",
                  "answer_start": 3071,
                  "answer_end": 3086,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What do raw identifiers allow as to do?",
              "id": 46,
              "answers": [
                {
                  "answer_id": 46,
                  "document_id": 2,
                  "question_id": 46,
                  "text": "use any word you choose as an identifier, even if\nthat word happens to be a reserved keyword",
                  "answer_start": 4287,
                  "answer_end": 4379,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## Appendix A: Keywords\n\nThe following list contains keywords that are reserved for current or future\nuse by the Rust language. As such, they cannot be used as identifiers (except\nas raw identifiers as we’ll discuss in the “[Raw\nIdentifiers][raw-identifiers]<!-- ignore -->” section). Identifiers are names\nof functions, variables, parameters, struct fields, modules, crates, constants,\nmacros, static values, attributes, types, traits, or lifetimes.\n\n[raw-identifiers]: #raw-identifiers\n\n### Keywords Currently in Use\n\nThe following is a list of keywords currently in use, with their functionality\ndescribed.\n\n* `as` - perform primitive casting, disambiguate the specific trait containing\n  an item, or rename items in `use` statements\n* `async` -  return a `Future` instead of blocking the current thread\n* `await` - suspend execution until the result of a `Future` is ready\n* `break` - exit a loop immediately\n* `const` - define constant items or constant raw pointers\n* `continue` - continue to the next loop iteration\n* `crate` - in a module path, refers to the crate root\n* `dyn` - dynamic dispatch to a trait object\n* `else` - fallback for `if` and `if let` control flow constructs\n* `enum` - define an enumeration\n* `extern` - link an external function or variable\n* `false` - Boolean false literal\n* `fn` - define a function or the function pointer type\n* `for` - loop over items from an iterator, implement a trait, or specify a\n  higher-ranked lifetime\n* `if` - branch based on the result of a conditional expression\n* `impl` - implement inherent or trait functionality\n* `in` - part of `for` loop syntax\n* `let` - bind a variable\n* `loop` - loop unconditionally\n* `match` - match a value to patterns\n* `mod` - define a module\n* `move` - make a closure take ownership of all its captures\n* `mut` - denote mutability in references, raw pointers, or pattern bindings\n* `pub` - denote public visibility in struct fields, `impl` blocks, or modules\n* `ref` - bind by reference\n* `return` - return from function\n* `Self` - a type alias for the type we are defining or implementing\n* `self` - method subject or current module\n* `static` - global variable or lifetime lasting the entire program execution\n* `struct` - define a structure\n* `super` - parent module of the current module\n* `trait` - define a trait\n* `true` - Boolean true literal\n* `type` - define a type alias or associated type\n* `union` - define a [union][union]<!-- ignore -->; is only a keyword when used\n  in a union declaration\n* `unsafe` - denote unsafe code, functions, traits, or implementations\n* `use` - bring symbols into scope\n* `where` - denote clauses that constrain a type\n* `while` - loop conditionally based on the result of an expression\n\n[union]: ../reference/items/unions.html\n\n### Keywords Reserved for Future Use\n\nThe following keywords do not yet have any functionality but are reserved by\nRust for potential future use.\n\n* `abstract`\n* `become`\n* `box`\n* `do`\n* `final`\n* `macro`\n* `override`\n* `priv`\n* `try`\n* `typeof`\n* `unsized`\n* `virtual`\n* `yield`\n\n### Raw Identifiers\n\n*Raw identifiers* are the syntax that lets you use keywords where they wouldn’t\nnormally be allowed. You use a raw identifier by prefixing a keyword with `r#`.\n\nFor example, `match` is a keyword. If you try to compile the following function\nthat uses `match` as its name:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\nfn match(needle: &str, haystack: &str) -> bool {\n    haystack.contains(needle)\n}\n```\n\nyou’ll get this error:\n\n```text\nerror: expected identifier, found keyword `match`\n --> src/main.rs:4:4\n  |\n4 | fn match(needle: &str, haystack: &str) -> bool {\n  |    ^^^^^ expected identifier, found keyword\n```\n\nThe error shows that you can’t use the keyword `match` as the function\nidentifier. To use `match` as a function name, you need to use the raw\nidentifier syntax, like this:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn r#match(needle: &str, haystack: &str) -> bool {\n    haystack.contains(needle)\n}\n\nfn main() {\n    assert!(r#match(\"foo\", \"foobar\"));\n}\n```\n\nThis code will compile without any errors. Note the `r#` prefix on the function\nname in its definition as well as where the function is called in `main`.\n\nRaw identifiers allow you to use any word you choose as an identifier, even if\nthat word happens to be a reserved keyword. This gives us more freedom to\nchoose identifier names, as well as lets us integrate with programs written in\na language where these words aren’t keywords. In addition, raw identifiers\nallow you to use libraries written in a different Rust edition than your crate\nuses. For example, `try` isn’t a keyword in the 2015 edition but is in the 2018\nedition. If you depend on a library that’s written using the 2015 edition and\nhas a `try` function, you’ll need to use the raw identifier syntax, `r#try` in\nthis case, to call that function from your 2018 edition code. See [Appendix\nE][appendix-e]<!-- ignore --> for more information on editions.\n\n[appendix-e]: appendix-05-editions.html\n",
          "document_id": 2
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "What attribute can we apply to enum or struct?",
              "id": 159,
              "answers": [
                {
                  "answer_id": 160,
                  "document_id": 4,
                  "question_id": 159,
                  "text": "derive",
                  "answer_start": 85,
                  "answer_end": 91,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What atribute generates code that will implement the trait with its own default implementation",
              "id": 160,
              "answers": [
                {
                  "answer_id": 161,
                  "document_id": 4,
                  "question_id": 160,
                  "text": "derive",
                  "answer_start": 161,
                  "answer_end": 167,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is involved when implementing 'derive'?",
              "id": 161,
              "answers": [
                {
                  "answer_id": 162,
                  "document_id": 4,
                  "question_id": 161,
                  "text": "procedural macro",
                  "answer_start": 1972,
                  "answer_end": 1988,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which trait will allow me to print instances of a type for debugging purposes?",
              "id": 162,
              "answers": [
                {
                  "answer_id": 163,
                  "document_id": 4,
                  "question_id": 162,
                  "text": "The `Debug` trait",
                  "answer_start": 2230,
                  "answer_end": 2247,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I format debug output?",
              "id": 163,
              "answers": [
                {
                  "answer_id": 164,
                  "document_id": 4,
                  "question_id": 163,
                  "text": ":?` within `{}",
                  "answer_start": 2199,
                  "answer_end": 2213,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which trait is allowing to compare instances of a type?",
              "id": 164,
              "answers": [
                {
                  "answer_id": 165,
                  "document_id": 4,
                  "question_id": 164,
                  "text": "PartialEq",
                  "answer_start": 2718,
                  "answer_end": 2727,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which trait will enable me to use '==' and/or '!='",
              "id": 165,
              "answers": [
                {
                  "answer_id": 166,
                  "document_id": 4,
                  "question_id": 165,
                  "text": "PartialEq",
                  "answer_start": 2718,
                  "answer_end": 2727,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is 'PartialEq' trait for?",
              "id": 166,
              "answers": [
                {
                  "answer_id": 167,
                  "document_id": 4,
                  "question_id": 166,
                  "text": "to compare instances of a type to check for\nequality",
                  "answer_start": 2746,
                  "answer_end": 2798,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When two instances of struct are equal?",
              "id": 167,
              "answers": [
                {
                  "answer_id": 168,
                  "document_id": 4,
                  "question_id": 167,
                  "text": "if *all* fields are equal",
                  "answer_start": 2966,
                  "answer_end": 2991,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When are two enums equal?",
              "id": 168,
              "answers": [
                {
                  "answer_id": 169,
                  "document_id": 4,
                  "question_id": 168,
                  "text": "each variant is equal to itself and not equal to the other variants",
                  "answer_start": 3077,
                  "answer_end": 3144,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is a purpose of 'Eq' trait?",
              "id": 169,
              "answers": [
                {
                  "answer_id": 170,
                  "document_id": 4,
                  "question_id": 169,
                  "text": " to signal that for every value of\nthe annotated type, the value is equal to itself",
                  "answer_start": 3353,
                  "answer_end": 3436,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can all types implement 'eq'?",
              "id": 170,
              "answers": [
                {
                  "answer_id": 171,
                  "document_id": 4,
                  "question_id": 170,
                  "text": "not all types that\nimplement `PartialEq` can implement `Eq`.",
                  "answer_start": 3524,
                  "answer_end": 3584,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What trait allows to compare for sorting purposes?",
              "id": 171,
              "answers": [
                {
                  "answer_id": 172,
                  "document_id": 4,
                  "question_id": 171,
                  "text": "PartialOrd",
                  "answer_start": 3963,
                  "answer_end": 3973,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What will be output of 'partial_cmp' when there is no ordering?",
              "id": 172,
              "answers": [
                {
                  "answer_id": 173,
                  "document_id": 4,
                  "question_id": 172,
                  "text": "None",
                  "answer_start": 4332,
                  "answer_end": 4336,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When is partial ord required?",
              "id": 173,
              "answers": [
                {
                  "answer_id": 174,
                  "document_id": 4,
                  "question_id": 173,
                  "text": "for the `gen_range` method\nfrom the `rand` crate that generates a random value in the range specified by a\nrange expression",
                  "answer_start": 5006,
                  "answer_end": 5129,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is 'ord' trait allowing?",
              "id": 174,
              "answers": [
                {
                  "answer_id": 175,
                  "document_id": 4,
                  "question_id": 174,
                  "text": "that for any two values of the annotated\ntype, a valid ordering will exist",
                  "answer_start": 5167,
                  "answer_end": 5241,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can I apply the 'ord' trait ti tyoes that also implement 'PartialOrd' and 'Eq'?",
              "id": 175,
              "answers": [
                {
                  "answer_id": 176,
                  "document_id": 4,
                  "question_id": 175,
                  "text": "You can only apply the `Ord` trait to types\nthat also implement `PartialOrd` and `Eq`",
                  "answer_start": 5400,
                  "answer_end": 5485,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What trait will allow me to create a deep copy of a value?",
              "id": 176,
              "answers": [
                {
                  "answer_id": 177,
                  "document_id": 4,
                  "question_id": 176,
                  "text": "Clone",
                  "answer_start": 5860,
                  "answer_end": 5865,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What method will be called while deriving 'Clone'?",
              "id": 177,
              "answers": [
                {
                  "answer_id": 178,
                  "document_id": 4,
                  "question_id": 177,
                  "text": "`clone` method",
                  "answer_start": 6211,
                  "answer_end": 6225,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What can be an example of when 'Clone' is required?",
              "id": 178,
              "answers": [
                {
                  "answer_id": 179,
                  "document_id": 4,
                  "question_id": 178,
                  "text": "when calling the `to_vec` method on a\nslice",
                  "answer_start": 6456,
                  "answer_end": 6499,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can 'Copy' trait allow to duplicate value?",
              "id": 179,
              "answers": [
                {
                  "answer_id": 180,
                  "document_id": 4,
                  "question_id": 179,
                  "text": "copying bits stored on\nthe stack",
                  "answer_start": 6782,
                  "answer_end": 6814,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Is 'Copy' trait required a lot?",
              "id": 180,
              "answers": [
                {
                  "answer_id": 181,
                  "document_id": 4,
                  "question_id": 180,
                  "text": "The `Copy` trait is rarely required",
                  "answer_start": 7460,
                  "answer_end": 7495,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What's the difference between 'Clone' and 'Copy'?",
              "id": 181,
              "answers": [
                {
                  "answer_id": 182,
                  "document_id": 4,
                  "question_id": 181,
                  "text": "\nEverything possible with `Copy` you can also accomplish with `Clone`, but the\ncode might be slower or have to use `clone` in places.",
                  "answer_start": 7630,
                  "answer_end": 7763,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is 'hash' for?",
              "id": 182,
              "answers": [
                {
                  "answer_id": 183,
                  "document_id": 4,
                  "question_id": 182,
                  "text": "The `Hash` trait allows you to take an instance of a type of arbitrary size and\nmap that instance to a value of fixed size using a hash function",
                  "answer_start": 7822,
                  "answer_end": 7966,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When can I use 'Default' trait?",
              "id": 183,
              "answers": [
                {
                  "answer_id": 184,
                  "document_id": 4,
                  "question_id": 183,
                  "text": "The `Default` trait allows you to create a default value for a type.",
                  "answer_start": 8349,
                  "answer_end": 8417,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When is 'default' trait required?",
              "id": 184,
              "answers": [
                {
                  "answer_id": 185,
                  "document_id": 4,
                  "question_id": 184,
                  "text": "The `Default` trait is required when you use the method `unwrap_or_default` on\n`Option‹T>` instances",
                  "answer_start": 9099,
                  "answer_end": 9199,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## Appendix C: Derivable Traits\n\nIn various places in the book, we’ve discussed the `derive` attribute, which\nyou can apply to a struct or enum definition. The `derive` attribute generates\ncode that will implement a trait with its own default implementation on the\ntype you’ve annotated with the `derive` syntax.\n\nIn this appendix, we provide a reference of all the traits in the standard\nlibrary that you can use with `derive`. Each section covers:\n\n* What operators and methods deriving this trait will enable\n* What the implementation of the trait provided by `derive` does\n* What implementing the trait signifies about the type\n* The conditions in which you’re allowed or not allowed to implement the trait\n* Examples of operations that require the trait\n\nIf you want different behavior from that provided by the `derive` attribute,\nconsult the [standard library documentation](../std/index.html)<!-- ignore -->\nfor each trait for details of how to manually implement them.\n\nThese traits listed here are the only ones defined by the standard library that\ncan be implemented on your types using `derive`. Other traits defined in the\nstandard library don’t have sensible default behavior, so it’s up to you to\nimplement them in the way that makes sense for what you’re trying to accomplish.\n\nAn example of a trait that can’t be derived is `Display`, which handles\nformatting for end users. You should always consider the appropriate way to\ndisplay a type to an end user. What parts of the type should an end user be\nallowed to see? What parts would they find relevant? What format of the data\nwould be most relevant to them? The Rust compiler doesn’t have this insight, so\nit can’t provide appropriate default behavior for you.\n\nThe list of derivable traits provided in this appendix is not comprehensive:\nlibraries can implement `derive` for their own traits, making the list of\ntraits you can use `derive` with truly open-ended. Implementing `derive`\ninvolves using a procedural macro, which is covered in the\n[“Macros”][macros]<!-- ignore --> section of Chapter 19.\n\n### `Debug` for Programmer Output\n\nThe `Debug` trait enables debug formatting in format strings, which you\nindicate by adding `:?` within `{}` placeholders.\n\nThe `Debug` trait allows you to print instances of a type for debugging\npurposes, so you and other programmers using your type can inspect an instance\nat a particular point in a program’s execution.\n\nThe `Debug` trait is required, for example, in use of the `assert_eq!` macro.\nThis macro prints the values of instances given as arguments if the equality\nassertion fails so programmers can see why the two instances weren’t equal.\n\n### `PartialEq` and `Eq` for Equality Comparisons\n\nThe `PartialEq` trait allows you to compare instances of a type to check for\nequality and enables use of the `==` and `!=` operators.\n\nDeriving `PartialEq` implements the `eq` method. When `PartialEq` is derived on\nstructs, two instances are equal only if *all* fields are equal, and the\ninstances are not equal if any fields are not equal. When derived on enums,\neach variant is equal to itself and not equal to the other variants.\n\nThe `PartialEq` trait is required, for example, with the use of the\n`assert_eq!` macro, which needs to be able to compare two instances of a type\nfor equality.\n\nThe `Eq` trait has no methods. Its purpose is to signal that for every value of\nthe annotated type, the value is equal to itself. The `Eq` trait can only be\napplied to types that also implement `PartialEq`, although not all types that\nimplement `PartialEq` can implement `Eq`. One example of this is floating point\nnumber types: the implementation of floating point numbers states that two\ninstances of the not-a-number (`NaN`) value are not equal to each other.\n\nAn example of when `Eq` is required is for keys in a `HashMap<K, V>` so the\n`HashMap<K, V>` can tell whether two keys are the same.\n\n### `PartialOrd` and `Ord` for Ordering Comparisons\n\nThe `PartialOrd` trait allows you to compare instances of a type for sorting\npurposes. A type that implements `PartialOrd` can be used with the `<`, `>`,\n`<=`, and `>=` operators. You can only apply the `PartialOrd` trait to types\nthat also implement `PartialEq`.\n\nDeriving `PartialOrd` implements the `partial_cmp` method, which returns an\n`Option<Ordering>` that will be `None` when the values given don’t produce an\nordering. An example of a value that doesn’t produce an ordering, even though\nmost values of that type can be compared, is the not-a-number (`NaN`) floating\npoint value. Calling `partial_cmp` with any floating point number and the `NaN`\nfloating point value will return `None`.\n\nWhen derived on structs, `PartialOrd` compares two instances by comparing the\nvalue in each field in the order in which the fields appear in the struct\ndefinition. When derived on enums, variants of the enum declared earlier in the\nenum definition are considered less than the variants listed later.\n\nThe `PartialOrd` trait is required, for example, for the `gen_range` method\nfrom the `rand` crate that generates a random value in the range specified by a\nrange expression.\n\nThe `Ord` trait allows you to know that for any two values of the annotated\ntype, a valid ordering will exist. The `Ord` trait implements the `cmp` method,\nwhich returns an `Ordering` rather than an `Option<Ordering>` because a valid\nordering will always be possible. You can only apply the `Ord` trait to types\nthat also implement `PartialOrd` and `Eq` (and `Eq` requires `PartialEq`). When\nderived on structs and enums, `cmp` behaves the same way as the derived\nimplementation for `partial_cmp` does with `PartialOrd`.\n\nAn example of when `Ord` is required is when storing values in a `BTreeSet<T>`,\na data structure that stores data based on the sort order of the values.\n\n### `Clone` and `Copy` for Duplicating Values\n\nThe `Clone` trait allows you to explicitly create a deep copy of a value, and\nthe duplication process might involve running arbitrary code and copying heap\ndata. See the [“Ways Variables and Data Interact:\nClone”][ways-variables-and-data-interact-clone]<!-- ignore --> section in\nChapter 4 for more information on `Clone`.\n\nDeriving `Clone` implements the `clone` method, which when implemented for the\nwhole type, calls `clone` on each of the parts of the type. This means all the\nfields or values in the type must also implement `Clone` to derive `Clone`.\n\nAn example of when `Clone` is required is when calling the `to_vec` method on a\nslice. The slice doesn’t own the type instances it contains, but the vector\nreturned from `to_vec` will need to own its instances, so `to_vec` calls\n`clone` on each item. Thus, the type stored in the slice must implement `Clone`.\n\nThe `Copy` trait allows you to duplicate a value by only copying bits stored on\nthe stack; no arbitrary code is necessary. See the [“Stack-Only Data:\nCopy”][stack-only-data-copy]<!-- ignore --> section in Chapter 4 for more\ninformation on `Copy`.\n\nThe `Copy` trait doesn’t define any methods to prevent programmers from\noverloading those methods and violating the assumption that no arbitrary code\nis being run. That way, all programmers can assume that copying a value will be\nvery fast.\n\nYou can derive `Copy` on any type whose parts all implement `Copy`. A type that\nimplements `Copy` must also implement `Clone`, because a type that implements\n`Copy` has a trivial implementation of `Clone` that performs the same task as\n`Copy`.\n\nThe `Copy` trait is rarely required; types that implement `Copy` have\noptimizations available, meaning you don’t have to call `clone`, which makes\nthe code more concise.\n\nEverything possible with `Copy` you can also accomplish with `Clone`, but the\ncode might be slower or have to use `clone` in places.\n\n### `Hash` for Mapping a Value to a Value of Fixed Size\n\nThe `Hash` trait allows you to take an instance of a type of arbitrary size and\nmap that instance to a value of fixed size using a hash function. Deriving\n`Hash` implements the `hash` method. The derived implementation of the `hash`\nmethod combines the result of calling `hash` on each of the parts of the type,\nmeaning all fields or values must also implement `Hash` to derive `Hash`.\n\nAn example of when `Hash` is required is in storing keys in a `HashMap<K, V>`\nto store data efficiently.\n\n### `Default` for Default Values\n\nThe `Default` trait allows you to create a default value for a type. Deriving\n`Default` implements the `default` function. The derived implementation of the\n`default` function calls the `default` function on each part of the type,\nmeaning all fields or values in the type must also implement `Default` to\nderive `Default`.\n\nThe `Default::default` function is commonly used in combination with the struct\nupdate syntax discussed in the [“Creating Instances From Other Instances With\nStruct Update\nSyntax”][creating-instances-from-other-instances-with-struct-update-syntax]<!-- ignore -->\nsection in Chapter 5. You can customize a few fields of a struct and then\nset and use a default value for the rest of the fields by using\n`..Default::default()`.\n\nThe `Default` trait is required when you use the method `unwrap_or_default` on\n`Option<T>` instances, for example. If the `Option<T>` is `None`, the method\n`unwrap_or_default` will return the result of `Default::default` for the type\n`T` stored in the `Option<T>`.\n\n[creating-instances-from-other-instances-with-struct-update-syntax]:\nch05-01-defining-structs.html#creating-instances-from-other-instances-with-struct-update-syntax\n[stack-only-data-copy]:\nch04-01-what-is-ownership.html#stack-only-data-copy\n[ways-variables-and-data-interact-clone]:\nch04-01-what-is-ownership.html#ways-variables-and-data-interact-clone\n[macros]: ch19-06-macros.html#macros\n",
          "document_id": 4
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "With what command can I install clippy?",
              "id": 193,
              "answers": [
                {
                  "answer_id": 195,
                  "document_id": 5,
                  "question_id": 193,
                  "text": "rustup component add clippy",
                  "answer_start": 3053,
                  "answer_end": 3080,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What tool can I use for code reformatting?",
              "id": 185,
              "answers": [
                {
                  "answer_id": 186,
                  "document_id": 5,
                  "question_id": 185,
                  "text": "rustfmt",
                  "answer_start": 291,
                  "answer_end": 298,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I install rustfmt?",
              "id": 186,
              "answers": [
                {
                  "answer_id": 187,
                  "document_id": 5,
                  "question_id": 186,
                  "text": "$ rustup component add rustfmt",
                  "answer_start": 571,
                  "answer_end": 601,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What can I do with cargo fmt command?",
              "id": 187,
              "answers": [
                {
                  "answer_id": 189,
                  "document_id": 5,
                  "question_id": 187,
                  "text": " reformats all the Rust code in the current crate",
                  "answer_start": 812,
                  "answer_end": 861,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What can I do with rustfix tool?",
              "id": 188,
              "answers": [
                {
                  "answer_id": 190,
                  "document_id": 5,
                  "question_id": 188,
                  "text": "automatically fix\ncompiler warnings that have a clear way to correct the problem",
                  "answer_start": 1141,
                  "answer_end": 1221,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what tool can I fix warnings?",
              "id": 189,
              "answers": [
                {
                  "answer_id": 191,
                  "document_id": 5,
                  "question_id": 189,
                  "text": "rustfix",
                  "answer_start": 1084,
                  "answer_end": 1091,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what command can I make my code suitable for different Rust editions?",
              "id": 190,
              "answers": [
                {
                  "answer_id": 192,
                  "document_id": 5,
                  "question_id": 190,
                  "text": "cargo fix",
                  "answer_start": 2734,
                  "answer_end": 2743,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What tool can I use to avoid common mistakes?",
              "id": 191,
              "answers": [
                {
                  "answer_id": 193,
                  "document_id": 5,
                  "question_id": 191,
                  "text": "Clippy",
                  "answer_start": 2879,
                  "answer_end": 2885,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "For what can I use Clippy?",
              "id": 192,
              "answers": [
                {
                  "answer_id": 194,
                  "document_id": 5,
                  "question_id": 192,
                  "text": "to analyze your code so you can catch\ncommon mistakes and improve your Rust code",
                  "answer_start": 2916,
                  "answer_end": 2996,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I run clippy?",
              "id": 194,
              "answers": [
                {
                  "answer_id": 196,
                  "document_id": 5,
                  "question_id": 194,
                  "text": "cargo clippy",
                  "answer_start": 3165,
                  "answer_end": 3177,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What should be used for Rust IDE integration?",
              "id": 195,
              "answers": [
                {
                  "answer_id": 197,
                  "document_id": 5,
                  "question_id": 195,
                  "text": "rust-analyzer",
                  "answer_start": 4622,
                  "answer_end": 4635,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## Appendix D - Useful Development Tools\n\nIn this appendix, we talk about some useful development tools that the Rust\nproject provides. We’ll look at automatic formatting, quick ways to apply\nwarning fixes, a linter, and integrating with IDEs.\n\n### Automatic Formatting with `rustfmt`\n\nThe `rustfmt` tool reformats your code according to the community code style.\nMany collaborative projects use `rustfmt` to prevent arguments about which\nstyle to use when writing Rust: everyone formats their code using the tool.\n\nTo install `rustfmt`, enter the following:\n\n```console\n$ rustup component add rustfmt\n```\n\nThis command gives you `rustfmt` and `cargo-fmt`, similar to how Rust gives you\nboth `rustc` and `cargo`. To format any Cargo project, enter the following:\n\n```console\n$ cargo fmt\n```\n\nRunning this command reformats all the Rust code in the current crate. This\nshould only change the code style, not the code semantics. For more information\non `rustfmt`, see [its documentation][rustfmt].\n\n[rustfmt]: https://github.com/rust-lang/rustfmt\n\n### Fix Your Code with `rustfix`\n\nThe rustfix tool is included with Rust installations and can automatically fix\ncompiler warnings that have a clear way to correct the problem that’s likely\nwhat you want. It’s likely you’ve seen compiler warnings before. For example,\nconsider this code:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn do_something() {}\n\nfn main() {\n    for i in 0..100 {\n        do_something();\n    }\n}\n```\n\nHere, we’re calling the `do_something` function 100 times, but we never use the\nvariable `i` in the body of the `for` loop. Rust warns us about that:\n\n```console\n$ cargo build\n   Compiling myprogram v0.1.0 (file:///projects/myprogram)\nwarning: unused variable: `i`\n --> src/main.rs:4:9\n  |\n4 |     for i in 0..100 {\n  |         ^ help: consider using `_i` instead\n  |\n  = note: #[warn(unused_variables)] on by default\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.50s\n```\n\nThe warning suggests that we use `_i` as a name instead: the underscore\nindicates that we intend for this variable to be unused. We can automatically\napply that suggestion using the `rustfix` tool by running the command `cargo\nfix`:\n\n```console\n$ cargo fix\n    Checking myprogram v0.1.0 (file:///projects/myprogram)\n      Fixing src/main.rs (1 fix)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.59s\n```\n\nWhen we look at *src/main.rs* again, we’ll see that `cargo fix` has changed the\ncode:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn do_something() {}\n\nfn main() {\n    for _i in 0..100 {\n        do_something();\n    }\n}\n```\n\nThe `for` loop variable is now named `_i`, and the warning no longer appears.\n\nYou can also use the `cargo fix` command to transition your code between\ndifferent Rust editions. Editions are covered in Appendix E.\n\n### More Lints with Clippy\n\nThe Clippy tool is a collection of lints to analyze your code so you can catch\ncommon mistakes and improve your Rust code.\n\nTo install Clippy, enter the following:\n\n```console\n$ rustup component add clippy\n```\n\nTo run Clippy’s lints on any Cargo project, enter the following:\n\n```console\n$ cargo clippy\n```\n\nFor example, say you write a program that uses an approximation of a\nmathematical constant, such as pi, as this program does:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let x = 3.1415;\n    let r = 8.0;\n    println!(\"the area of the circle is {}\", x * r * r);\n}\n```\n\nRunning `cargo clippy` on this project results in this error:\n\n```text\nerror: approximate value of `f{32, 64}::consts::PI` found\n --> src/main.rs:2:13\n  |\n2 |     let x = 3.1415;\n  |             ^^^^^^\n  |\n  = note: `#[deny(clippy::approx_constant)]` on by default\n  = help: consider using the constant directly\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant\n```\n\nThis error lets you know that Rust already has a more precise `PI` constant\ndefined, and that your program would be more correct if you used the constant\ninstead. You would then change your code to use the `PI` constant. The\nfollowing code doesn’t result in any errors or warnings from Clippy:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let x = std::f64::consts::PI;\n    let r = 8.0;\n    println!(\"the area of the circle is {}\", x * r * r);\n}\n```\n\nFor more information on Clippy, see [its documentation][clippy].\n\n[clippy]: https://github.com/rust-lang/rust-clippy\n\n### IDE Integration Using `rust-analyzer`\n\nTo help IDE integration, the Rust community recommends using\n[`rust-analyzer`][rust-analyzer]<!-- ignore -->. This tool is a set of\ncompiler-centric utilities that speaks the [Language Server Protocol][lsp]<!--\nignore -->, which is a specification for IDEs and programming languages to\ncommunicate with each other. Different clients can use `rust-analyzer`, such as\n[the Rust analyzer plug-in for Visual Studio Code][vscode].\n\n[lsp]: http://langserver.org/\n[vscode]: https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer\n\nVisit the `rust-analyzer` project’s [home page][rust-analyzer]<!-- ignore -->\nfor installation instructions, then install the language server support in your\nparticular IDE. Your IDE will gain abilities such as autocompletion, jump to\ndefinition, and inline errors.\n\n[rust-analyzer]: https://rust-analyzer.github.io\n",
          "document_id": 5
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "What is the purpose of editions?",
              "id": 196,
              "answers": [
                {
                  "answer_id": 198,
                  "document_id": 6,
                  "question_id": 196,
                  "text": "* For active Rust users, a new edition brings together incremental changes into\n  an easy-to-understand package.\n* For non-users, a new edition signals that some major advancements have\n  landed, which might make Rust worth another look.\n* For those developing Rust, a new edition provides a rallying point for the\n  project as a whole.\n",
                  "answer_start": 906,
                  "answer_end": 1243,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What release cycle has Rust?",
              "id": 197,
              "answers": [
                {
                  "answer_id": 199,
                  "document_id": 6,
                  "question_id": 197,
                  "text": "six-week",
                  "answer_start": 214,
                  "answer_end": 222,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How often is new Rust edition released?",
              "id": 198,
              "answers": [
                {
                  "answer_id": 200,
                  "document_id": 6,
                  "question_id": 198,
                  "text": "Every two or three years",
                  "answer_start": 586,
                  "answer_end": 610,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the purpose of new editions?",
              "id": 199,
              "answers": [
                {
                  "answer_id": 202,
                  "document_id": 6,
                  "question_id": 199,
                  "text": "Each\nedition brings together the features that have landed into a clear package with\nfully updated documentation and tooling",
                  "answer_start": 657,
                  "answer_end": 781,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How many Rust editions is available?",
              "id": 200,
              "answers": [
                {
                  "answer_id": 203,
                  "document_id": 6,
                  "question_id": 200,
                  "text": "three",
                  "answer_start": 1273,
                  "answer_end": 1278,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which Rust editions are available?",
              "id": 201,
              "answers": [
                {
                  "answer_id": 204,
                  "document_id": 6,
                  "question_id": 201,
                  "text": "Rust 2015, Rust\n2018, and Rust 2021",
                  "answer_start": 1308,
                  "answer_end": 1343,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What indicates what edition should I use?",
              "id": 202,
              "answers": [
                {
                  "answer_id": 205,
                  "document_id": 6,
                  "question_id": 202,
                  "text": "The `edition` key in *Cargo.toml*",
                  "answer_start": 1399,
                  "answer_end": 1432,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the default edition?",
              "id": 203,
              "answers": [
                {
                  "answer_id": 206,
                  "document_id": 6,
                  "question_id": 203,
                  "text": "2015`",
                  "answer_start": 1533,
                  "answer_end": 1538,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## Appendix E - Editions\n\nIn Chapter 1, you saw that `cargo new` adds a bit of metadata to your\n*Cargo.toml* file about an edition. This appendix talks about what that means!\n\nThe Rust language and compiler have a six-week release cycle, meaning users get\na constant stream of new features. Other programming languages release larger\nchanges less often; Rust releases smaller updates more frequently. After a\nwhile, all of these tiny changes add up. But from release to release, it can be\ndifficult to look back and say, “Wow, between Rust 1.10 and Rust 1.31, Rust has\nchanged a lot!”\n\nEvery two or three years, the Rust team produces a new Rust *edition*. Each\nedition brings together the features that have landed into a clear package with\nfully updated documentation and tooling. New editions ship as part of the usual\nsix-week release process.\n\nEditions serve different purposes for different people:\n\n* For active Rust users, a new edition brings together incremental changes into\n  an easy-to-understand package.\n* For non-users, a new edition signals that some major advancements have\n  landed, which might make Rust worth another look.\n* For those developing Rust, a new edition provides a rallying point for the\n  project as a whole.\n\nAt the time of this writing, three Rust editions are available: Rust 2015, Rust\n2018, and Rust 2021. This book is written using Rust 2021 edition idioms.\n\nThe `edition` key in *Cargo.toml* indicates which edition the compiler should\nuse for your code. If the key doesn’t exist, Rust uses `2015` as the edition\nvalue for backward compatibility reasons.\n\nEach project can opt in to an edition other than the default 2015 edition.\nEditions can contain incompatible changes, such as including a new keyword that\nconflicts with identifiers in code. However, unless you opt in to those\nchanges, your code will continue to compile even as you upgrade the Rust\ncompiler version you use.\n\nAll Rust compiler versions support any edition that existed prior to that\ncompiler’s release, and they can link crates of any supported editions\ntogether. Edition changes only affect the way the compiler initially parses\ncode. Therefore, if you’re using Rust 2015 and one of your dependencies uses\nRust 2018, your project will compile and be able to use that dependency. The\nopposite situation, where your project uses Rust 2018 and a dependency uses\nRust 2015, works as well.\n\nTo be clear: most features will be available on all editions. Developers using\nany Rust edition will continue to see improvements as new stable releases are\nmade. However, in some cases, mainly when new keywords are added, some new\nfeatures might only be available in later editions. You will need to switch\neditions if you want to take advantage of such features.\n\nFor more details, the [*Edition\nGuide*](https://doc.rust-lang.org/stable/edition-guide/) is a complete book\nabout editions that enumerates the differences between editions and explains\nhow to automatically upgrade your code to a new edition via `cargo fix`.\n",
          "document_id": 6
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "In what languages can I read about Rust?",
              "id": 204,
              "answers": [
                {
                  "answer_id": 207,
                  "document_id": 7,
                  "question_id": 204,
                  "text": "- [Português](https://github.com/rust-br/rust-book-pt-br) (BR)\n- [Português](https://github.com/nunojesus/rust-book-pt-pt) (PT)\n- [简体中文](https://github.com/KaiserY/trpl-zh-cn)\n- [正體中文](https://github.com/rust-tw/book-tw)\n- [Українська](https://github.com/pavloslav/rust-book-uk-ua)\n- [Español](https://github.com/thecodix/book), [alternate](https://github.com/ManRR/rust-book-es)\n- [Italiano](https://github.com/EmanueleGurini/book_it)\n- [Русский](https://github.com/rust-lang-ru/book)\n- [한국어](https://github.com/rinthel/rust-lang-book-ko)\n- [日本語](https://github.com/rust-lang-ja/book-ja)\n- [Français](https://github.com/Jimskapt/rust-book-fr)\n- [Polski](https://github.com/paytchoo/book-pl)\n- [Cebuano](https://github.com/agentzero1/book)\n- [Tagalog](https://github.com/josephace135/book)\n- [Esperanto](https://github.com/psychoslave/Rust-libro)\n- [ελληνική](https://github.com/TChatzigiannakis/rust-book-greek)\n- [Svenska](https://github.com/sebras/book)\n- [Farsi](https://github.com/pomokhtari/rust-book-fa)\n- [Deutsch](https://github.com/rust-lang-de/rustbook-de)\n- [हिंदी](https://github.com/venkatarun95/rust-book-hindi)\n- [ไทย](https://github.com/rust-lang-th/book-th)\n- [Danske](https://github.com/DanKHansen/book-dk)",
                  "answer_start": 296,
                  "answer_end": 1521,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## Appendix F: Translations of the Book\n\nFor resources in languages other than English. Most are still in progress; see\n[the Translations label][label] to help or let us know about a new translation!\n\n[label]: https://github.com/rust-lang/book/issues?q=is%3Aopen+is%3Aissue+label%3ATranslations\n\n- [Português](https://github.com/rust-br/rust-book-pt-br) (BR)\n- [Português](https://github.com/nunojesus/rust-book-pt-pt) (PT)\n- [简体中文](https://github.com/KaiserY/trpl-zh-cn)\n- [正體中文](https://github.com/rust-tw/book-tw)\n- [Українська](https://github.com/pavloslav/rust-book-uk-ua)\n- [Español](https://github.com/thecodix/book), [alternate](https://github.com/ManRR/rust-book-es)\n- [Italiano](https://github.com/EmanueleGurini/book_it)\n- [Русский](https://github.com/rust-lang-ru/book)\n- [한국어](https://github.com/rinthel/rust-lang-book-ko)\n- [日本語](https://github.com/rust-lang-ja/book-ja)\n- [Français](https://github.com/Jimskapt/rust-book-fr)\n- [Polski](https://github.com/paytchoo/book-pl)\n- [Cebuano](https://github.com/agentzero1/book)\n- [Tagalog](https://github.com/josephace135/book)\n- [Esperanto](https://github.com/psychoslave/Rust-libro)\n- [ελληνική](https://github.com/TChatzigiannakis/rust-book-greek)\n- [Svenska](https://github.com/sebras/book)\n- [Farsi](https://github.com/pomokhtari/rust-book-fa)\n- [Deutsch](https://github.com/rust-lang-de/rustbook-de)\n- [हिंदी](https://github.com/venkatarun95/rust-book-hindi)\n- [ไทย](https://github.com/rust-lang-th/book-th)\n- [Danske](https://github.com/DanKHansen/book-dk)\n",
          "document_id": 7
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "Does Rust care about the stability of code?",
              "id": 205,
              "answers": [
                {
                  "answer_id": 208,
                  "document_id": 8,
                  "question_id": 205,
                  "text": "Rust cares a *lot* about the stability of your code",
                  "answer_start": 189,
                  "answer_end": 240,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How many release channels does rust have?",
              "id": 206,
              "answers": [
                {
                  "answer_id": 209,
                  "document_id": 8,
                  "question_id": 206,
                  "text": "three",
                  "answer_start": 1132,
                  "answer_end": 1137,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What release channels does rust have?",
              "id": 207,
              "answers": [
                {
                  "answer_id": 210,
                  "document_id": 8,
                  "question_id": 207,
                  "text": "* Nightly\n* Beta\n* Stable",
                  "answer_start": 1168,
                  "answer_end": 1193,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What release channels should I use if I want experimental features?",
              "id": 208,
              "answers": [
                {
                  "answer_id": 211,
                  "document_id": 8,
                  "question_id": 208,
                  "text": "nightly or beta",
                  "answer_start": 1314,
                  "answer_end": 1329,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What channel are most Rust developers using?",
              "id": 209,
              "answers": [
                {
                  "answer_id": 212,
                  "document_id": 8,
                  "question_id": 209,
                  "text": "stable",
                  "answer_start": 1234,
                  "answer_end": 1240,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How often is new nightly version produced?",
              "id": 210,
              "answers": [
                {
                  "answer_id": 213,
                  "document_id": 8,
                  "question_id": 210,
                  "text": "Each night",
                  "answer_start": 1644,
                  "answer_end": 1654,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How often is new version released?",
              "id": 211,
              "answers": [
                {
                  "answer_id": 214,
                  "document_id": 8,
                  "question_id": 211,
                  "text": "Every six weeks",
                  "answer_start": 1902,
                  "answer_end": 1917,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "For what is a technique features flags used?",
              "id": 212,
              "answers": [
                {
                  "answer_id": 215,
                  "document_id": 8,
                  "question_id": 212,
                  "text": "to determine what features are enabled in a\ngiven release",
                  "answer_start": 4861,
                  "answer_end": 4918,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Where can I find documentation for nightly-only features?",
              "id": 213,
              "answers": [
                {
                  "answer_id": 216,
                  "document_id": 8,
                  "question_id": 213,
                  "text": "online",
                  "answer_start": 5883,
                  "answer_end": 5889,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Who can write Request for Comments?",
              "id": 214,
              "answers": [
                {
                  "answer_id": 217,
                  "document_id": 8,
                  "question_id": 214,
                  "text": "Anyone",
                  "answer_start": 7439,
                  "answer_end": 7445,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Where can I find list of Rust teams?",
              "id": 215,
              "answers": [
                {
                  "answer_id": 218,
                  "document_id": 8,
                  "question_id": 215,
                  "text": "https://www.rust-lang.org/governance",
                  "answer_start": 7637,
                  "answer_end": 7673,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## Appendix G - How Rust is Made and “Nightly Rust”\n\nThis appendix is about how Rust is made and how that affects you as a Rust\ndeveloper.\n\n### Stability Without Stagnation\n\nAs a language, Rust cares a *lot* about the stability of your code. We want\nRust to be a rock-solid foundation you can build on, and if things were\nconstantly changing, that would be impossible. At the same time, if we can’t\nexperiment with new features, we may not find out important flaws until after\ntheir release, when we can no longer change things.\n\nOur solution to this problem is what we call “stability without stagnation”,\nand our guiding principle is this: you should never have to fear upgrading to a\nnew version of stable Rust. Each upgrade should be painless, but should also\nbring you new features, fewer bugs, and faster compile times.\n\n### Choo, Choo! Release Channels and Riding the Trains\n\nRust development operates on a *train schedule*. That is, all development is\ndone on the `master` branch of the Rust repository. Releases follow a software\nrelease train model, which has been used by Cisco IOS and other software\nprojects. There are three *release channels* for Rust:\n\n* Nightly\n* Beta\n* Stable\n\nMost Rust developers primarily use the stable channel, but those who want to\ntry out experimental new features may use nightly or beta.\n\nHere’s an example of how the development and release process works: let’s\nassume that the Rust team is working on the release of Rust 1.5. That release\nhappened in December of 2015, but it will provide us with realistic version\nnumbers. A new feature is added to Rust: a new commit lands on the `master`\nbranch. Each night, a new nightly version of Rust is produced. Every day is a\nrelease day, and these releases are created by our release infrastructure\nautomatically. So as time passes, our releases look like this, once a night:\n\n```text\nnightly: * - - * - - *\n```\n\nEvery six weeks, it’s time to prepare a new release! The `beta` branch of the\nRust repository branches off from the `master` branch used by nightly. Now,\nthere are two releases:\n\n```text\nnightly: * - - * - - *\n                     |\nbeta:                *\n```\n\nMost Rust users do not use beta releases actively, but test against beta in\ntheir CI system to help Rust discover possible regressions. In the meantime,\nthere’s still a nightly release every night:\n\n```text\nnightly: * - - * - - * - - * - - *\n                     |\nbeta:                *\n```\n\nLet’s say a regression is found. Good thing we had some time to test the beta\nrelease before the regression snuck into a stable release! The fix is applied\nto `master`, so that nightly is fixed, and then the fix is backported to the\n`beta` branch, and a new release of beta is produced:\n\n```text\nnightly: * - - * - - * - - * - - * - - *\n                     |\nbeta:                * - - - - - - - - *\n```\n\nSix weeks after the first beta was created, it’s time for a stable release! The\n`stable` branch is produced from the `beta` branch:\n\n```text\nnightly: * - - * - - * - - * - - * - - * - * - *\n                     |\nbeta:                * - - - - - - - - *\n                                       |\nstable:                                *\n```\n\nHooray! Rust 1.5 is done! However, we’ve forgotten one thing: because the six\nweeks have gone by, we also need a new beta of the *next* version of Rust, 1.6.\nSo after `stable` branches off of `beta`, the next version of `beta` branches\noff of `nightly` again:\n\n```text\nnightly: * - - * - - * - - * - - * - - * - * - *\n                     |                         |\nbeta:                * - - - - - - - - *       *\n                                       |\nstable:                                *\n```\n\nThis is called the “train model” because every six weeks, a release “leaves the\nstation”, but still has to take a journey through the beta channel before it\narrives as a stable release.\n\nRust releases every six weeks, like clockwork. If you know the date of one Rust\nrelease, you can know the date of the next one: it’s six weeks later. A nice\naspect of having releases scheduled every six weeks is that the next train is\ncoming soon. If a feature happens to miss a particular release, there’s no need\nto worry: another one is happening in a short time! This helps reduce pressure\nto sneak possibly unpolished features in close to the release deadline.\n\nThanks to this process, you can always check out the next build of Rust and\nverify for yourself that it’s easy to upgrade to: if a beta release doesn’t\nwork as expected, you can report it to the team and get it fixed before the\nnext stable release happens! Breakage in a beta release is relatively rare, but\n`rustc` is still a piece of software, and bugs do exist.\n\n### Unstable Features\n\nThere’s one more catch with this release model: unstable features. Rust uses a\ntechnique called “feature flags” to determine what features are enabled in a\ngiven release. If a new feature is under active development, it lands on\n`master`, and therefore, in nightly, but behind a *feature flag*. If you, as a\nuser, wish to try out the work-in-progress feature, you can, but you must be\nusing a nightly release of Rust and annotate your source code with the\nappropriate flag to opt in.\n\nIf you’re using a beta or stable release of Rust, you can’t use any feature\nflags. This is the key that allows us to get practical use with new features\nbefore we declare them stable forever. Those who wish to opt into the bleeding\nedge can do so, and those who want a rock-solid experience can stick with\nstable and know that their code won’t break. Stability without stagnation.\n\nThis book only contains information about stable features, as in-progress\nfeatures are still changing, and surely they’ll be different between when this\nbook was written and when they get enabled in stable builds. You can find\ndocumentation for nightly-only features online.\n\n### Rustup and the Role of Rust Nightly\n\nRustup makes it easy to change between different release channels of Rust, on a\nglobal or per-project basis. By default, you’ll have stable Rust installed. To\ninstall nightly, for example:\n\n```console\n$ rustup toolchain install nightly\n```\n\nYou can see all of the *toolchains* (releases of Rust and associated\ncomponents) you have installed with `rustup` as well. Here’s an example on one\nof your authors’ Windows computer:\n\n```powershell\n> rustup toolchain list\nstable-x86_64-pc-windows-msvc (default)\nbeta-x86_64-pc-windows-msvc\nnightly-x86_64-pc-windows-msvc\n```\n\nAs you can see, the stable toolchain is the default. Most Rust users use stable\nmost of the time. You might want to use stable most of the time, but use\nnightly on a specific project, because you care about a cutting-edge feature.\nTo do so, you can use `rustup override` in that project’s directory to set the\nnightly toolchain as the one `rustup` should use when you’re in that directory:\n\n```console\n$ cd ~/projects/needs-nightly\n$ rustup override set nightly\n```\n\nNow, every time you call `rustc` or `cargo` inside of\n*~/projects/needs-nightly*, `rustup` will make sure that you are using nightly\nRust, rather than your default of stable Rust. This comes in handy when you\nhave a lot of Rust projects!\n\n### The RFC Process and Teams\n\nSo how do you learn about these new features? Rust’s development model follows\na *Request For Comments (RFC) process*. If you’d like an improvement in Rust,\nyou can write up a proposal, called an RFC.\n\nAnyone can write RFCs to improve Rust, and the proposals are reviewed and\ndiscussed by the Rust team, which is comprised of many topic subteams. There’s\na full list of the teams [on Rust’s\nwebsite](https://www.rust-lang.org/governance), which includes teams for\neach area of the project: language design, compiler implementation,\ninfrastructure, documentation, and more. The appropriate team reads the\nproposal and the comments, writes some comments of their own, and eventually,\nthere’s consensus to accept or reject the feature.\n\nIf the feature is accepted, an issue is opened on the Rust repository, and\nsomeone can implement it. The person who implements it very well may not be the\nperson who proposed the feature in the first place! When the implementation is\nready, it lands on the `master` branch behind a feature gate, as we discussed\nin the [“Unstable Features”](#unstable-features)<!-- ignore --> section.\n\nAfter some time, once Rust developers who use nightly releases have been able\nto try out the new feature, team members will discuss the feature, how it’s\nworked out on nightly, and decide if it should make it into stable Rust or not.\nIf the decision is to move forward, the feature gate is removed, and the\nfeature is now considered stable! It rides the trains into a new stable release\nof Rust.\n",
          "document_id": 8
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "In what formats is The Rust Book available?",
              "id": 216,
              "answers": [
                {
                  "answer_id": 219,
                  "document_id": 9,
                  "question_id": 216,
                  "text": " in print and ebook",
                  "answer_start": 116,
                  "answer_end": 135,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Does Rust help with productivity?",
              "id": 217,
              "answers": [
                {
                  "answer_id": 220,
                  "document_id": 9,
                  "question_id": 217,
                  "text": "Rust is proving to be a productive tool",
                  "answer_start": 933,
                  "answer_end": 972,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What part of Rust ecosystem is preventing bugs?",
              "id": 218,
              "answers": [
                {
                  "answer_id": 221,
                  "document_id": 9,
                  "question_id": 218,
                  "text": "the compiler",
                  "answer_start": 1260,
                  "answer_end": 1272,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is cargo?",
              "id": 219,
              "answers": [
                {
                  "answer_id": 224,
                  "document_id": 9,
                  "question_id": 219,
                  "text": "included dependency manager and build tool,",
                  "answer_start": 1601,
                  "answer_end": 1644,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What tool is dependency manager?",
              "id": 220,
              "answers": [
                {
                  "answer_id": 223,
                  "document_id": 9,
                  "question_id": 220,
                  "text": "Cargo",
                  "answer_start": 1590,
                  "answer_end": 1595,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the name of Rust build tool?",
              "id": 221,
              "answers": [
                {
                  "answer_id": 225,
                  "document_id": 9,
                  "question_id": 221,
                  "text": "Cargo",
                  "answer_start": 1590,
                  "answer_end": 1595,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What tool is used for code styling?",
              "id": 222,
              "answers": [
                {
                  "answer_id": 226,
                  "document_id": 9,
                  "question_id": 222,
                  "text": "Rustfmt",
                  "answer_start": 1757,
                  "answer_end": 1764,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is helping with IDE integration?",
              "id": 223,
              "answers": [
                {
                  "answer_id": 227,
                  "document_id": 9,
                  "question_id": 223,
                  "text": "The Rust Language Server",
                  "answer_start": 1838,
                  "answer_end": 1862,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is Rust used for?",
              "id": 224,
              "answers": [
                {
                  "answer_id": 228,
                  "document_id": 9,
                  "question_id": 224,
                  "text": "command line tools, web services, DevOps tooling, embedded\ndevices, audio and video analysis and transcoding, cryptocurrencies,\nbioinformatics, search engines, Internet of Things applications, machine\nlearning, and even major parts of the Firefox web browser.",
                  "answer_start": 2610,
                  "answer_end": 2869,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the main purpose of Rust?",
              "id": 225,
              "answers": [
                {
                  "answer_id": 229,
                  "document_id": 9,
                  "question_id": 225,
                  "text": "to eliminate the trade-offs that programmers have accepted for\ndecades by providing safety *and* productivity, speed *and* ergonomics",
                  "answer_start": 3841,
                  "answer_end": 3974,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "# Introduction\n\n> Note: This edition of the book is the same as [The Rust Programming\n> Language][nsprust] available in print and ebook format from [No Starch\n> Press][nsp].\n\n[nsprust]: https://nostarch.com/rust-programming-language-2nd-edition\n[nsp]: https://nostarch.com/\n\nWelcome to *The Rust Programming Language*, an introductory book about Rust.\nThe Rust programming language helps you write faster, more reliable software.\nHigh-level ergonomics and low-level control are often at odds in programming\nlanguage design; Rust challenges that conflict. Through balancing powerful\ntechnical capacity and a great developer experience, Rust gives you the option\nto control low-level details (such as memory usage) without all the hassle\ntraditionally associated with such control.\n\n## Who Rust Is For\n\nRust is ideal for many people for a variety of reasons. Let’s look at a few of\nthe most important groups.\n\n### Teams of Developers\n\nRust is proving to be a productive tool for collaborating among large teams of\ndevelopers with varying levels of systems programming knowledge. Low-level code\nis prone to various subtle bugs, which in most other languages can be caught\nonly through extensive testing and careful code review by experienced\ndevelopers. In Rust, the compiler plays a gatekeeper role by refusing to\ncompile code with these elusive bugs, including concurrency bugs. By working\nalongside the compiler, the team can spend their time focusing on the program’s\nlogic rather than chasing down bugs.\n\nRust also brings contemporary developer tools to the systems programming world:\n\n* Cargo, the included dependency manager and build tool, makes adding,\n  compiling, and managing dependencies painless and consistent across the Rust\n  ecosystem.\n* The Rustfmt formatting tool ensures a consistent coding style across\n  developers.\n* The Rust Language Server powers Integrated Development Environment (IDE)\n  integration for code completion and inline error messages.\n\nBy using these and other tools in the Rust ecosystem, developers can be\nproductive while writing systems-level code.\n\n### Students\n\nRust is for students and those who are interested in learning about systems\nconcepts. Using Rust, many people have learned about topics like operating\nsystems development. The community is very welcoming and happy to answer\nstudent questions. Through efforts such as this book, the Rust teams want to\nmake systems concepts more accessible to more people, especially those new to\nprogramming.\n\n### Companies\n\nHundreds of companies, large and small, use Rust in production for a variety of\ntasks, including command line tools, web services, DevOps tooling, embedded\ndevices, audio and video analysis and transcoding, cryptocurrencies,\nbioinformatics, search engines, Internet of Things applications, machine\nlearning, and even major parts of the Firefox web browser.\n\n### Open Source Developers\n\nRust is for people who want to build the Rust programming language, community,\ndeveloper tools, and libraries. We’d love to have you contribute to the Rust\nlanguage.\n\n### People Who Value Speed and Stability\n\nRust is for people who crave speed and stability in a language. By speed, we\nmean both how quickly Rust code can run and the speed at which Rust lets you\nwrite programs. The Rust compiler’s checks ensure stability through feature\nadditions and refactoring. This is in contrast to the brittle legacy code in\nlanguages without these checks, which developers are often afraid to modify. By\nstriving for zero-cost abstractions, higher-level features that compile to\nlower-level code as fast as code written manually, Rust endeavors to make safe\ncode be fast code as well.\n\nThe Rust language hopes to support many other users as well; those mentioned\nhere are merely some of the biggest stakeholders. Overall, Rust’s greatest\nambition is to eliminate the trade-offs that programmers have accepted for\ndecades by providing safety *and* productivity, speed *and* ergonomics. Give\nRust a try and see if its choices work for you.\n\n## Who This Book Is For\n\nThis book assumes that you’ve written code in another programming language but\ndoesn’t make any assumptions about which one. We’ve tried to make the material\nbroadly accessible to those from a wide variety of programming backgrounds. We\ndon’t spend a lot of time talking about what programming *is* or how to think\nabout it. If you’re entirely new to programming, you would be better served by\nreading a book that specifically provides an introduction to programming.\n\n## How to Use This Book\n\nIn general, this book assumes that you’re reading it in sequence from front to\nback. Later chapters build on concepts in earlier chapters, and earlier\nchapters might not delve into details on a particular topic but will revisit\nthe topic in a later chapter.\n\nYou’ll find two kinds of chapters in this book: concept chapters and project\nchapters. In concept chapters, you’ll learn about an aspect of Rust. In project\nchapters, we’ll build small programs together, applying what you’ve learned so\nfar. Chapters 2, 12, and 20 are project chapters; the rest are concept chapters.\n\nChapter 1 explains how to install Rust, how to write a “Hello, world!” program,\nand how to use Cargo, Rust’s package manager and build tool. Chapter 2 is a\nhands-on introduction to writing a program in Rust, having you build up a\nnumber guessing game. Here we cover concepts at a high level, and later\nchapters will provide additional detail. If you want to get your hands dirty\nright away, Chapter 2 is the place for that. Chapter 3 covers Rust features\nthat are similar to those of other programming languages, and in Chapter 4\nyou’ll learn about Rust’s ownership system. If you’re a particularly meticulous\nlearner who prefers to learn every detail before moving on to the next, you\nmight want to skip Chapter 2 and go straight to Chapter 3, returning to Chapter\n2 when you’d like to work on a project applying the details you’ve learned.\n\nChapter 5 discusses structs and methods, and Chapter 6 covers enums, `match`\nexpressions, and the `if let` control flow construct. You’ll use structs and\nenums to make custom types in Rust.\n\nIn Chapter 7, you’ll learn about Rust’s module system and about privacy rules\nfor organizing your code and its public Application Programming Interface\n(API). Chapter 8 discusses some common collection data structures that the\nstandard library provides, such as vectors, strings, and hash maps. Chapter 9\nexplores Rust’s error-handling philosophy and techniques.\n\nChapter 10 digs into generics, traits, and lifetimes, which give you the power\nto define code that applies to multiple types. Chapter 11 is all about testing,\nwhich even with Rust’s safety guarantees is necessary to ensure your program’s\nlogic is correct. In Chapter 12, we’ll build our own implementation of a subset\nof functionality from the `grep` command line tool that searches for text\nwithin files. For this, we’ll use many of the concepts we discussed in the\nprevious chapters.\n\nChapter 13 explores closures and iterators: features of Rust that come from\nfunctional programming languages. In Chapter 14, we’ll examine Cargo in more\ndepth and talk about best practices for sharing your libraries with others.\nChapter 15 discusses smart pointers that the standard library provides and the\ntraits that enable their functionality.\n\nIn Chapter 16, we’ll walk through different models of concurrent programming\nand talk about how Rust helps you to program in multiple threads fearlessly.\nChapter 17 looks at how Rust idioms compare to object-oriented programming\nprinciples you might be familiar with.\n\nChapter 18 is a reference on patterns and pattern matching, which are powerful\nways of expressing ideas throughout Rust programs. Chapter 19 contains a\nsmorgasbord of advanced topics of interest, including unsafe Rust, macros, and\nmore about lifetimes, traits, types, functions, and closures.\n\nIn Chapter 20, we’ll complete a project in which we’ll implement a low-level\nmultithreaded web server!\n\nFinally, some appendices contain useful information about the language in a\nmore reference-like format. Appendix A covers Rust’s keywords, Appendix B\ncovers Rust’s operators and symbols, Appendix C covers derivable traits\nprovided by the standard library, Appendix D covers some useful development\ntools, and Appendix E explains Rust editions. In Appendix F, you can find\ntranslations of the book, and in Appendix G we’ll cover how Rust is made and\nwhat nightly Rust is.\n\nThere is no wrong way to read this book: if you want to skip ahead, go for it!\nYou might have to jump back to earlier chapters if you experience any\nconfusion. But do whatever works for you.\n\n<span id=\"ferris\"></span>\n\nAn important part of the process of learning Rust is learning how to read the\nerror messages the compiler displays: these will guide you toward working code.\nAs such, we’ll provide many examples that don’t compile along with the error\nmessage the compiler will show you in each situation. Know that if you enter\nand run a random example, it may not compile! Make sure you read the\nsurrounding text to see whether the example you’re trying to run is meant to\nerror. Ferris will also help you distinguish code that isn’t meant to work:\n\n| Ferris                                                                                                           | Meaning                                          |\n|------------------------------------------------------------------------------------------------------------------|--------------------------------------------------|\n| <img src=\"img/ferris/does_not_compile.svg\" class=\"ferris-explain\" alt=\"Ferris with a question mark\"/>            | This code does not compile!                      |\n| <img src=\"img/ferris/panics.svg\" class=\"ferris-explain\" alt=\"Ferris throwing up their hands\"/>                   | This code panics!                                |\n| <img src=\"img/ferris/not_desired_behavior.svg\" class=\"ferris-explain\" alt=\"Ferris with one claw up, shrugging\"/> | This code does not produce the desired behavior. |\n\nIn most situations, we’ll lead you to the correct version of any code that\ndoesn’t compile.\n\n## Source Code\n\nThe source files from which this book is generated can be found on\n[GitHub][book].\n\n[book]: https://github.com/rust-lang/book/tree/main/src\n",
          "document_id": 9
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "With what command can I download Rust?",
              "id": 226,
              "answers": [
                {
                  "answer_id": 230,
                  "document_id": 11,
                  "question_id": 226,
                  "text": "rustup",
                  "answer_start": 81,
                  "answer_end": 87,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I install rustup on linux and mac?",
              "id": 227,
              "answers": [
                {
                  "answer_id": 231,
                  "document_id": 11,
                  "question_id": 227,
                  "text": "curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh",
                  "answer_start": 1416,
                  "answer_end": 1478,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What will be displayed after installing rustup?",
              "id": 228,
              "answers": [
                {
                  "answer_id": 232,
                  "document_id": 11,
                  "question_id": 228,
                  "text": "Rust is installed now. Great!",
                  "answer_start": 1727,
                  "answer_end": 1756,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is linker?",
              "id": 229,
              "answers": [
                {
                  "answer_id": 233,
                  "document_id": 11,
                  "question_id": 229,
                  "text": "a program that Rust uses to join its\ncompiled outputs into one file",
                  "answer_start": 1802,
                  "answer_end": 1869,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How do we call a program that is joining compiled outputs into one file?",
              "id": 230,
              "answers": [
                {
                  "answer_id": 234,
                  "document_id": 11,
                  "question_id": 230,
                  "text": "linker",
                  "answer_start": 1784,
                  "answer_end": 1790,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I install rustup on Windows?",
              "id": 231,
              "answers": [
                {
                  "answer_id": 235,
                  "document_id": 11,
                  "question_id": 231,
                  "text": "go to [https://www.rust-lang.org/tools/install][install] and follow\nthe instructions",
                  "answer_start": 2429,
                  "answer_end": 2513,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I check if I installed Rust correctly?",
              "id": 232,
              "answers": [
                {
                  "answer_id": 236,
                  "document_id": 11,
                  "question_id": 232,
                  "text": "rustc --version",
                  "answer_start": 3238,
                  "answer_end": 3253,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What can I do if rustc command is not working?",
              "id": 233,
              "answers": [
                {
                  "answer_id": 237,
                  "document_id": 11,
                  "question_id": 233,
                  "text": "check that Rust is in your `%PATH%` system variable",
                  "answer_start": 3553,
                  "answer_end": 3604,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What should I do if Rust isn't working?",
              "id": 234,
              "answers": [
                {
                  "answer_id": 238,
                  "document_id": 11,
                  "question_id": 234,
                  "text": "Find out how to get in touch with other Rustaceans (a\nsilly nickname we call ourselves) on [the community page][community]",
                  "answer_start": 3881,
                  "answer_end": 4003,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I update rust with rustup?",
              "id": 235,
              "answers": [
                {
                  "answer_id": 239,
                  "document_id": 11,
                  "question_id": 235,
                  "text": "rustup update",
                  "answer_start": 4184,
                  "answer_end": 4197,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I uninstall rustup and rust?",
              "id": 236,
              "answers": [
                {
                  "answer_id": 240,
                  "document_id": 11,
                  "question_id": 236,
                  "text": "rustup self uninstall",
                  "answer_start": 4301,
                  "answer_end": 4322,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I check Rust documentation locally?",
              "id": 237,
              "answers": [
                {
                  "answer_id": 241,
                  "document_id": 11,
                  "question_id": 237,
                  "text": "rustup doc",
                  "answer_start": 4464,
                  "answer_end": 4474,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## Installation\n\nThe first step is to install Rust. We’ll download Rust through `rustup`, a\ncommand line tool for managing Rust versions and associated tools. You’ll need\nan internet connection for the download.\n\n> Note: If you prefer not to use `rustup` for some reason, please see the\n> [Other Rust Installation Methods page][otherinstall] for more options.\n\nThe following steps install the latest stable version of the Rust compiler.\nRust’s stability guarantees ensure that all the examples in the book that\ncompile will continue to compile with newer Rust versions. The output might\ndiffer slightly between versions because Rust often improves error messages and\nwarnings. In other words, any newer, stable version of Rust you install using\nthese steps should work as expected with the content of this book.\n\n> ### Command Line Notation\n>\n> In this chapter and throughout the book, we’ll show some commands used in the\n> terminal. Lines that you should enter in a terminal all start with `$`. You\n> don’t need to type the `$` character; it’s the command line prompt shown to\n> indicate the start of each command. Lines that don’t start with `$` typically\n> show the output of the previous command. Additionally, PowerShell-specific\n> examples will use `>` rather than `$`.\n\n### Installing `rustup` on Linux or macOS\n\nIf you’re using Linux or macOS, open a terminal and enter the following command:\n\n```console\n$ curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh\n```\n\nThe command downloads a script and starts the installation of the `rustup`\ntool, which installs the latest stable version of Rust. You might be prompted\nfor your password. If the install is successful, the following line will appear:\n\n```text\nRust is installed now. Great!\n```\n\nYou will also need a *linker*, which is a program that Rust uses to join its\ncompiled outputs into one file. It is likely you already have one. If you get\nlinker errors, you should install a C compiler, which will typically include a\nlinker. A C compiler is also useful because some common Rust packages depend on\nC code and will need a C compiler.\n\nOn macOS, you can get a C compiler by running:\n\n```console\n$ xcode-select --install\n```\n\nLinux users should generally install GCC or Clang, according to their\ndistribution’s documentation. For example, if you use Ubuntu, you can install\nthe `build-essential` package.\n\n### Installing `rustup` on Windows\n\nOn Windows, go to [https://www.rust-lang.org/tools/install][install] and follow\nthe instructions for installing Rust. At some point in the installation, you’ll\nreceive a message explaining that you’ll also need the MSVC build tools for\nVisual Studio 2013 or later.\n\nTo acquire the build tools, you’ll need to install [Visual Studio\n2022][visualstudio]. When asked which workloads to install, include:\n\n* “Desktop Development with C++”\n* The Windows 10 or 11 SDK\n* The English language pack component, along with any other language pack of\n  your choosing\n\nThe rest of this book uses commands that work in both *cmd.exe* and PowerShell.\nIf there are specific differences, we’ll explain which to use.\n\n### Troubleshooting\n\nTo check whether you have Rust installed correctly, open a shell and enter this\nline:\n\n```console\n$ rustc --version\n```\n\nYou should see the version number, commit hash, and commit date for the latest\nstable version that has been released, in the following format:\n\n```text\nrustc x.y.z (abcabcabc yyyy-mm-dd)\n```\n\nIf you see this information, you have installed Rust successfully! If you don’t\nsee this information, check that Rust is in your `%PATH%` system variable as\nfollows.\n\nIn Windows CMD, use:\n\n```console\n> echo %PATH%\n```\n\nIn PowerShell, use:\n\n```powershell\n> echo $env:Path\n```\n\nIn Linux and macOS, use:\n\n```console\n$ echo $PATH\n```\n\nIf that’s all correct and Rust still isn’t working, there are a number of\nplaces you can get help. Find out how to get in touch with other Rustaceans (a\nsilly nickname we call ourselves) on [the community page][community].\n\n### Updating and Uninstalling\n\nOnce Rust is installed via `rustup`, updating to a newly released version is\neasy. From your shell, run the following update script:\n\n```console\n$ rustup update\n```\n\nTo uninstall Rust and `rustup`, run the following uninstall script from your\nshell:\n\n```console\n$ rustup self uninstall\n```\n\n### Local Documentation\n\nThe installation of Rust also includes a local copy of the documentation so\nthat you can read it offline. Run `rustup doc` to open the local documentation\nin your browser.\n\nAny time a type or function is provided by the standard library and you’re not\nsure what it does or how to use it, use the application programming interface\n(API) documentation to find out!\n\n[otherinstall]: https://forge.rust-lang.org/infra/other-installation-methods.html\n[install]: https://www.rust-lang.org/tools/install\n[visualstudio]: https://visualstudio.microsoft.com/downloads/\n[community]: https://www.rust-lang.org/community\n",
          "document_id": 11
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "How can 'hello world' program look like?",
              "id": 238,
              "answers": [
                {
                  "answer_id": 242,
                  "document_id": 12,
                  "question_id": 238,
                  "text": "fn main() {\n    println!(\"Hello, world!\");\n}",
                  "answer_start": 1979,
                  "answer_end": 2023,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I compile and run rust program?",
              "id": 239,
              "answers": [
                {
                  "answer_id": 243,
                  "document_id": 12,
                  "question_id": 239,
                  "text": "$ rustc main.rs\n$ ./main",
                  "answer_start": 2292,
                  "answer_end": 2316,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I define function named 'main'?",
              "id": 240,
              "answers": [
                {
                  "answer_id": 244,
                  "document_id": 12,
                  "question_id": 240,
                  "text": "fn main() {\n\n}",
                  "answer_start": 2976,
                  "answer_end": 2990,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What function is always called first in rust?",
              "id": 241,
              "answers": [
                {
                  "answer_id": 245,
                  "document_id": 12,
                  "question_id": 241,
                  "text": "main",
                  "answer_start": 3045,
                  "answer_end": 3049,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "why is 'main' function special?",
              "id": 242,
              "answers": [
                {
                  "answer_id": 246,
                  "document_id": 12,
                  "question_id": 242,
                  "text": "it\nis always the first code that runs in every executable Rust program",
                  "answer_start": 3072,
                  "answer_end": 3142,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I declare body of a function?",
              "id": 243,
              "answers": [
                {
                  "answer_id": 247,
                  "document_id": 12,
                  "question_id": 243,
                  "text": "The function body is wrapped in `{}`",
                  "answer_start": 3312,
                  "answer_end": 3348,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What styling should I use for {}",
              "id": 244,
              "answers": [
                {
                  "answer_id": 248,
                  "document_id": 12,
                  "question_id": 244,
                  "text": "It’s good style to place the opening curly bracket on the same\nline as the function declaration, adding one space in between.",
                  "answer_start": 3407,
                  "answer_end": 3532,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I print \"Hello, world!\" to the screen?",
              "id": 245,
              "answers": [
                {
                  "answer_id": 249,
                  "document_id": 12,
                  "question_id": 245,
                  "text": " println!(\"Hello, world!\");",
                  "answer_start": 3988,
                  "answer_end": 4015,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Should I use spaces or tab?",
              "id": 247,
              "answers": [
                {
                  "answer_id": 251,
                  "document_id": 12,
                  "question_id": 247,
                  "text": " Rust style is to indent with four spaces, not a tab",
                  "answer_start": 4159,
                  "answer_end": 4211,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is println!",
              "id": 248,
              "answers": [
                {
                  "answer_id": 252,
                  "document_id": 12,
                  "question_id": 248,
                  "text": "macro",
                  "answer_start": 4246,
                  "answer_end": 4251,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is println!() macro doing?",
              "id": 246,
              "answers": [
                {
                  "answer_id": 250,
                  "document_id": 12,
                  "question_id": 246,
                  "text": " it prints text to the\nscreen",
                  "answer_start": 4072,
                  "answer_end": 4101,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of a '!'?",
              "id": 249,
              "answers": [
                {
                  "answer_id": 253,
                  "document_id": 12,
                  "question_id": 249,
                  "text": "you’re calling a macro instead of a normal function",
                  "answer_start": 4457,
                  "answer_end": 4508,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of semicolon?",
              "id": 250,
              "answers": [
                {
                  "answer_id": 254,
                  "document_id": 12,
                  "question_id": 250,
                  "text": "indicates that this\nexpression is over and the next one is ready to begin",
                  "answer_start": 4766,
                  "answer_end": 4839,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what commad can I compile program?",
              "id": 251,
              "answers": [
                {
                  "answer_id": 255,
                  "document_id": 12,
                  "question_id": 251,
                  "text": "rustc main.rs",
                  "answer_start": 5196,
                  "answer_end": 5209,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## Hello, World!\n\nNow that you’ve installed Rust, it’s time to write your first Rust program.\nIt’s traditional when learning a new language to write a little program that\nprints the text `Hello, world!` to the screen, so we’ll do the same here!\n\n> Note: This book assumes basic familiarity with the command line. Rust makes\n> no specific demands about your editing or tooling or where your code lives, so\n> if you prefer to use an integrated development environment (IDE) instead of\n> the command line, feel free to use your favorite IDE. Many IDEs now have some\n> degree of Rust support; check the IDE’s documentation for details. The Rust\n> team has been focusing on enabling great IDE support via `rust-analyzer`. See\n> [Appendix D][devtools]<!-- ignore --> for more details.\n\n### Creating a Project Directory\n\nYou’ll start by making a directory to store your Rust code. It doesn’t matter\nto Rust where your code lives, but for the exercises and projects in this book,\nwe suggest making a *projects* directory in your home directory and keeping all\nyour projects there.\n\nOpen a terminal and enter the following commands to make a *projects* directory\nand a directory for the “Hello, world!” project within the *projects* directory.\n\nFor Linux, macOS, and PowerShell on Windows, enter this:\n\n```console\n$ mkdir ~/projects\n$ cd ~/projects\n$ mkdir hello_world\n$ cd hello_world\n```\n\nFor Windows CMD, enter this:\n\n```cmd\n> mkdir \"%USERPROFILE%\\projects\"\n> cd /d \"%USERPROFILE%\\projects\"\n> mkdir hello_world\n> cd hello_world\n```\n\n### Writing and Running a Rust Program\n\nNext, make a new source file and call it *main.rs*. Rust files always end with\nthe *.rs* extension. If you’re using more than one word in your filename, the\nconvention is to use an underscore to separate them. For example, use\n*hello_world.rs* rather than *helloworld.rs*.\n\nNow open the *main.rs* file you just created and enter the code in Listing 1-1.\n\n<span class=\"filename\">Filename: main.rs</span>\n\n```rust\nfn main() {\n    println!(\"Hello, world!\");\n}\n```\n\n<span class=\"caption\">Listing 1-1: A program that prints `Hello, world!`</span>\n\nSave the file and go back to your terminal window in the\n*~/projects/hello_world* directory. On Linux or macOS, enter the following\ncommands to compile and run the file:\n\n```console\n$ rustc main.rs\n$ ./main\nHello, world!\n```\n\nOn Windows, enter the command `.\\main.exe` instead of `./main`:\n\n```powershell\n> rustc main.rs\n> .\\main.exe\nHello, world!\n```\n\nRegardless of your operating system, the string `Hello, world!` should print to\nthe terminal. If you don’t see this output, refer back to the\n[“Troubleshooting”][troubleshooting]<!-- ignore --> part of the Installation\nsection for ways to get help.\n\nIf `Hello, world!` did print, congratulations! You’ve officially written a Rust\nprogram. That makes you a Rust programmer—welcome!\n\n### Anatomy of a Rust Program\n\nLet’s review this “Hello, world!” program in detail. Here’s the first piece of\nthe puzzle:\n\n```rust\nfn main() {\n\n}\n```\n\nThese lines define a function named `main`. The `main` function is special: it\nis always the first code that runs in every executable Rust program. Here, the\nfirst line declares a function named `main` that has no parameters and returns\nnothing. If there were parameters, they would go inside the parentheses `()`.\n\nThe function body is wrapped in `{}`. Rust requires curly brackets around all\nfunction bodies. It’s good style to place the opening curly bracket on the same\nline as the function declaration, adding one space in between.\n\n> Note: If you want to stick to a standard style across Rust projects, you can\n> use an automatic formatter tool called `rustfmt` to format your code in a\n> particular style (more on `rustfmt` in\n> [Appendix D][devtools]<!-- ignore -->). The Rust team has included this tool\n> with the standard Rust distribution, as `rustc` is, so it should already be\n> installed on your computer!\n\nThe body of the `main` function holds the following code:\n\n```rust\n    println!(\"Hello, world!\");\n```\n\nThis line does all the work in this little program: it prints text to the\nscreen. There are four important details to notice here.\n\nFirst, Rust style is to indent with four spaces, not a tab.\n\nSecond, `println!` calls a Rust macro. If it had called a function instead, it\nwould be entered as `println` (without the `!`). We’ll discuss Rust macros in\nmore detail in Chapter 19. For now, you just need to know that using a `!`\nmeans that you’re calling a macro instead of a normal function and that macros\ndon’t always follow the same rules as functions.\n\nThird, you see the `\"Hello, world!\"` string. We pass this string as an argument\nto `println!`, and the string is printed to the screen.\n\nFourth, we end the line with a semicolon (`;`), which indicates that this\nexpression is over and the next one is ready to begin. Most lines of Rust code\nend with a semicolon.\n\n### Compiling and Running Are Separate Steps\n\nYou’ve just run a newly created program, so let’s examine each step in the\nprocess.\n\nBefore running a Rust program, you must compile it using the Rust compiler by\nentering the `rustc` command and passing it the name of your source file, like\nthis:\n\n```console\n$ rustc main.rs\n```\n\nIf you have a C or C++ background, you’ll notice that this is similar to `gcc`\nor `clang`. After compiling successfully, Rust outputs a binary executable.\n\nOn Linux, macOS, and PowerShell on Windows, you can see the executable by\nentering the `ls` command in your shell:\n\n```console\n$ ls\nmain  main.rs\n```\n\nOn Linux and macOS, you’ll see two files. With PowerShell on Windows, you’ll\nsee the same three files that you would see using CMD. With CMD on Windows, you\nwould enter the following:\n\n```cmd\n> dir /B %= the /B option says to only show the file names =%\nmain.exe\nmain.pdb\nmain.rs\n```\n\nThis shows the source code file with the *.rs* extension, the executable file\n(*main.exe* on Windows, but *main* on all other platforms), and, when using\nWindows, a file containing debugging information with the *.pdb* extension.\nFrom here, you run the *main* or *main.exe* file, like this:\n\n```console\n$ ./main # or .\\main.exe on Windows\n```\n\nIf your *main.rs* is your “Hello, world!” program, this line prints `Hello,\nworld!` to your terminal.\n\nIf you’re more familiar with a dynamic language, such as Ruby, Python, or\nJavaScript, you might not be used to compiling and running a program as\nseparate steps. Rust is an *ahead-of-time compiled* language, meaning you can\ncompile a program and give the executable to someone else, and they can run it\neven without having Rust installed. If you give someone a *.rb*, *.py*, or\n*.js* file, they need to have a Ruby, Python, or JavaScript implementation\ninstalled (respectively). But in those languages, you only need one command to\ncompile and run your program. Everything is a trade-off in language design.\n\nJust compiling with `rustc` is fine for simple programs, but as your project\ngrows, you’ll want to manage all the options and make it easy to share your\ncode. Next, we’ll introduce you to the Cargo tool, which will help you write\nreal-world Rust programs.\n\n[troubleshooting]: ch01-01-installation.html#troubleshooting\n[devtools]: appendix-04-useful-development-tools.md\n",
          "document_id": 12
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "What is Cargo?",
              "id": 252,
              "answers": [
                {
                  "answer_id": 256,
                  "document_id": 13,
                  "question_id": 252,
                  "text": "Rust’s build system and package manager.",
                  "answer_start": 27,
                  "answer_end": 67,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "For what is Cargo used?",
              "id": 253,
              "answers": [
                {
                  "answer_id": 257,
                  "document_id": 13,
                  "question_id": 253,
                  "text": "to manage their Rust projects because Cargo handles a lot of tasks for you,\nsuch as building your code, downloading the libraries your code depends on, and\nbuilding those libraries",
                  "answer_start": 98,
                  "answer_end": 278,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How do we call libraries that our code is using?",
              "id": 254,
              "answers": [
                {
                  "answer_id": 258,
                  "document_id": 13,
                  "question_id": 254,
                  "text": "dependencies",
                  "answer_start": 325,
                  "answer_end": 337,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Is cargo coming with Rust by default?",
              "id": 255,
              "answers": [
                {
                  "answer_id": 261,
                  "document_id": 13,
                  "question_id": 255,
                  "text": "Cargo comes installed with Rust if you\nused the official installers",
                  "answer_start": 826,
                  "answer_end": 893,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I check if Cargo is installed?",
              "id": 256,
              "answers": [
                {
                  "answer_id": 262,
                  "document_id": 13,
                  "question_id": 256,
                  "text": "cargo --version",
                  "answer_start": 1105,
                  "answer_end": 1120,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I create new project with cargo?",
              "id": 257,
              "answers": [
                {
                  "answer_id": 263,
                  "document_id": 13,
                  "question_id": 257,
                  "text": "cargo new hello_cargo",
                  "answer_start": 1620,
                  "answer_end": 1641,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is cargo creating by default?",
              "id": 258,
              "answers": [
                {
                  "answer_id": 264,
                  "document_id": 13,
                  "question_id": 258,
                  "text": "a *Cargo.toml* file and a\n*src* directory with a *main.rs* file inside",
                  "answer_start": 1969,
                  "answer_end": 2039,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is git?",
              "id": 259,
              "answers": [
                {
                  "answer_id": 265,
                  "document_id": 13,
                  "question_id": 259,
                  "text": "ommon version control system",
                  "answer_start": 2288,
                  "answer_end": 2316,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Is cargo generating new git repository?",
              "id": 260,
              "answers": [
                {
                  "answer_id": 266,
                  "document_id": 13,
                  "question_id": 260,
                  "text": "It has also initialized a new Git repository along with a *.gitignore* file",
                  "answer_start": 2042,
                  "answer_end": 2117,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When cargo won't create new git repository?",
              "id": 261,
              "answers": [
                {
                  "answer_id": 267,
                  "document_id": 13,
                  "question_id": 261,
                  "text": "if you run `cargo new` within an existing Git\nrepository",
                  "answer_start": 2148,
                  "answer_end": 2204,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "where can I see an example of .toml file?",
              "id": 262,
              "answers": [
                {
                  "answer_id": 268,
                  "document_id": 13,
                  "question_id": 262,
                  "text": "https://doc.rust-lang.org/cargo/reference/manifest.html",
                  "answer_start": 2770,
                  "answer_end": 2825,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what should I start .toml file?",
              "id": 263,
              "answers": [
                {
                  "answer_id": 269,
                  "document_id": 13,
                  "question_id": 263,
                  "text": "[package]",
                  "answer_start": 3091,
                  "answer_end": 3100,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How do we call packages of code?",
              "id": 264,
              "answers": [
                {
                  "answer_id": 270,
                  "document_id": 13,
                  "question_id": 264,
                  "text": "crates",
                  "answer_start": 3648,
                  "answer_end": 3654,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "In what directory should I put source files?",
              "id": 265,
              "answers": [
                {
                  "answer_id": 271,
                  "document_id": 13,
                  "question_id": 265,
                  "text": "src",
                  "answer_start": 4300,
                  "answer_end": 4303,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What should I have in top-level project directory?",
              "id": 266,
              "answers": [
                {
                  "answer_id": 272,
                  "document_id": 13,
                  "question_id": 266,
                  "text": "README files, license information,\nconfiguration files, and anything else not related to your code",
                  "answer_start": 4360,
                  "answer_end": 4458,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I build project with cargo?",
              "id": 267,
              "answers": [
                {
                  "answer_id": 273,
                  "document_id": 13,
                  "question_id": 267,
                  "text": "cargo build",
                  "answer_start": 5052,
                  "answer_end": 5063,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Where by default will be executable file created after build?",
              "id": 268,
              "answers": [
                {
                  "answer_id": 274,
                  "document_id": 13,
                  "question_id": 268,
                  "text": "target/debug/hello_cargo",
                  "answer_start": 5242,
                  "answer_end": 5266,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I run executable file crated with cargo build?",
              "id": 269,
              "answers": [
                {
                  "answer_id": 275,
                  "document_id": 13,
                  "question_id": 269,
                  "text": "./target/debug/hello_cargo # or .\\target\\debug\\hello_cargo.exe on Windows",
                  "answer_start": 5510,
                  "answer_end": 5583,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the purpose of the Cargo.lock file?",
              "id": 270,
              "answers": [
                {
                  "answer_id": 276,
                  "document_id": 13,
                  "question_id": 270,
                  "text": "This file keeps track of the exact versions of\ndependencies in your project",
                  "answer_start": 5779,
                  "answer_end": 5854,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what cargo command can I compile and run my program?",
              "id": 271,
              "answers": [
                {
                  "answer_id": 277,
                  "document_id": 13,
                  "question_id": 271,
                  "text": "cargo run",
                  "answer_start": 6225,
                  "answer_end": 6234,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is 'cargo check' doing?",
              "id": 272,
              "answers": [
                {
                  "answer_id": 278,
                  "document_id": 13,
                  "question_id": 272,
                  "text": "This command quickly checks\nyour code to make sure it compiles but doesn’t produce an executable",
                  "answer_start": 7105,
                  "answer_end": 7201,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Is 'cargo check' faster than 'cargo build'?",
              "id": 273,
              "answers": [
                {
                  "answer_id": 279,
                  "document_id": 13,
                  "question_id": 273,
                  "text": "Often, `cargo check` is much faster than\n`cargo build`",
                  "answer_start": 7400,
                  "answer_end": 7454,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why is cargo check faster than cargo build?",
              "id": 274,
              "answers": [
                {
                  "answer_id": 280,
                  "document_id": 13,
                  "question_id": 274,
                  "text": "because it skips the step of producing an executable",
                  "answer_start": 7455,
                  "answer_end": 7507,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what command can I compile my code with optimizations?",
              "id": 275,
              "answers": [
                {
                  "answer_id": 281,
                  "document_id": 13,
                  "question_id": 275,
                  "text": "cargo build\n--release",
                  "answer_start": 8604,
                  "answer_end": 8625,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## Hello, Cargo!\n\nCargo is Rust’s build system and package manager. Most Rustaceans use this tool\nto manage their Rust projects because Cargo handles a lot of tasks for you,\nsuch as building your code, downloading the libraries your code depends on, and\nbuilding those libraries. (We call the libraries that your code needs\n*dependencies*.)\n\nThe simplest Rust programs, like the one we’ve written so far, don’t have any\ndependencies. If we had built the “Hello, world!” project with Cargo, it would\nonly use the part of Cargo that handles building your code. As you write more\ncomplex Rust programs, you’ll add dependencies, and if you start a project\nusing Cargo, adding dependencies will be much easier to do.\n\nBecause the vast majority of Rust projects use Cargo, the rest of this book\nassumes that you’re using Cargo too. Cargo comes installed with Rust if you\nused the official installers discussed in the\n[“Installation”][installation]<!-- ignore --> section. If you installed Rust\nthrough some other means, check whether Cargo is installed by entering the\nfollowing in your terminal:\n\n```console\n$ cargo --version\n```\n\nIf you see a version number, you have it! If you see an error, such as `command\nnot found`, look at the documentation for your method of installation to\ndetermine how to install Cargo separately.\n\n### Creating a Project with Cargo\n\nLet’s create a new project using Cargo and look at how it differs from our\noriginal “Hello, world!” project. Navigate back to your *projects* directory\n(or wherever you decided to store your code). Then, on any operating system,\nrun the following:\n\n```console\n$ cargo new hello_cargo\n$ cd hello_cargo\n```\n\nThe first command creates a new directory and project called *hello_cargo*.\nWe’ve named our project *hello_cargo*, and Cargo creates its files in a\ndirectory of the same name.\n\nGo into the *hello_cargo* directory and list the files. You’ll see that Cargo\nhas generated two files and one directory for us: a *Cargo.toml* file and a\n*src* directory with a *main.rs* file inside.\n\nIt has also initialized a new Git repository along with a *.gitignore* file.\nGit files won’t be generated if you run `cargo new` within an existing Git\nrepository; you can override this behavior by using `cargo new --vcs=git`.\n\n> Note: Git is a common version control system. You can change `cargo new` to\n> use a different version control system or no version control system by using\n> the `--vcs` flag. Run `cargo new --help` to see the available options.\n\nOpen *Cargo.toml* in your text editor of choice. It should look similar to the\ncode in Listing 1-2.\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n[package]\nname = \"hello_cargo\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\n```\n\n<span class=\"caption\">Listing 1-2: Contents of *Cargo.toml* generated by `cargo\nnew`</span>\n\nThis file is in the [*TOML*][toml]<!-- ignore --> (*Tom’s Obvious, Minimal\nLanguage*) format, which is Cargo’s configuration format.\n\nThe first line, `[package]`, is a section heading that indicates that the\nfollowing statements are configuring a package. As we add more information to\nthis file, we’ll add other sections.\n\nThe next three lines set the configuration information Cargo needs to compile\nyour program: the name, the version, and the edition of Rust to use. We’ll talk\nabout the `edition` key in [Appendix E][appendix-e]<!-- ignore -->.\n\nThe last line, `[dependencies]`, is the start of a section for you to list any\nof your project’s dependencies. In Rust, packages of code are referred to as\n*crates*. We won’t need any other crates for this project, but we will in the\nfirst project in Chapter 2, so we’ll use this dependencies section then.\n\nNow open *src/main.rs* and take a look:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    println!(\"Hello, world!\");\n}\n```\n\nCargo has generated a “Hello, world!” program for you, just like the one we\nwrote in Listing 1-1! So far, the differences between our project and the\nproject Cargo generated are that Cargo placed the code in the *src* directory\nand we have a *Cargo.toml* configuration file in the top directory.\n\nCargo expects your source files to live inside the *src* directory. The\ntop-level project directory is just for README files, license information,\nconfiguration files, and anything else not related to your code. Using Cargo\nhelps you organize your projects. There’s a place for everything, and\neverything is in its place.\n\nIf you started a project that doesn’t use Cargo, as we did with the “Hello,\nworld!” project, you can convert it to a project that does use Cargo. Move the\nproject code into the *src* directory and create an appropriate *Cargo.toml*\nfile.\n\n### Building and Running a Cargo Project\n\nNow let’s look at what’s different when we build and run the “Hello, world!”\nprogram with Cargo! From your *hello_cargo* directory, build your project by\nentering the following command:\n\n```console\n$ cargo build\n   Compiling hello_cargo v0.1.0 (file:///projects/hello_cargo)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.85 secs\n```\n\nThis command creates an executable file in *target/debug/hello_cargo* (or\n*target\\debug\\hello_cargo.exe* on Windows) rather than in your current\ndirectory. Because the default build is a debug build, Cargo puts the binary in\na directory named *debug*. You can run the executable with this command:\n\n```console\n$ ./target/debug/hello_cargo # or .\\target\\debug\\hello_cargo.exe on Windows\nHello, world!\n```\n\nIf all goes well, `Hello, world!` should print to the terminal. Running `cargo\nbuild` for the first time also causes Cargo to create a new file at the top\nlevel: *Cargo.lock*. This file keeps track of the exact versions of\ndependencies in your project. This project doesn’t have dependencies, so the\nfile is a bit sparse. You won’t ever need to change this file manually; Cargo\nmanages its contents for you.\n\nWe just built a project with `cargo build` and ran it with\n`./target/debug/hello_cargo`, but we can also use `cargo run` to compile the\ncode and then run the resultant executable all in one command:\n\n```console\n$ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs\n     Running `target/debug/hello_cargo`\nHello, world!\n```\n\nUsing `cargo run` is more convenient than having to remember to run `cargo\nbuild` and then use the whole path to the binary, so most developers use `cargo\nrun`.\n\nNotice that this time we didn’t see output indicating that Cargo was compiling\n`hello_cargo`. Cargo figured out that the files hadn’t changed, so it didn’t\nrebuild but just ran the binary. If you had modified your source code, Cargo\nwould have rebuilt the project before running it, and you would have seen this\noutput:\n\n```console\n$ cargo run\n   Compiling hello_cargo v0.1.0 (file:///projects/hello_cargo)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.33 secs\n     Running `target/debug/hello_cargo`\nHello, world!\n```\n\nCargo also provides a command called `cargo check`. This command quickly checks\nyour code to make sure it compiles but doesn’t produce an executable:\n\n```console\n$ cargo check\n   Checking hello_cargo v0.1.0 (file:///projects/hello_cargo)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.32 secs\n```\n\nWhy would you not want an executable? Often, `cargo check` is much faster than\n`cargo build` because it skips the step of producing an executable. If you’re\ncontinually checking your work while writing the code, using `cargo check` will\nspeed up the process of letting you know if your project is still compiling! As\nsuch, many Rustaceans run `cargo check` periodically as they write their\nprogram to make sure it compiles. Then they run `cargo build` when they’re\nready to use the executable.\n\nLet’s recap what we’ve learned so far about Cargo:\n\n* We can create a project using `cargo new`.\n* We can build a project using `cargo build`.\n* We can build and run a project in one step using `cargo run`.\n* We can build a project without producing a binary to check for errors using\n  `cargo check`.\n* Instead of saving the result of the build in the same directory as our code,\n  Cargo stores it in the *target/debug* directory.\n\nAn additional advantage of using Cargo is that the commands are the same no\nmatter which operating system you’re working on. So, at this point, we’ll no\nlonger provide specific instructions for Linux and macOS versus Windows.\n\n### Building for Release\n\nWhen your project is finally ready for release, you can use `cargo build\n--release` to compile it with optimizations. This command will create an\nexecutable in *target/release* instead of *target/debug*. The optimizations\nmake your Rust code run faster, but turning them on lengthens the time it takes\nfor your program to compile. This is why there are two different profiles: one\nfor development, when you want to rebuild quickly and often, and another for\nbuilding the final program you’ll give to a user that won’t be rebuilt\nrepeatedly and that will run as fast as possible. If you’re benchmarking your\ncode’s running time, be sure to run `cargo build --release` and benchmark with\nthe executable in *target/release*.\n\n### Cargo as Convention\n\nWith simple projects, Cargo doesn’t provide a lot of value over just using\n`rustc`, but it will prove its worth as your programs become more intricate.\nOnce programs grow to multiple files or need a dependency, it’s much easier to\nlet Cargo coordinate the build.\n\nEven though the `hello_cargo` project is simple, it now uses much of the real\ntooling you’ll use in the rest of your Rust career. In fact, to work on any\nexisting projects, you can use the following commands to check out the code\nusing Git, change to that project’s directory, and build:\n\n```console\n$ git clone example.org/someproject\n$ cd someproject\n$ cargo build\n```\n\nFor more information about Cargo, check out [its documentation][cargo].\n\n## Summary\n\nYou’re already off to a great start on your Rust journey! In this chapter,\nyou’ve learned how to:\n\n* Install the latest stable version of Rust using `rustup`\n* Update to a newer Rust version\n* Open locally installed documentation\n* Write and run a “Hello, world!” program using `rustc` directly\n* Create and run a new project using the conventions of Cargo\n\nThis is a great time to build a more substantial program to get used to reading\nand writing Rust code. So, in Chapter 2, we’ll build a guessing game program.\nIf you would rather start by learning how common programming concepts work in\nRust, see Chapter 3 and then return to Chapter 2.\n\n[installation]: ch01-01-installation.html#installation\n[toml]: https://toml.io\n[appendix-e]: appendix-05-editions.html\n[cargo]: https://doc.rust-lang.org/cargo/\n",
          "document_id": 13
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "When is cargo run useful?",
              "id": 286,
              "answers": [
                {
                  "answer_id": 292,
                  "document_id": 14,
                  "question_id": 286,
                  "text": " when you need to rapidly iterate on a project",
                  "answer_start": 2133,
                  "answer_end": 2179,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What library do I need to use to work with input and output?",
              "id": 287,
              "answers": [
                {
                  "answer_id": 293,
                  "document_id": 14,
                  "question_id": 287,
                  "text": "`io` input/output library",
                  "answer_start": 3026,
                  "answer_end": 3051,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How do we call a set that Rust brings into the scope of every program?",
              "id": 288,
              "answers": [
                {
                  "answer_id": 294,
                  "document_id": 14,
                  "question_id": 288,
                  "text": "prelude",
                  "answer_start": 3381,
                  "answer_end": 3388,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What statement can I use to bring a library into the scope?",
              "id": 289,
              "answers": [
                {
                  "answer_id": 295,
                  "document_id": 14,
                  "question_id": 289,
                  "text": "use",
                  "answer_start": 3581,
                  "answer_end": 3584,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what keyword can I declare a new function?",
              "id": 290,
              "answers": [
                {
                  "answer_id": 296,
                  "document_id": 14,
                  "question_id": 290,
                  "text": "fn",
                  "answer_start": 3917,
                  "answer_end": 3919,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I declare a variable?",
              "id": 291,
              "answers": [
                {
                  "answer_id": 297,
                  "document_id": 14,
                  "question_id": 291,
                  "text": "let apples = 5;",
                  "answer_start": 4764,
                  "answer_end": 4779,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Are variables immutable by default?",
              "id": 292,
              "answers": [
                {
                  "answer_id": 298,
                  "document_id": 14,
                  "question_id": 292,
                  "text": "variables are immutable by default",
                  "answer_start": 4871,
                  "answer_end": 4905,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I create mutable variable?",
              "id": 293,
              "answers": [
                {
                  "answer_id": 299,
                  "document_id": 14,
                  "question_id": 293,
                  "text": "To make a variable mutable, we add `mut` before the\nvariable name",
                  "answer_start": 5116,
                  "answer_end": 5181,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of '=' sign?",
              "id": 294,
              "answers": [
                {
                  "answer_id": 300,
                  "document_id": 14,
                  "question_id": 294,
                  "text": "The equal sign (`=`) tells Rust we\nwant to bind something to the variable now",
                  "answer_start": 5592,
                  "answer_end": 5669,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is an associated function?",
              "id": 295,
              "answers": [
                {
                  "answer_id": 301,
                  "document_id": 14,
                  "question_id": 295,
                  "text": "is a function that’s\nimplemented on a type, in this case `String`",
                  "answer_start": 6103,
                  "answer_end": 6168,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what operator can I pass an argument as reference?",
              "id": 296,
              "answers": [
                {
                  "answer_id": 302,
                  "document_id": 14,
                  "question_id": 296,
                  "text": "&",
                  "answer_start": 7774,
                  "answer_end": 7775,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of reference?",
              "id": 297,
              "answers": [
                {
                  "answer_id": 303,
                  "document_id": 14,
                  "question_id": 297,
                  "text": "gives you a way to\nlet multiple parts of your code access one piece of data without needing to\ncopy that data into memory multiple times",
                  "answer_start": 7830,
                  "answer_end": 7966,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How do we call a type than can be one of multiple possible states?",
              "id": 298,
              "answers": [
                {
                  "answer_id": 304,
                  "document_id": 14,
                  "question_id": 298,
                  "text": "enum",
                  "answer_start": 9444,
                  "answer_end": 9448,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Does Rust have a random number generator by default?",
              "id": 299,
              "answers": [
                {
                  "answer_id": 305,
                  "document_id": 14,
                  "question_id": 299,
                  "text": "Rust doesn’t yet include random number functionality in its standard\nlibrary",
                  "answer_start": 13122,
                  "answer_end": 13198,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can I somehow generate random numbers?",
              "id": 300,
              "answers": [
                {
                  "answer_id": 306,
                  "document_id": 14,
                  "question_id": 300,
                  "text": " the Rust team does provide a [`rand` crate]",
                  "answer_start": 13208,
                  "answer_end": 13252,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is crate?",
              "id": 301,
              "answers": [
                {
                  "answer_id": 307,
                  "document_id": 14,
                  "question_id": 301,
                  "text": " a collection of Rust source code files",
                  "answer_start": 13359,
                  "answer_end": 13398,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is a registry?",
              "id": 302,
              "answers": [
                {
                  "answer_id": 308,
                  "document_id": 14,
                  "question_id": 302,
                  "text": " copy of data\nfrom [Crates.io]",
                  "answer_start": 16635,
                  "answer_end": 16665,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "From where is cargo fetching everything?",
              "id": 303,
              "answers": [
                {
                  "answer_id": 309,
                  "document_id": 14,
                  "question_id": 303,
                  "text": "registry",
                  "answer_start": 16614,
                  "answer_end": 16622,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what cargo command can I update libraries?",
              "id": 304,
              "answers": [
                {
                  "answer_id": 310,
                  "document_id": 14,
                  "question_id": 304,
                  "text": "Cargo provides the command `update`",
                  "answer_start": 19568,
                  "answer_end": 19603,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is 'Rng' trait doing?",
              "id": 305,
              "answers": [
                {
                  "answer_id": 311,
                  "document_id": 14,
                  "question_id": 305,
                  "text": "defines methods that\nrandom number generators implement",
                  "answer_start": 21670,
                  "answer_end": 21725,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is 'Ordering' type?",
              "id": 306,
              "answers": [
                {
                  "answer_id": 312,
                  "document_id": 14,
                  "question_id": 306,
                  "text": "another enum and has the variants `Less`, `Greater`, and `Equal`",
                  "answer_start": 24693,
                  "answer_end": 24757,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How do we call an expression made up of arms?",
              "id": 307,
              "answers": [
                {
                  "answer_id": 313,
                  "document_id": 14,
                  "question_id": 307,
                  "text": "match",
                  "answer_start": 25403,
                  "answer_end": 25408,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is an arm made of?",
              "id": 308,
              "answers": [
                {
                  "answer_id": 314,
                  "document_id": 14,
                  "question_id": 308,
                  "text": "An arm consists of a *pattern* to\nmatch against, and the code that should be run if the value given to `match`\nfits that arm’s pattern",
                  "answer_start": 25443,
                  "answer_end": 25577,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is Rust's type policy?",
              "id": 309,
              "answers": [
                {
                  "answer_id": 315,
                  "document_id": 14,
                  "question_id": 309,
                  "text": "Rust has a\nstrong, static type system.",
                  "answer_start": 27107,
                  "answer_end": 27145,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What feature allows us to reuse variable names with different types?",
              "id": 310,
              "answers": [
                {
                  "answer_id": 316,
                  "document_id": 14,
                  "question_id": 310,
                  "text": "Shadowing",
                  "answer_start": 28525,
                  "answer_end": 28534,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is String#trim doing?",
              "id": 311,
              "answers": [
                {
                  "answer_id": 317,
                  "document_id": 14,
                  "question_id": 311,
                  "text": "eliminate any\nwhitespace at the beginning and end",
                  "answer_start": 29088,
                  "answer_end": 29137,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which method converts string to another type?",
              "id": 312,
              "answers": [
                {
                  "answer_id": 318,
                  "document_id": 14,
                  "question_id": 312,
                  "text": "`parse` method",
                  "answer_start": 29754,
                  "answer_end": 29768,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "# Programming a Guessing Game\n\nLet’s jump into Rust by working through a hands-on project together! This\nchapter introduces you to a few common Rust concepts by showing you how to use\nthem in a real program. You’ll learn about `let`, `match`, methods, associated\nfunctions, external crates, and more! In the following chapters, we’ll explore\nthese ideas in more detail. In this chapter, you’ll just practice the\nfundamentals.\n\nWe’ll implement a classic beginner programming problem: a guessing game. Here’s\nhow it works: the program will generate a random integer between 1 and 100. It\nwill then prompt the player to enter a guess. After a guess is entered, the\nprogram will indicate whether the guess is too low or too high. If the guess is\ncorrect, the game will print a congratulatory message and exit.\n\n## Setting Up a New Project\n\nTo set up a new project, go to the *projects* directory that you created in\nChapter 1 and make a new project using Cargo, like so:\n\n```console\n$ cargo new guessing_game\n$ cd guessing_game\n```\n\nThe first command, `cargo new`, takes the name of the project (`guessing_game`)\nas the first argument. The second command changes to the new project’s\ndirectory.\n\nLook at the generated *Cargo.toml* file:\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial\nrm -rf no-listing-01-cargo-new\ncargo new no-listing-01-cargo-new --name guessing_game\ncd no-listing-01-cargo-new\ncargo run > output.txt 2>&1\ncd ../../..\n-->\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n{{#include ../listings/ch02-guessing-game-tutorial/no-listing-01-cargo-new/Cargo.toml}}\n```\n\nAs you saw in Chapter 1, `cargo new` generates a “Hello, world!” program for\nyou. Check out the *src/main.rs* file:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/no-listing-01-cargo-new/src/main.rs}}\n```\n\nNow let’s compile this “Hello, world!” program and run it in the same step\nusing the `cargo run` command:\n\n```console\n{{#include ../listings/ch02-guessing-game-tutorial/no-listing-01-cargo-new/output.txt}}\n```\n\nThe `run` command comes in handy when you need to rapidly iterate on a project,\nas we’ll do in this game, quickly testing each iteration before moving on to\nthe next one.\n\nReopen the *src/main.rs* file. You’ll be writing all the code in this file.\n\n## Processing a Guess\n\nThe first part of the guessing game program will ask for user input, process\nthat input, and check that the input is in the expected form. To start, we’ll\nallow the player to input a guess. Enter the code in Listing 2-1 into\n*src/main.rs*.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:all}}\n```\n\n<span class=\"caption\">Listing 2-1: Code that gets a guess from the user and\nprints it</span>\n\nThis code contains a lot of information, so let’s go over it line by line. To\nobtain user input and then print the result as output, we need to bring the\n`io` input/output library into scope. The `io` library comes from the standard\nlibrary, known as `std`:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:io}}\n```\n\nBy default, Rust has a set of items defined in the standard library that it\nbrings into the scope of every program. This set is called the *prelude*, and\nyou can see everything in it [in the standard library documentation][prelude].\n\nIf a type you want to use isn’t in the prelude, you have to bring that type\ninto scope explicitly with a `use` statement. Using the `std::io` library\nprovides you with a number of useful features, including the ability to accept\nuser input.\n\nAs you saw in Chapter 1, the `main` function is the entry point into the\nprogram:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:main}}\n```\n\nThe `fn` syntax declares a new function; the parentheses, `()`, indicate there\nare no parameters; and the curly bracket, `{`, starts the body of the function.\n\nAs you also learned in Chapter 1, `println!` is a macro that prints a string to\nthe screen:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:print}}\n```\n\nThis code is printing a prompt stating what the game is and requesting input\nfrom the user.\n\n### Storing Values with Variables\n\nNext, we’ll create a *variable* to store the user input, like this:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:string}}\n```\n\nNow the program is getting interesting! There’s a lot going on in this little\nline. We use the `let` statement to create the variable. Here’s another example:\n\n```rust,ignore\nlet apples = 5;\n```\n\nThis line creates a new variable named `apples` and binds it to the value 5. In\nRust, variables are immutable by default, meaning once we give the variable a\nvalue, the value won’t change. We’ll be discussing this concept in detail in\nthe [“Variables and Mutability”][variables-and-mutability]<!-- ignore -->\nsection in Chapter 3. To make a variable mutable, we add `mut` before the\nvariable name:\n\n```rust,ignore\nlet apples = 5; // immutable\nlet mut bananas = 5; // mutable\n```\n\n> Note: The `//` syntax starts a comment that continues until the end of the\n> line. Rust ignores everything in comments. We’ll discuss comments in more\n> detail in [Chapter 3][comments]<!-- ignore -->.\n\nReturning to the guessing game program, you now know that `let mut guess` will\nintroduce a mutable variable named `guess`. The equal sign (`=`) tells Rust we\nwant to bind something to the variable now. On the right of the equal sign is\nthe value that `guess` is bound to, which is the result of calling\n`String::new`, a function that returns a new instance of a `String`.\n[`String`][string]<!-- ignore --> is a string type provided by the standard\nlibrary that is a growable, UTF-8 encoded bit of text.\n\nThe `::` syntax in the `::new` line indicates that `new` is an associated\nfunction of the `String` type. An *associated function* is a function that’s\nimplemented on a type, in this case `String`. This `new` function creates a\nnew, empty string. You’ll find a `new` function on many types because it’s a\ncommon name for a function that makes a new value of some kind.\n\nIn full, the `let mut guess = String::new();` line has created a mutable\nvariable that is currently bound to a new, empty instance of a `String`. Whew!\n\n### Receiving User Input\n\nRecall that we included the input/output functionality from the standard\nlibrary with `use std::io;` on the first line of the program. Now we’ll call\nthe `stdin` function from the `io` module, which will allow us to handle user\ninput:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:read}}\n```\n\nIf we hadn’t imported the `io` library with `use std::io;` at the beginning of\nthe program, we could still use the function by writing this function call as\n`std::io::stdin`. The `stdin` function returns an instance of\n[`std::io::Stdin`][iostdin]<!-- ignore -->, which is a type that represents a\nhandle to the standard input for your terminal.\n\nNext, the line `.read_line(&mut guess)` calls the [`read_line`][read_line]<!--\nignore --> method on the standard input handle to get input from the user.\nWe’re also passing `&mut guess` as the argument to `read_line` to tell it what\nstring to store the user input in. The full job of `read_line` is to take\nwhatever the user types into standard input and append that into a string\n(without overwriting its contents), so we therefore pass that string as an\nargument. The string argument needs to be mutable so the method can change the\nstring’s content.\n\nThe `&` indicates that this argument is a *reference*, which gives you a way to\nlet multiple parts of your code access one piece of data without needing to\ncopy that data into memory multiple times. References are a complex feature,\nand one of Rust’s major advantages is how safe and easy it is to use\nreferences. You don’t need to know a lot of those details to finish this\nprogram. For now, all you need to know is that, like variables, references are\nimmutable by default. Hence, you need to write `&mut guess` rather than\n`&guess` to make it mutable. (Chapter 4 will explain references more\nthoroughly.)\n\n<!-- Old heading. Do not remove or links may break. -->\n<a id=\"handling-potential-failure-with-the-result-type\"></a>\n\n### Handling Potential Failure with `Result`\n\nWe’re still working on this line of code. We’re now discussing a third line of\ntext, but note that it’s still part of a single logical line of code. The next\npart is this method:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:expect}}\n```\n\nWe could have written this code as:\n\n```rust,ignore\nio::stdin().read_line(&mut guess).expect(\"Failed to read line\");\n```\n\nHowever, one long line is difficult to read, so it’s best to divide it. It’s\noften wise to introduce a newline and other whitespace to help break up long\nlines when you call a method with the `.method_name()` syntax. Now let’s\ndiscuss what this line does.\n\nAs mentioned earlier, `read_line` puts whatever the user enters into the string\nwe pass to it, but it also returns a `Result` value. [`Result`][result]<!--\nignore --> is an [*enumeration*][enums]<!-- ignore -->, often called an *enum*,\nwhich is a type that can be in one of multiple possible states. We call each\npossible state a *variant*.\n\n[Chapter 6][enums]<!-- ignore --> will cover enums in more detail. The purpose\nof these `Result` types is to encode error-handling information.\n\n`Result`’s variants are `Ok` and `Err`. The `Ok` variant indicates the\noperation was successful, and inside `Ok` is the successfully generated value.\nThe `Err` variant means the operation failed, and `Err` contains information\nabout how or why the operation failed.\n\nValues of the `Result` type, like values of any type, have methods defined on\nthem. An instance of `Result` has an [`expect` method][expect]<!-- ignore -->\nthat you can call. If this instance of `Result` is an `Err` value, `expect`\nwill cause the program to crash and display the message that you passed as an\nargument to `expect`. If the `read_line` method returns an `Err`, it would\nlikely be the result of an error coming from the underlying operating system.\nIf this instance of `Result` is an `Ok` value, `expect` will take the return\nvalue that `Ok` is holding and return just that value to you so you can use it.\nIn this case, that value is the number of bytes in the user’s input.\n\nIf you don’t call `expect`, the program will compile, but you’ll get a warning:\n\n```console\n{{#include ../listings/ch02-guessing-game-tutorial/no-listing-02-without-expect/output.txt}}\n```\n\nRust warns that you haven’t used the `Result` value returned from `read_line`,\nindicating that the program hasn’t handled a possible error.\n\nThe right way to suppress the warning is to actually write error-handling code,\nbut in our case we just want to crash this program when a problem occurs, so we\ncan use `expect`. You’ll learn about recovering from errors in [Chapter\n9][recover]<!-- ignore -->.\n\n### Printing Values with `println!` Placeholders\n\nAside from the closing curly bracket, there’s only one more line to discuss in\nthe code so far:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:print_guess}}\n```\n\nThis line prints the string that now contains the user’s input. The `{}` set of\ncurly brackets is a placeholder: think of `{}` as little crab pincers that hold\na value in place. When printing the value of a variable, the variable name can\ngo inside the curly brackets. When printing the result of evaluating an\nexpression, place empty curly brackets in the format string, then follow the\nformat string with a comma-separated list of expressions to print in each empty\ncurly bracket placeholder in the same order. Printing a variable and the result\nof an expression in one call to `println!` would look like this:\n\n```rust\nlet x = 5;\nlet y = 10;\n\nprintln!(\"x = {x} and y + 2 = {}\", y + 2);\n```\n\nThis code would print `x = 5 and y + 2 = 12`.\n\n### Testing the First Part\n\nLet’s test the first part of the guessing game. Run it using `cargo run`:\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-01/\ncargo clean\ncargo run\ninput 6 -->\n\n```console\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 6.44s\n     Running `target/debug/guessing_game`\nGuess the number!\nPlease input your guess.\n6\nYou guessed: 6\n```\n\nAt this point, the first part of the game is done: we’re getting input from the\nkeyboard and then printing it.\n\n## Generating a Secret Number\n\nNext, we need to generate a secret number that the user will try to guess. The\nsecret number should be different every time so the game is fun to play more\nthan once. We’ll use a random number between 1 and 100 so the game isn’t too\ndifficult. Rust doesn’t yet include random number functionality in its standard\nlibrary. However, the Rust team does provide a [`rand` crate][randcrate] with\nsaid functionality.\n\n### Using a Crate to Get More Functionality\n\nRemember that a crate is a collection of Rust source code files. The project\nwe’ve been building is a *binary crate*, which is an executable. The `rand`\ncrate is a *library crate*, which contains code that is intended to be used in\nother programs and can’t be executed on its own.\n\nCargo’s coordination of external crates is where Cargo really shines. Before we\ncan write code that uses `rand`, we need to modify the *Cargo.toml* file to\ninclude the `rand` crate as a dependency. Open that file now and add the\nfollowing line to the bottom, beneath the `[dependencies]` section header that\nCargo created for you. Be sure to specify `rand` exactly as we have here, with\nthis version number, or the code examples in this tutorial may not work:\n\n<!-- When updating the version of `rand` used, also update the version of\n`rand` used in these files so they all match:\n* ch07-04-bringing-paths-into-scope-with-the-use-keyword.md\n* ch14-03-cargo-workspaces.md\n-->\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n{{#include ../listings/ch02-guessing-game-tutorial/listing-02-02/Cargo.toml:8:}}\n```\n\nIn the *Cargo.toml* file, everything that follows a header is part of that\nsection that continues until another section starts. In `[dependencies]` you\ntell Cargo which external crates your project depends on and which versions of\nthose crates you require. In this case, we specify the `rand` crate with the\nsemantic version specifier `0.8.5`. Cargo understands [Semantic\nVersioning][semver]<!-- ignore --> (sometimes called *SemVer*), which is a\nstandard for writing version numbers. The specifier `0.8.5` is actually\nshorthand for `^0.8.5`, which means any version that is at least 0.8.5 but\nbelow 0.9.0.\n\nCargo considers these versions to have public APIs compatible with version\n0.8.5, and this specification ensures you’ll get the latest patch release that\nwill still compile with the code in this chapter. Any version 0.9.0 or greater\nis not guaranteed to have the same API as what the following examples use.\n\nNow, without changing any of the code, let’s build the project, as shown in\nListing 2-2.\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-02/\nrm Cargo.lock\ncargo clean\ncargo build -->\n\n```console\n$ cargo build\n    Updating crates.io index\n  Downloaded rand v0.8.5\n  Downloaded libc v0.2.127\n  Downloaded getrandom v0.2.7\n  Downloaded cfg-if v1.0.0\n  Downloaded ppv-lite86 v0.2.16\n  Downloaded rand_chacha v0.3.1\n  Downloaded rand_core v0.6.3\n   Compiling libc v0.2.127\n   Compiling getrandom v0.2.7\n   Compiling cfg-if v1.0.0\n   Compiling ppv-lite86 v0.2.16\n   Compiling rand_core v0.6.3\n   Compiling rand_chacha v0.3.1\n   Compiling rand v0.8.5\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53s\n```\n\n<span class=\"caption\">Listing 2-2: The output from running `cargo build` after\nadding the rand crate as a dependency</span>\n\nYou may see different version numbers (but they will all be compatible with the\ncode, thanks to SemVer!) and different lines (depending on the operating\nsystem), and the lines may be in a different order.\n\nWhen we include an external dependency, Cargo fetches the latest versions of\neverything that dependency needs from the *registry*, which is a copy of data\nfrom [Crates.io][cratesio]. Crates.io is where people in the Rust ecosystem\npost their open source Rust projects for others to use.\n\nAfter updating the registry, Cargo checks the `[dependencies]` section and\ndownloads any crates listed that aren’t already downloaded. In this case,\nalthough we only listed `rand` as a dependency, Cargo also grabbed other crates\nthat `rand` depends on to work. After downloading the crates, Rust compiles\nthem and then compiles the project with the dependencies available.\n\nIf you immediately run `cargo build` again without making any changes, you\nwon’t get any output aside from the `Finished` line. Cargo knows it has already\ndownloaded and compiled the dependencies, and you haven’t changed anything\nabout them in your *Cargo.toml* file. Cargo also knows that you haven’t changed\nanything about your code, so it doesn’t recompile that either. With nothing to\ndo, it simply exits.\n\nIf you open the *src/main.rs* file, make a trivial change, and then save it and\nbuild again, you’ll only see two lines of output:\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-02/\ntouch src/main.rs\ncargo build -->\n\n```console\n$ cargo build\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53 secs\n```\n\nThese lines show that Cargo only updates the build with your tiny change to the\n*src/main.rs* file. Your dependencies haven’t changed, so Cargo knows it can\nreuse what it has already downloaded and compiled for those.\n\n#### Ensuring Reproducible Builds with the *Cargo.lock* File\n\nCargo has a mechanism that ensures you can rebuild the same artifact every time\nyou or anyone else builds your code: Cargo will use only the versions of the\ndependencies you specified until you indicate otherwise. For example, say that\nnext week version 0.8.6 of the `rand` crate comes out, and that version\ncontains an important bug fix, but it also contains a regression that will\nbreak your code. To handle this, Rust creates the *Cargo.lock* file the first\ntime you run `cargo build`, so we now have this in the *guessing_game*\ndirectory.\n\nWhen you build a project for the first time, Cargo figures out all the versions\nof the dependencies that fit the criteria and then writes them to the\n*Cargo.lock* file. When you build your project in the future, Cargo will see\nthat the *Cargo.lock* file exists and will use the versions specified there\nrather than doing all the work of figuring out versions again. This lets you\nhave a reproducible build automatically. In other words, your project will\nremain at 0.8.5 until you explicitly upgrade, thanks to the *Cargo.lock* file.\nBecause the *Cargo.lock* file is important for reproducible builds, it’s often\nchecked into source control with the rest of the code in your project.\n\n#### Updating a Crate to Get a New Version\n\nWhen you *do* want to update a crate, Cargo provides the command `update`,\nwhich will ignore the *Cargo.lock* file and figure out all the latest versions\nthat fit your specifications in *Cargo.toml*. Cargo will then write those\nversions to the *Cargo.lock* file. Otherwise, by default, Cargo will only look\nfor versions greater than 0.8.5 and less than 0.9.0. If the `rand` crate has\nreleased the two new versions 0.8.6 and 0.9.0, you would see the following if\nyou ran `cargo update`:\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-02/\ncargo update\nassuming there is a new 0.8.x version of rand; otherwise use another update\nas a guide to creating the hypothetical output shown here -->\n\n```console\n$ cargo update\n    Updating crates.io index\n    Updating rand v0.8.5 -> v0.8.6\n```\n\nCargo ignores the 0.9.0 release. At this point, you would also notice a change\nin your *Cargo.lock* file noting that the version of the `rand` crate you are\nnow using is 0.8.6. To use `rand` version 0.9.0 or any version in the 0.9.*x*\nseries, you’d have to update the *Cargo.toml* file to look like this instead:\n\n```toml\n[dependencies]\nrand = \"0.9.0\"\n```\n\nThe next time you run `cargo build`, Cargo will update the registry of crates\navailable and reevaluate your `rand` requirements according to the new version\nyou have specified.\n\nThere’s a lot more to say about [Cargo][doccargo]<!-- ignore --> and [its\necosystem][doccratesio]<!-- ignore -->, which we’ll discuss in Chapter 14, but\nfor now, that’s all you need to know. Cargo makes it very easy to reuse\nlibraries, so Rustaceans are able to write smaller projects that are assembled\nfrom a number of packages.\n\n### Generating a Random Number\n\nLet’s start using `rand` to generate a number to guess. The next step is to\nupdate *src/main.rs*, as shown in Listing 2-3.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-03/src/main.rs:all}}\n```\n\n<span class=\"caption\">Listing 2-3: Adding code to generate a random\nnumber</span>\n\nFirst we add the line `use rand::Rng;`. The `Rng` trait defines methods that\nrandom number generators implement, and this trait must be in scope for us to\nuse those methods. Chapter 10 will cover traits in detail.\n\nNext, we’re adding two lines in the middle. In the first line, we call the\n`rand::thread_rng` function that gives us the particular random number\ngenerator we’re going to use: one that is local to the current thread of\nexecution and is seeded by the operating system. Then we call the `gen_range`\nmethod on the random number generator. This method is defined by the `Rng`\ntrait that we brought into scope with the `use rand::Rng;` statement. The\n`gen_range` method takes a range expression as an argument and generates a\nrandom number in the range. The kind of range expression we’re using here takes\nthe form `start..=end` and is inclusive on the lower and upper bounds, so we\nneed to specify `1..=100` to request a number between 1 and 100.\n\n> Note: You won’t just know which traits to use and which methods and functions\n> to call from a crate, so each crate has documentation with instructions for\n> using it. Another neat feature of Cargo is that running the `cargo doc\n> --open` command will build documentation provided by all your dependencies\n> locally and open it in your browser. If you’re interested in other\n> functionality in the `rand` crate, for example, run `cargo doc --open` and\n> click `rand` in the sidebar on the left.\n\nThe second new line prints the secret number. This is useful while we’re\ndeveloping the program to be able to test it, but we’ll delete it from the\nfinal version. It’s not much of a game if the program prints the answer as soon\nas it starts!\n\nTry running the program a few times:\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-03/\ncargo run\n4\ncargo run\n5\n-->\n\n```console\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 7\nPlease input your guess.\n4\nYou guessed: 4\n\n$ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.02s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 83\nPlease input your guess.\n5\nYou guessed: 5\n```\n\nYou should get different random numbers, and they should all be numbers between\n1 and 100. Great job!\n\n## Comparing the Guess to the Secret Number\n\nNow that we have user input and a random number, we can compare them. That step\nis shown in Listing 2-4. Note that this code won’t compile just yet, as we will\nexplain.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-04/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 2-4: Handling the possible return values of\ncomparing two numbers</span>\n\nFirst we add another `use` statement, bringing a type called\n`std::cmp::Ordering` into scope from the standard library. The `Ordering` type\nis another enum and has the variants `Less`, `Greater`, and `Equal`. These are\nthe three outcomes that are possible when you compare two values.\n\nThen we add five new lines at the bottom that use the `Ordering` type. The\n`cmp` method compares two values and can be called on anything that can be\ncompared. It takes a reference to whatever you want to compare with: here it’s\ncomparing `guess` to `secret_number`. Then it returns a variant of the\n`Ordering` enum we brought into scope with the `use` statement. We use a\n[`match`][match]<!-- ignore --> expression to decide what to do next based on\nwhich variant of `Ordering` was returned from the call to `cmp` with the values\nin `guess` and `secret_number`.\n\nA `match` expression is made up of *arms*. An arm consists of a *pattern* to\nmatch against, and the code that should be run if the value given to `match`\nfits that arm’s pattern. Rust takes the value given to `match` and looks\nthrough each arm’s pattern in turn. Patterns and the `match` construct are\npowerful Rust features: they let you express a variety of situations your code\nmight encounter and they make sure you handle them all. These features will be\ncovered in detail in Chapter 6 and Chapter 18, respectively.\n\nLet’s walk through an example with the `match` expression we use here. Say that\nthe user has guessed 50 and the randomly generated secret number this time is\n38.\n\nWhen the code compares 50 to 38, the `cmp` method will return\n`Ordering::Greater` because 50 is greater than 38. The `match` expression gets\nthe `Ordering::Greater` value and starts checking each arm’s pattern. It looks\nat the first arm’s pattern, `Ordering::Less`, and sees that the value\n`Ordering::Greater` does not match `Ordering::Less`, so it ignores the code in\nthat arm and moves to the next arm. The next arm’s pattern is\n`Ordering::Greater`, which *does* match `Ordering::Greater`! The associated\ncode in that arm will execute and print `Too big!` to the screen. The `match`\nexpression ends after the first successful match, so it won’t look at the last\narm in this scenario.\n\nHowever, the code in Listing 2-4 won’t compile yet. Let’s try it:\n\n<!--\nThe error numbers in this output should be that of the code **WITHOUT** the\nanchor or snip comments\n-->\n\n```console\n{{#include ../listings/ch02-guessing-game-tutorial/listing-02-04/output.txt}}\n```\n\nThe core of the error states that there are *mismatched types*. Rust has a\nstrong, static type system. However, it also has type inference. When we wrote\n`let mut guess = String::new()`, Rust was able to infer that `guess` should be\na `String` and didn’t make us write the type. The `secret_number`, on the other\nhand, is a number type. A few of Rust’s number types can have a value between 1\nand 100: `i32`, a 32-bit number; `u32`, an unsigned 32-bit number; `i64`, a\n64-bit number; as well as others. Unless otherwise specified, Rust defaults to\nan `i32`, which is the type of `secret_number` unless you add type information\nelsewhere that would cause Rust to infer a different numerical type. The reason\nfor the error is that Rust cannot compare a string and a number type.\n\nUltimately, we want to convert the `String` the program reads as input into a\nreal number type so we can compare it numerically to the secret number. We do\nso by adding this line to the `main` function body:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/no-listing-03-convert-string-to-number/src/main.rs:here}}\n```\n\nThe line is:\n\n```rust,ignore\nlet guess: u32 = guess.trim().parse().expect(\"Please type a number!\");\n```\n\nWe create a variable named `guess`. But wait, doesn’t the program already have\na variable named `guess`? It does, but helpfully Rust allows us to shadow the\nprevious value of `guess` with a new one. *Shadowing* lets us reuse the `guess`\nvariable name rather than forcing us to create two unique variables, such as\n`guess_str` and `guess`, for example. We’ll cover this in more detail in\n[Chapter 3][shadowing]<!-- ignore -->, but for now, know that this feature is\noften used when you want to convert a value from one type to another type.\n\nWe bind this new variable to the expression `guess.trim().parse()`. The `guess`\nin the expression refers to the original `guess` variable that contained the\ninput as a string. The `trim` method on a `String` instance will eliminate any\nwhitespace at the beginning and end, which we must do to be able to compare the\nstring to the `u32`, which can only contain numerical data. The user must press\n<span class=\"keystroke\">enter</span> to satisfy `read_line` and input their\nguess, which adds a newline character to the string. For example, if the user\ntypes <span class=\"keystroke\">5</span> and presses <span\nclass=\"keystroke\">enter</span>, `guess` looks like this: `5\\n`. The `\\n`\nrepresents “newline.” (On Windows, pressing <span\nclass=\"keystroke\">enter</span> results in a carriage return and a newline,\n`\\r\\n`.) The `trim` method eliminates `\\n` or `\\r\\n`, resulting in just `5`.\n\nThe [`parse` method on strings][parse]<!-- ignore --> converts a string to\nanother type. Here, we use it to convert from a string to a number. We need to\ntell Rust the exact number type we want by using `let guess: u32`. The colon\n(`:`) after `guess` tells Rust we’ll annotate the variable’s type. Rust has a\nfew built-in number types; the `u32` seen here is an unsigned, 32-bit integer.\nIt’s a good default choice for a small positive number. You’ll learn about\nother number types in [Chapter 3][integers]<!-- ignore -->.\n\nAdditionally, the `u32` annotation in this example program and the comparison\nwith `secret_number` means Rust will infer that `secret_number` should be a\n`u32` as well. So now the comparison will be between two values of the same\ntype!\n\nThe `parse` method will only work on characters that can logically be converted\ninto numbers and so can easily cause errors. If, for example, the string\ncontained `A👍%`, there would be no way to convert that to a number. Because it\nmight fail, the `parse` method returns a `Result` type, much as the `read_line`\nmethod does (discussed earlier in [“Handling Potential Failure with\n`Result`”](#handling-potential-failure-with-result)<!-- ignore-->). We’ll treat\nthis `Result` the same way by using the `expect` method again. If `parse`\nreturns an `Err` `Result` variant because it couldn’t create a number from the\nstring, the `expect` call will crash the game and print the message we give it.\nIf `parse` can successfully convert the string to a number, it will return the\n`Ok` variant of `Result`, and `expect` will return the number that we want from\nthe `Ok` value.\n\nLet’s run the program now:\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/no-listing-03-convert-string-to-number/\ncargo run\n  76\n-->\n\n```console\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.43s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 58\nPlease input your guess.\n  76\nYou guessed: 76\nToo big!\n```\n\nNice! Even though spaces were added before the guess, the program still figured\nout that the user guessed 76. Run the program a few times to verify the\ndifferent behavior with different kinds of input: guess the number correctly,\nguess a number that is too high, and guess a number that is too low.\n\nWe have most of the game working now, but the user can make only one guess.\nLet’s change that by adding a loop!\n\n## Allowing Multiple Guesses with Looping\n\nThe `loop` keyword creates an infinite loop. We’ll add a loop to give users\nmore chances at guessing the number:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/no-listing-04-looping/src/main.rs:here}}\n```\n\nAs you can see, we’ve moved everything from the guess input prompt onward into\na loop. Be sure to indent the lines inside the loop another four spaces each\nand run the program again. The program will now ask for another guess forever,\nwhich actually introduces a new problem. It doesn’t seem like the user can quit!\n\nThe user could always interrupt the program by using the keyboard shortcut\n<span class=\"keystroke\">ctrl-c</span>. But there’s another way to escape this\ninsatiable monster, as mentioned in the `parse` discussion in [“Comparing the\nGuess to the Secret Number”](#comparing-the-guess-to-the-secret-number)<!--\nignore -->: if the user enters a non-number answer, the program will crash. We\ncan take advantage of that to allow the user to quit, as shown here:\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/no-listing-04-looping/\ncargo run\n(too small guess)\n(too big guess)\n(correct guess)\nquit\n-->\n\n```console\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 1.50s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 59\nPlease input your guess.\n45\nYou guessed: 45\nToo small!\nPlease input your guess.\n60\nYou guessed: 60\nToo big!\nPlease input your guess.\n59\nYou guessed: 59\nYou win!\nPlease input your guess.\nquit\nthread 'main' panicked at 'Please type a number!: ParseIntError { kind: InvalidDigit }', src/main.rs:28:47\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n```\n\nTyping `quit` will quit the game, but as you’ll notice, so will entering any\nother non-number input. This is suboptimal, to say the least; we want the game\nto also stop when the correct number is guessed.\n\n### Quitting After a Correct Guess\n\nLet’s program the game to quit when the user wins by adding a `break` statement:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/no-listing-05-quitting/src/main.rs:here}}\n```\n\nAdding the `break` line after `You win!` makes the program exit the loop when\nthe user guesses the secret number correctly. Exiting the loop also means\nexiting the program, because the loop is the last part of `main`.\n\n### Handling Invalid Input\n\nTo further refine the game’s behavior, rather than crashing the program when\nthe user inputs a non-number, let’s make the game ignore a non-number so the\nuser can continue guessing. We can do that by altering the line where `guess`\nis converted from a `String` to a `u32`, as shown in Listing 2-5.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-05/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 2-5: Ignoring a non-number guess and asking for\nanother guess instead of crashing the program</span>\n\nWe switch from an `expect` call to a `match` expression to move from crashing\non an error to handling the error. Remember that `parse` returns a `Result`\ntype and `Result` is an enum that has the variants `Ok` and `Err`. We’re using\na `match` expression here, as we did with the `Ordering` result of the `cmp`\nmethod.\n\nIf `parse` is able to successfully turn the string into a number, it will\nreturn an `Ok` value that contains the resultant number. That `Ok` value will\nmatch the first arm’s pattern, and the `match` expression will just return the\n`num` value that `parse` produced and put inside the `Ok` value. That number\nwill end up right where we want it in the new `guess` variable we’re creating.\n\nIf `parse` is *not* able to turn the string into a number, it will return an\n`Err` value that contains more information about the error. The `Err` value\ndoes not match the `Ok(num)` pattern in the first `match` arm, but it does\nmatch the `Err(_)` pattern in the second arm. The underscore, `_`, is a\ncatchall value; in this example, we’re saying we want to match all `Err`\nvalues, no matter what information they have inside them. So the program will\nexecute the second arm’s code, `continue`, which tells the program to go to the\nnext iteration of the `loop` and ask for another guess. So, effectively, the\nprogram ignores all errors that `parse` might encounter!\n\nNow everything in the program should work as expected. Let’s try it:\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-05/\ncargo run\n(too small guess)\n(too big guess)\nfoo\n(correct guess)\n-->\n\n```console\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 4.45s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 61\nPlease input your guess.\n10\nYou guessed: 10\nToo small!\nPlease input your guess.\n99\nYou guessed: 99\nToo big!\nPlease input your guess.\nfoo\nPlease input your guess.\n61\nYou guessed: 61\nYou win!\n```\n\nAwesome! With one tiny final tweak, we will finish the guessing game. Recall\nthat the program is still printing the secret number. That worked well for\ntesting, but it ruins the game. Let’s delete the `println!` that outputs the\nsecret number. Listing 2-6 shows the final code.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-06/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 2-6: Complete guessing game code</span>\n\nAt this point, you’ve successfully built the guessing game. Congratulations!\n\n## Summary\n\nThis project was a hands-on way to introduce you to many new Rust concepts:\n`let`, `match`, functions, the use of external crates, and more. In the next\nfew chapters, you’ll learn about these concepts in more detail. Chapter 3\ncovers concepts that most programming languages have, such as variables, data\ntypes, and functions, and shows how to use them in Rust. Chapter 4 explores\nownership, a feature that makes Rust different from other languages. Chapter 5\ndiscusses structs and method syntax, and Chapter 6 explains how enums work.\n\n[prelude]: ../std/prelude/index.html\n[variables-and-mutability]: ch03-01-variables-and-mutability.html#variables-and-mutability\n[comments]: ch03-04-comments.html\n[string]: ../std/string/struct.String.html\n[iostdin]: ../std/io/struct.Stdin.html\n[read_line]: ../std/io/struct.Stdin.html#method.read_line\n[result]: ../std/result/enum.Result.html\n[enums]: ch06-00-enums.html\n[expect]: ../std/result/enum.Result.html#method.expect\n[recover]: ch09-02-recoverable-errors-with-result.html\n[randcrate]: https://crates.io/crates/rand\n[semver]: http://semver.org\n[cratesio]: https://crates.io/\n[doccargo]: http://doc.crates.io\n[doccratesio]: http://doc.crates.io/crates-io.html\n[match]: ch06-02-match.html\n[shadowing]: ch03-01-variables-and-mutability.html#shadowing\n[parse]: ../std/primitive.str.html#method.parse\n[integers]: ch03-02-data-types.html#integer-types\n",
          "document_id": 14
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "How do we call strings that can be used only by language?",
              "id": 276,
              "answers": [
                {
                  "answer_id": 282,
                  "document_id": 15,
                  "question_id": 276,
                  "text": "keywords",
                  "answer_start": 634,
                  "answer_end": 642,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Do all keywords have functionality assigned?",
              "id": 277,
              "answers": [
                {
                  "answer_id": 283,
                  "document_id": 15,
                  "question_id": 277,
                  "text": "a few have no current functionality associated with them but have\n> been reserved for functionality that might be added to Rust in the future",
                  "answer_start": 921,
                  "answer_end": 1062,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "# Common Programming Concepts\n\nThis chapter covers concepts that appear in almost every programming language\nand how they work in Rust. Many programming languages have much in common at\ntheir core. None of the concepts presented in this chapter are unique to Rust,\nbut we’ll discuss them in the context of Rust and explain the conventions\naround using these concepts.\n\nSpecifically, you’ll learn about variables, basic types, functions, comments,\nand control flow. These foundations will be in every Rust program, and learning\nthem early will give you a strong core to start from.\n\n> #### Keywords\n>\n> The Rust language has a set of *keywords* that are reserved for use by the\n> language only, much as in other languages. Keep in mind that you cannot use\n> these words as names of variables or functions. Most of the keywords have\n> special meanings, and you’ll be using them to do various tasks in your Rust\n> programs; a few have no current functionality associated with them but have\n> been reserved for functionality that might be added to Rust in the future. You\n> can find a list of the keywords in [Appendix A][appendix_a]<!-- ignore -->.\n\n[appendix_a]: appendix-01-keywords.md\n",
          "document_id": 15
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "Are variables mutable by default?",
              "id": 313,
              "answers": [
                {
                  "answer_id": 319,
                  "document_id": 16,
                  "question_id": 313,
                  "text": "by default,\nvariables are immutable.",
                  "answer_start": 138,
                  "answer_end": 174,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can I make variable mutable?",
              "id": 314,
              "answers": [
                {
                  "answer_id": 320,
                  "document_id": 16,
                  "question_id": 314,
                  "text": "you still have the option to make your variables mutable",
                  "answer_start": 328,
                  "answer_end": 384,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does it mean that variable is immutable?",
              "id": 315,
              "answers": [
                {
                  "answer_id": 321,
                  "document_id": 16,
                  "question_id": 315,
                  "text": "When a variable is immutable, once a value is bound to a name, you can’t change\nthat value",
                  "answer_start": 500,
                  "answer_end": 590,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What will happen when I try to change the value of an immutable variable?",
              "id": 316,
              "answers": [
                {
                  "answer_id": 322,
                  "document_id": 16,
                  "question_id": 316,
                  "text": "we get compile-time errors when we attempt to change a\nvalue that’s designated as immutable",
                  "answer_start": 1802,
                  "answer_end": 1893,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are constants?",
              "id": 317,
              "answers": [
                {
                  "answer_id": 323,
                  "document_id": 16,
                  "question_id": 317,
                  "text": "values that are bound to a name and\nare not allowed to change",
                  "answer_start": 3578,
                  "answer_end": 3639,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can I use 'mut' with constants?",
              "id": 318,
              "answers": [
                {
                  "answer_id": 324,
                  "document_id": 16,
                  "question_id": 318,
                  "text": "you aren’t allowed to use `mut` with constants",
                  "answer_start": 3714,
                  "answer_end": 3760,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what syntax can I declare constant?",
              "id": 320,
              "answers": [
                {
                  "answer_id": 326,
                  "document_id": 16,
                  "question_id": 320,
                  "text": "You declare constants using the\n`const` keyword",
                  "answer_start": 3831,
                  "answer_end": 3878,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How should I name constants?",
              "id": 321,
              "answers": [
                {
                  "answer_id": 327,
                  "document_id": 16,
                  "question_id": 321,
                  "text": "Rust’s naming convention for constants is to use all uppercase with\nunderscores between words",
                  "answer_start": 4796,
                  "answer_end": 4889,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can I declare a new variable with the same value as a previous variable?",
              "id": 322,
              "answers": [
                {
                  "answer_id": 328,
                  "document_id": 16,
                  "question_id": 322,
                  "text": "you can declare a\nnew variable with the same name as a previous variable",
                  "answer_start": 6021,
                  "answer_end": 6093,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How do we call a situation when two variables have the same name?",
              "id": 323,
              "answers": [
                {
                  "answer_id": 329,
                  "document_id": 16,
                  "question_id": 323,
                  "text": "shadowed",
                  "answer_start": 6138,
                  "answer_end": 6146,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What will happen when we have two variables with the same name?",
              "id": 324,
              "answers": [
                {
                  "answer_id": 330,
                  "document_id": 16,
                  "question_id": 324,
                  "text": "the second variable overshadows the first, taking any uses of the\nvariable name to itself until either it itself is shadowed or the scope ends",
                  "answer_start": 6280,
                  "answer_end": 6422,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the difference between shadowing and mutability?",
              "id": 325,
              "answers": [
                {
                  "answer_id": 331,
                  "document_id": 16,
                  "question_id": 325,
                  "text": "Shadowing is different from marking a variable as `mut` because we’ll get a\ncompile-time error if we accidentally try to reassign to this variable without\nusing the `let` keyword.",
                  "answer_start": 7333,
                  "answer_end": 7512,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## Variables and Mutability\n\nAs mentioned in the [“Storing Values with\nVariables”][storing-values-with-variables]<!-- ignore --> section, by default,\nvariables are immutable. This is one of many nudges Rust gives you to write\nyour code in a way that takes advantage of the safety and easy concurrency that\nRust offers. However, you still have the option to make your variables mutable.\nLet’s explore how and why Rust encourages you to favor immutability and why\nsometimes you might want to opt out.\n\nWhen a variable is immutable, once a value is bound to a name, you can’t change\nthat value. To illustrate this, generate a new project called *variables* in\nyour *projects* directory by using `cargo new variables`.\n\nThen, in your new *variables* directory, open *src/main.rs* and replace its\ncode with the following code, which won’t compile just yet:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-01-variables-are-immutable/src/main.rs}}\n```\n\nSave and run the program using `cargo run`. You should receive an error message\nregarding an immutability error, as shown in this output:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-01-variables-are-immutable/output.txt}}\n```\n\nThis example shows how the compiler helps you find errors in your programs.\nCompiler errors can be frustrating, but really they only mean your program\nisn’t safely doing what you want it to do yet; they do *not* mean that you’re\nnot a good programmer! Experienced Rustaceans still get compiler errors.\n\nYou received the error message `` cannot assign twice to immutable variable `x`\n`` because you tried to assign a second value to the immutable `x` variable.\n\nIt’s important that we get compile-time errors when we attempt to change a\nvalue that’s designated as immutable because this very situation can lead to\nbugs. If one part of our code operates on the assumption that a value will\nnever change and another part of our code changes that value, it’s possible\nthat the first part of the code won’t do what it was designed to do. The cause\nof this kind of bug can be difficult to track down after the fact, especially\nwhen the second piece of code changes the value only *sometimes*. The Rust\ncompiler guarantees that when you state that a value won’t change, it really\nwon’t change, so you don’t have to keep track of it yourself. Your code is thus\neasier to reason through.\n\nBut mutability can be very useful, and can make code more convenient to write.\nAlthough variables are immutable by default, you can make them mutable by\nadding `mut` in front of the variable name as you did in [Chapter\n2][storing-values-with-variables]<!-- ignore -->. Adding `mut` also conveys\nintent to future readers of the code by indicating that other parts of the code\nwill be changing this variable’s value.\n\nFor example, let’s change *src/main.rs* to the following:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-02-adding-mut/src/main.rs}}\n```\n\nWhen we run the program now, we get this:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-02-adding-mut/output.txt}}\n```\n\nWe’re allowed to change the value bound to `x` from `5` to `6` when `mut` is\nused. Ultimately, deciding whether to use mutability or not is up to you and\ndepends on what you think is clearest in that particular situation.\n\n### Constants\n\nLike immutable variables, *constants* are values that are bound to a name and\nare not allowed to change, but there are a few differences between constants\nand variables.\n\nFirst, you aren’t allowed to use `mut` with constants. Constants aren’t just\nimmutable by default—they’re always immutable. You declare constants using the\n`const` keyword instead of the `let` keyword, and the type of the value *must*\nbe annotated. We’ll cover types and type annotations in the next section,\n[“Data Types”][data-types]<!-- ignore -->, so don’t worry about the details\nright now. Just know that you must always annotate the type.\n\nConstants can be declared in any scope, including the global scope, which makes\nthem useful for values that many parts of code need to know about.\n\nThe last difference is that constants may be set only to a constant expression,\nnot the result of a value that could only be computed at runtime.\n\nHere’s an example of a constant declaration:\n\n```rust\nconst THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3;\n```\n\nThe constant’s name is `THREE_HOURS_IN_SECONDS` and its value is set to the\nresult of multiplying 60 (the number of seconds in a minute) by 60 (the number\nof minutes in an hour) by 3 (the number of hours we want to count in this\nprogram). Rust’s naming convention for constants is to use all uppercase with\nunderscores between words. The compiler is able to evaluate a limited set of\noperations at compile time, which lets us choose to write out this value in a\nway that’s easier to understand and verify, rather than setting this constant\nto the value 10,800. See the [Rust Reference’s section on constant\nevaluation][const-eval] for more information on what operations can be used\nwhen declaring constants.\n\nConstants are valid for the entire time a program runs, within the scope in\nwhich they were declared. This property makes constants useful for values in\nyour application domain that multiple parts of the program might need to know\nabout, such as the maximum number of points any player of a game is allowed to\nearn, or the speed of light.\n\nNaming hardcoded values used throughout your program as constants is useful in\nconveying the meaning of that value to future maintainers of the code. It also\nhelps to have only one place in your code you would need to change if the\nhardcoded value needed to be updated in the future.\n\n### Shadowing\n\nAs you saw in the guessing game tutorial in [Chapter\n2][comparing-the-guess-to-the-secret-number]<!-- ignore -->, you can declare a\nnew variable with the same name as a previous variable. Rustaceans say that the\nfirst variable is *shadowed* by the second, which means that the second\nvariable is what the compiler will see when you use the name of the variable.\nIn effect, the second variable overshadows the first, taking any uses of the\nvariable name to itself until either it itself is shadowed or the scope ends.\nWe can shadow a variable by using the same variable’s name and repeating the\nuse of the `let` keyword as follows:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-03-shadowing/src/main.rs}}\n```\n\nThis program first binds `x` to a value of `5`. Then it creates a new variable\n`x` by repeating `let x =`, taking the original value and adding `1` so the\nvalue of `x` is then `6`. Then, within an inner scope created with the curly\nbrackets, the third `let` statement also shadows `x` and creates a new\nvariable, multiplying the previous value by `2` to give `x` a value of `12`.\nWhen that scope is over, the inner shadowing ends and `x` returns to being `6`.\nWhen we run this program, it will output the following:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-03-shadowing/output.txt}}\n```\n\nShadowing is different from marking a variable as `mut` because we’ll get a\ncompile-time error if we accidentally try to reassign to this variable without\nusing the `let` keyword. By using `let`, we can perform a few transformations\non a value but have the variable be immutable after those transformations have\nbeen completed.\n\nThe other difference between `mut` and shadowing is that because we’re\neffectively creating a new variable when we use the `let` keyword again, we can\nchange the type of the value but reuse the same name. For example, say our\nprogram asks a user to show how many spaces they want between some text by\ninputting space characters, and then we want to store that input as a number:\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-04-shadowing-can-change-types/src/main.rs:here}}\n```\n\nThe first `spaces` variable is a string type and the second `spaces` variable\nis a number type. Shadowing thus spares us from having to come up with\ndifferent names, such as `spaces_str` and `spaces_num`; instead, we can reuse\nthe simpler `spaces` name. However, if we try to use `mut` for this, as shown\nhere, we’ll get a compile-time error:\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-05-mut-cant-change-types/src/main.rs:here}}\n```\n\nThe error says we’re not allowed to mutate a variable’s type:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-05-mut-cant-change-types/output.txt}}\n```\n\nNow that we’ve explored how variables work, let’s look at more data types they\ncan have.\n\n[comparing-the-guess-to-the-secret-number]:\nch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number\n[data-types]: ch03-02-data-types.html#data-types\n[storing-values-with-variables]: ch02-00-guessing-game-tutorial.html#storing-values-with-variables\n[const-eval]: ../reference/const_eval.html\n",
          "document_id": 16
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "What kind of language is Rust when it comes to typing?",
              "id": 356,
              "answers": [
                {
                  "answer_id": 365,
                  "document_id": 17,
                  "question_id": 356,
                  "text": "statically typed",
                  "answer_start": 246,
                  "answer_end": 262,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does it mean that language is statically typed?",
              "id": 357,
              "answers": [
                {
                  "answer_id": 366,
                  "document_id": 17,
                  "question_id": 357,
                  "text": "that it\nmust know the types of all variables at compile time",
                  "answer_start": 286,
                  "answer_end": 346,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What types represent single values?",
              "id": 358,
              "answers": [
                {
                  "answer_id": 367,
                  "document_id": 17,
                  "question_id": 358,
                  "text": "scalar",
                  "answer_start": 1198,
                  "answer_end": 1204,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What scalar types there are in Rust?",
              "id": 359,
              "answers": [
                {
                  "answer_id": 368,
                  "document_id": 17,
                  "question_id": 359,
                  "text": "integers, floating-point numbers, Booleans, and characters.",
                  "answer_start": 1274,
                  "answer_end": 1333,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How many scalar types does Rust have?",
              "id": 360,
              "answers": [
                {
                  "answer_id": 369,
                  "document_id": 17,
                  "question_id": 360,
                  "text": "four",
                  "answer_start": 1247,
                  "answer_end": 1251,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is an integer?",
              "id": 361,
              "answers": [
                {
                  "answer_id": 370,
                  "document_id": 17,
                  "question_id": 361,
                  "text": "number without a fractional component.",
                  "answer_start": 1470,
                  "answer_end": 1508,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does it mean that a variable can be signed or unsigned?",
              "id": 362,
              "answers": [
                {
                  "answer_id": 371,
                  "document_id": 17,
                  "question_id": 362,
                  "text": "whether it’s possible for the number to be\nnegative",
                  "answer_start": 2307,
                  "answer_end": 2358,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the examples of number literals of different types?",
              "id": 363,
              "answers": [
                {
                  "answer_id": 372,
                  "document_id": 17,
                  "question_id": 363,
                  "text": "| Decimal          | `98_222`      |\n| Hex              | `0xff`        |\n| Octal            | `0o77`        |\n| Binary           | `0b1111_0000` |\n| Byte (`u8` only) | `b'A'`        |",
                  "answer_start": 3974,
                  "answer_end": 4158,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How do we call a situation when we assign a value outside the range of an integer?",
              "id": 364,
              "answers": [
                {
                  "answer_id": 373,
                  "document_id": 17,
                  "question_id": 364,
                  "text": "integer overflow",
                  "answer_start": 4609,
                  "answer_end": 4625,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What will happen if an integer overflow occurs in debug mode?",
              "id": 365,
              "answers": [
                {
                  "answer_id": 374,
                  "document_id": 17,
                  "question_id": 365,
                  "text": "panic",
                  "answer_start": 4792,
                  "answer_end": 4797,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What will happen if an integer overflow occurs in release mode?",
              "id": 366,
              "answers": [
                {
                  "answer_id": 375,
                  "document_id": 17,
                  "question_id": 366,
                  "text": "two’s complement wrapping",
                  "answer_start": 5249,
                  "answer_end": 5274,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How do we call types with decimal points?",
              "id": 367,
              "answers": [
                {
                  "answer_id": 376,
                  "document_id": 17,
                  "question_id": 367,
                  "text": "f32` and `f64`",
                  "answer_start": 6367,
                  "answer_end": 6381,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What operations can we perform on numbers?",
              "id": 368,
              "answers": [
                {
                  "answer_id": 377,
                  "document_id": 17,
                  "question_id": 368,
                  "text": "addition, subtraction, multiplication, division, and remainder",
                  "answer_start": 7096,
                  "answer_end": 7158,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the possible values of a boolean variable?",
              "id": 369,
              "answers": [
                {
                  "answer_id": 378,
                  "document_id": 17,
                  "question_id": 369,
                  "text": "`true` and `false`",
                  "answer_start": 7823,
                  "answer_end": 7841,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the main way to use booleans?",
              "id": 370,
              "answers": [
                {
                  "answer_id": 379,
                  "document_id": 17,
                  "question_id": 370,
                  "text": "through conditionals, such as an `if`\nexpression",
                  "answer_start": 8144,
                  "answer_end": 8192,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How do we call the most primitive alphabetic type?",
              "id": 371,
              "answers": [
                {
                  "answer_id": 380,
                  "document_id": 17,
                  "question_id": 371,
                  "text": "char",
                  "answer_start": 8336,
                  "answer_end": 8340,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the definition of compound types?",
              "id": 372,
              "answers": [
                {
                  "answer_id": 381,
                  "document_id": 17,
                  "question_id": 372,
                  "text": "can group multiple values into one type",
                  "answer_start": 9394,
                  "answer_end": 9433,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How many compound types have Rust by default?",
              "id": 373,
              "answers": [
                {
                  "answer_id": 382,
                  "document_id": 17,
                  "question_id": 373,
                  "text": "Rust has two\nprimitive compound types: tuples and arrays",
                  "answer_start": 9435,
                  "answer_end": 9491,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is a tuple?",
              "id": 374,
              "answers": [
                {
                  "answer_id": 383,
                  "document_id": 17,
                  "question_id": 374,
                  "text": "general way of grouping together a number of values with a\nvariety of types into one compound type",
                  "answer_start": 9530,
                  "answer_end": 9628,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How do we declare a tuple?",
              "id": 375,
              "answers": [
                {
                  "answer_id": 384,
                  "document_id": 17,
                  "question_id": 375,
                  "text": "by writing a comma-separated list of values inside\nparentheses",
                  "answer_start": 9728,
                  "answer_end": 9790,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can we access a tuple element?",
              "id": 376,
              "answers": [
                {
                  "answer_id": 385,
                  "document_id": 17,
                  "question_id": 376,
                  "text": "by using a period (`.`) followed by\nthe index of the value we want to access",
                  "answer_start": 10898,
                  "answer_end": 10974,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the difference between array and tuple?",
              "id": 377,
              "answers": [
                {
                  "answer_id": 386,
                  "document_id": 17,
                  "question_id": 377,
                  "text": "Unlike\na tuple, every element of an array must have the same type",
                  "answer_start": 11692,
                  "answer_end": 11757,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Do arrays have a fixed length?",
              "id": 378,
              "answers": [
                {
                  "answer_id": 387,
                  "document_id": 17,
                  "question_id": 378,
                  "text": "arrays in Rust have a fixed length",
                  "answer_start": 11798,
                  "answer_end": 11832,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the use case for an array?",
              "id": 379,
              "answers": [
                {
                  "answer_id": 388,
                  "document_id": 17,
                  "question_id": 379,
                  "text": "Arrays are useful when you want your data allocated on the stack rather than\nthe heap",
                  "answer_start": 12083,
                  "answer_end": 12168,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is a vector?",
              "id": 380,
              "answers": [
                {
                  "answer_id": 389,
                  "document_id": 17,
                  "question_id": 380,
                  "text": "collection type provided by the standard\nlibrary that *is* allowed to grow or shrink in size",
                  "answer_start": 12411,
                  "answer_end": 12503,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I access elements in arrays?",
              "id": 381,
              "answers": [
                {
                  "answer_id": 391,
                  "document_id": 17,
                  "question_id": 381,
                  "text": "You can access elements of an array using indexing",
                  "answer_start": 13956,
                  "answer_end": 14006,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## Data Types\n\nEvery value in Rust is of a certain *data type*, which tells Rust what kind of\ndata is being specified so it knows how to work with that data. We’ll look at\ntwo data type subsets: scalar and compound.\n\nKeep in mind that Rust is a *statically typed* language, which means that it\nmust know the types of all variables at compile time. The compiler can usually\ninfer what type we want to use based on the value and how we use it. In cases\nwhen many types are possible, such as when we converted a `String` to a numeric\ntype using `parse` in the [“Comparing the Guess to the Secret\nNumber”][comparing-the-guess-to-the-secret-number]<!-- ignore --> section in\nChapter 2, we must add a type annotation, like this:\n\n```rust\nlet guess: u32 = \"42\".parse().expect(\"Not a number!\");\n```\n\nIf we don’t add the `: u32` type annotation shown in the preceding code, Rust\nwill display the following error, which means the compiler needs more\ninformation from us to know which type we want to use:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/output-only-01-no-type-annotations/output.txt}}\n```\n\nYou’ll see different type annotations for other data types.\n\n### Scalar Types\n\nA *scalar* type represents a single value. Rust has four primary scalar types:\nintegers, floating-point numbers, Booleans, and characters. You may recognize\nthese from other programming languages. Let’s jump into how they work in Rust.\n\n#### Integer Types\n\nAn *integer* is a number without a fractional component. We used one integer\ntype in Chapter 2, the `u32` type. This type declaration indicates that the\nvalue it’s associated with should be an unsigned integer (signed integer types\nstart with `i` instead of `u`) that takes up 32 bits of space. Table 3-1 shows\nthe built-in integer types in Rust. We can use any of these variants to declare\nthe type of an integer value.\n\n<span class=\"caption\">Table 3-1: Integer Types in Rust</span>\n\n| Length  | Signed  | Unsigned |\n|---------|---------|----------|\n| 8-bit   | `i8`    | `u8`     |\n| 16-bit  | `i16`   | `u16`    |\n| 32-bit  | `i32`   | `u32`    |\n| 64-bit  | `i64`   | `u64`    |\n| 128-bit | `i128`  | `u128`   |\n| arch    | `isize` | `usize`  |\n\nEach variant can be either signed or unsigned and has an explicit size.\n*Signed* and *unsigned* refer to whether it’s possible for the number to be\nnegative—in other words, whether the number needs to have a sign with it\n(signed) or whether it will only ever be positive and can therefore be\nrepresented without a sign (unsigned). It’s like writing numbers on paper: when\nthe sign matters, a number is shown with a plus sign or a minus sign; however,\nwhen it’s safe to assume the number is positive, it’s shown with no sign.\nSigned numbers are stored using [two’s complement][twos-complement]<!-- ignore\n--> representation.\n\nEach signed variant can store numbers from -(2<sup>n - 1</sup>) to 2<sup>n -\n1</sup> - 1 inclusive, where *n* is the number of bits that variant uses. So an\n`i8` can store numbers from -(2<sup>7</sup>) to 2<sup>7</sup> - 1, which equals\n-128 to 127. Unsigned variants can store numbers from 0 to 2<sup>n</sup> - 1,\nso a `u8` can store numbers from 0 to 2<sup>8</sup> - 1, which equals 0 to 255.\n\nAdditionally, the `isize` and `usize` types depend on the architecture of the\ncomputer your program is running on, which is denoted in the table as “arch”:\n64 bits if you’re on a 64-bit architecture and 32 bits if you’re on a 32-bit\narchitecture.\n\nYou can write integer literals in any of the forms shown in Table 3-2. Note\nthat number literals that can be multiple numeric types allow a type suffix,\nsuch as `57u8`, to designate the type. Number literals can also use `_` as a\nvisual separator to make the number easier to read, such as `1_000`, which will\nhave the same value as if you had specified `1000`.\n\n<span class=\"caption\">Table 3-2: Integer Literals in Rust</span>\n\n| Number literals  | Example       |\n|------------------|---------------|\n| Decimal          | `98_222`      |\n| Hex              | `0xff`        |\n| Octal            | `0o77`        |\n| Binary           | `0b1111_0000` |\n| Byte (`u8` only) | `b'A'`        |\n\nSo how do you know which type of integer to use? If you’re unsure, Rust’s\ndefaults are generally good places to start: integer types default to `i32`.\nThe primary situation in which you’d use `isize` or `usize` is when indexing\nsome sort of collection.\n\n> ##### Integer Overflow\n>\n> Let’s say you have a variable of type `u8` that can hold values between 0 and\n> 255. If you try to change the variable to a value outside that range, such as\n> 256, *integer overflow* will occur, which can result in one of two behaviors.\n> When you’re compiling in debug mode, Rust includes checks for integer overflow\n> that cause your program to *panic* at runtime if this behavior occurs. Rust\n> uses the term *panicking* when a program exits with an error; we’ll discuss\n> panics in more depth in the [“Unrecoverable Errors with\n> `panic!`”][unrecoverable-errors-with-panic]<!-- ignore --> section in Chapter\n> 9.\n>\n> When you’re compiling in release mode with the `--release` flag, Rust does\n> *not* include checks for integer overflow that cause panics. Instead, if\n> overflow occurs, Rust performs *two’s complement wrapping*. In short, values\n> greater than the maximum value the type can hold “wrap around” to the minimum\n> of the values the type can hold. In the case of a `u8`, the value 256 becomes\n> 0, the value 257 becomes 1, and so on. The program won’t panic, but the\n> variable will have a value that probably isn’t what you were expecting it to\n> have. Relying on integer overflow’s wrapping behavior is considered an error.\n>\n> To explicitly handle the possibility of overflow, you can use these families\n> of methods provided by the standard library for primitive numeric types:\n>\n> * Wrap in all modes with the `wrapping_*` methods, such as `wrapping_add`.\n> * Return the `None` value if there is overflow with the `checked_*` methods.\n> * Return the value and a boolean indicating whether there was overflow with\n>   the `overflowing_*` methods.\n> * Saturate at the value’s minimum or maximum values with the `saturating_*`\n>   methods.\n\n#### Floating-Point Types\n\nRust also has two primitive types for *floating-point numbers*, which are\nnumbers with decimal points. Rust’s floating-point types are `f32` and `f64`,\nwhich are 32 bits and 64 bits in size, respectively. The default type is `f64`\nbecause on modern CPUs, it’s roughly the same speed as `f32` but is capable of\nmore precision. All floating-point types are signed.\n\nHere’s an example that shows floating-point numbers in action:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-06-floating-point/src/main.rs}}\n```\n\nFloating-point numbers are represented according to the IEEE-754 standard. The\n`f32` type is a single-precision float, and `f64` has double precision.\n\n#### Numeric Operations\n\nRust supports the basic mathematical operations you’d expect for all the number\ntypes: addition, subtraction, multiplication, division, and remainder. Integer\ndivision truncates toward zero to the nearest integer. The following code shows\nhow you’d use each numeric operation in a `let` statement:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-07-numeric-operations/src/main.rs}}\n```\n\nEach expression in these statements uses a mathematical operator and evaluates\nto a single value, which is then bound to a variable. [Appendix\nB][appendix_b]<!-- ignore --> contains a list of all operators that Rust\nprovides.\n\n#### The Boolean Type\n\nAs in most other programming languages, a Boolean type in Rust has two possible\nvalues: `true` and `false`. Booleans are one byte in size. The Boolean type in\nRust is specified using `bool`. For example:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-08-boolean/src/main.rs}}\n```\n\nThe main way to use Boolean values is through conditionals, such as an `if`\nexpression. We’ll cover how `if` expressions work in Rust in the [“Control\nFlow”][control-flow]<!-- ignore --> section.\n\n#### The Character Type\n\nRust’s `char` type is the language’s most primitive alphabetic type. Here are\nsome examples of declaring `char` values:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-09-char/src/main.rs}}\n```\n\nNote that we specify `char` literals with single quotes, as opposed to string\nliterals, which use double quotes. Rust’s `char` type is four bytes in size and\nrepresents a Unicode Scalar Value, which means it can represent a lot more than\njust ASCII. Accented letters; Chinese, Japanese, and Korean characters; emoji;\nand zero-width spaces are all valid `char` values in Rust. Unicode Scalar\nValues range from `U+0000` to `U+D7FF` and `U+E000` to `U+10FFFF` inclusive.\nHowever, a “character” isn’t really a concept in Unicode, so your human\nintuition for what a “character” is may not match up with what a `char` is in\nRust. We’ll discuss this topic in detail in [“Storing UTF-8 Encoded Text with\nStrings”][strings]<!-- ignore --> in Chapter 8.\n\n### Compound Types\n\n*Compound types* can group multiple values into one type. Rust has two\nprimitive compound types: tuples and arrays.\n\n#### The Tuple Type\n\nA *tuple* is a general way of grouping together a number of values with a\nvariety of types into one compound type. Tuples have a fixed length: once\ndeclared, they cannot grow or shrink in size.\n\nWe create a tuple by writing a comma-separated list of values inside\nparentheses. Each position in the tuple has a type, and the types of the\ndifferent values in the tuple don’t have to be the same. We’ve added optional\ntype annotations in this example:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-10-tuples/src/main.rs}}\n```\n\nThe variable `tup` binds to the entire tuple because a tuple is considered a\nsingle compound element. To get the individual values out of a tuple, we can\nuse pattern matching to destructure a tuple value, like this:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-11-destructuring-tuples/src/main.rs}}\n```\n\nThis program first creates a tuple and binds it to the variable `tup`. It then\nuses a pattern with `let` to take `tup` and turn it into three separate\nvariables, `x`, `y`, and `z`. This is called *destructuring* because it breaks\nthe single tuple into three parts. Finally, the program prints the value of\n`y`, which is `6.4`.\n\nWe can also access a tuple element directly by using a period (`.`) followed by\nthe index of the value we want to access. For example:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-12-tuple-indexing/src/main.rs}}\n```\n\nThis program creates the tuple `x` and then accesses each element of the tuple\nusing their respective indices. As with most programming languages, the first\nindex in a tuple is 0.\n\nThe tuple without any values has a special name, *unit*. This value and its\ncorresponding type are both written `()` and represent an empty value or an\nempty return type. Expressions implicitly return the unit value if they don’t\nreturn any other value.\n\n#### The Array Type\n\nAnother way to have a collection of multiple values is with an *array*. Unlike\na tuple, every element of an array must have the same type. Unlike arrays in\nsome other languages, arrays in Rust have a fixed length.\n\nWe write the values in an array as a comma-separated list inside square\nbrackets:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-13-arrays/src/main.rs}}\n```\n\nArrays are useful when you want your data allocated on the stack rather than\nthe heap (we will discuss the stack and the heap more in [Chapter\n4][stack-and-heap]<!-- ignore -->) or when you want to ensure you always have a\nfixed number of elements. An array isn’t as flexible as the vector type,\nthough. A *vector* is a similar collection type provided by the standard\nlibrary that *is* allowed to grow or shrink in size. If you’re unsure whether\nto use an array or a vector, chances are you should use a vector. [Chapter\n8][vectors]<!-- ignore --> discusses vectors in more detail.\n\nHowever, arrays are more useful when you know the number of elements will not\nneed to change. For example, if you were using the names of the month in a\nprogram, you would probably use an array rather than a vector because you know\nit will always contain 12 elements:\n\n```rust\nlet months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n              \"August\", \"September\", \"October\", \"November\", \"December\"];\n```\n\nYou write an array’s type using square brackets with the type of each element,\na semicolon, and then the number of elements in the array, like so:\n\n```rust\nlet a: [i32; 5] = [1, 2, 3, 4, 5];\n```\n\nHere, `i32` is the type of each element. After the semicolon, the number `5`\nindicates the array contains five elements.\n\nYou can also initialize an array to contain the same value for each element by\nspecifying the initial value, followed by a semicolon, and then the length of\nthe array in square brackets, as shown here:\n\n```rust\nlet a = [3; 5];\n```\n\nThe array named `a` will contain `5` elements that will all be set to the value\n`3` initially. This is the same as writing `let a = [3, 3, 3, 3, 3];` but in a\nmore concise way.\n\n##### Accessing Array Elements\n\nAn array is a single chunk of memory of a known, fixed size that can be\nallocated on the stack. You can access elements of an array using indexing,\nlike this:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-14-array-indexing/src/main.rs}}\n```\n\nIn this example, the variable named `first` will get the value `1` because that\nis the value at index `[0]` in the array. The variable named `second` will get\nthe value `2` from index `[1]` in the array.\n\n##### Invalid Array Element Access\n\nLet’s see what happens if you try to access an element of an array that is past\nthe end of the array. Say you run this code, similar to the guessing game in\nChapter 2, to get an array index from the user:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,panics\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-15-invalid-array-access/src/main.rs}}\n```\n\nThis code compiles successfully. If you run this code using `cargo run` and\nenter `0`, `1`, `2`, `3`, or `4`, the program will print out the corresponding\nvalue at that index in the array. If you instead enter a number past the end of\nthe array, such as `10`, you’ll see output like this:\n\n<!-- manual-regeneration\ncd listings/ch03-common-programming-concepts/no-listing-15-invalid-array-access\ncargo run\n10\n-->\n\n```console\nthread 'main' panicked at 'index out of bounds: the len is 5 but the index is 10', src/main.rs:19:19\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n```\n\nThe program resulted in a *runtime* error at the point of using an invalid\nvalue in the indexing operation. The program exited with an error message and\ndidn’t execute the final `println!` statement. When you attempt to access an\nelement using indexing, Rust will check that the index you’ve specified is less\nthan the array length. If the index is greater than or equal to the length,\nRust will panic. This check has to happen at runtime, especially in this case,\nbecause the compiler can’t possibly know what value a user will enter when they\nrun the code later.\n\nThis is an example of Rust’s memory safety principles in action. In many\nlow-level languages, this kind of check is not done, and when you provide an\nincorrect index, invalid memory can be accessed. Rust protects you against this\nkind of error by immediately exiting instead of allowing the memory access and\ncontinuing. Chapter 9 discusses more of Rust’s error handling and how you can\nwrite readable, safe code that neither panics nor allows invalid memory access.\n\n[comparing-the-guess-to-the-secret-number]:\nch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number\n[twos-complement]: https://en.wikipedia.org/wiki/Two%27s_complement\n[control-flow]: ch03-05-control-flow.html#control-flow\n[strings]: ch08-02-strings.html#storing-utf-8-encoded-text-with-strings\n[stack-and-heap]: ch04-01-what-is-ownership.html#the-stack-and-the-heap\n[vectors]: ch08-01-vectors.html\n[unrecoverable-errors-with-panic]: ch09-01-unrecoverable-errors-with-panic.html\n[appendix_b]: appendix-02-operators.md\n",
          "document_id": 17
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "What is the most important function in Rust?",
              "id": 326,
              "answers": [
                {
                  "answer_id": 332,
                  "document_id": 18,
                  "question_id": 326,
                  "text": "`main` function",
                  "answer_start": 129,
                  "answer_end": 144,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which keyword allows us to declare new functions?",
              "id": 327,
              "answers": [
                {
                  "answer_id": 333,
                  "document_id": 18,
                  "question_id": 327,
                  "text": "fn",
                  "answer_start": 211,
                  "answer_end": 213,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the naming convention for functions?",
              "id": 328,
              "answers": [
                {
                  "answer_id": 334,
                  "document_id": 18,
                  "question_id": 328,
                  "text": "snake case",
                  "answer_start": 284,
                  "answer_end": 294,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the purpose of {} with the function?",
              "id": 329,
              "answers": [
                {
                  "answer_id": 335,
                  "document_id": 18,
                  "question_id": 329,
                  "text": "The curly brackets tell the compiler where the function\nbody begins and ends",
                  "answer_start": 754,
                  "answer_end": 830,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How do we call a function?",
              "id": 330,
              "answers": [
                {
                  "answer_id": 337,
                  "document_id": 18,
                  "question_id": 330,
                  "text": "We can call any function we’ve defined by entering its name followed by a set\nof parentheses",
                  "answer_start": 833,
                  "answer_end": 925,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the function's parameters?",
              "id": 331,
              "answers": [
                {
                  "answer_id": 338,
                  "document_id": 18,
                  "question_id": 331,
                  "text": "which are special variables that\nare part of a function’s signature",
                  "answer_start": 1832,
                  "answer_end": 1899,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is another word for parameter?",
              "id": 332,
              "answers": [
                {
                  "answer_id": 339,
                  "document_id": 18,
                  "question_id": 332,
                  "text": "argument",
                  "answer_start": 2126,
                  "answer_end": 2134,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Do I need to declare the type of the parameter?",
              "id": 333,
              "answers": [
                {
                  "answer_id": 340,
                  "document_id": 18,
                  "question_id": 333,
                  "text": "In function signatures, you *must* declare the type of each parameter",
                  "answer_start": 2950,
                  "answer_end": 3019,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How should I separate parameters in the function declaration?",
              "id": 334,
              "answers": [
                {
                  "answer_id": 341,
                  "document_id": 18,
                  "question_id": 334,
                  "text": "ith\ncommas",
                  "answer_start": 3410,
                  "answer_end": 3420,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How does the function look like?",
              "id": 335,
              "answers": [
                {
                  "answer_id": 342,
                  "document_id": 18,
                  "question_id": 335,
                  "text": "made up of a series of statements optionally ending in an\nexpression",
                  "answer_start": 4403,
                  "answer_end": 4471,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are statements?",
              "id": 336,
              "answers": [
                {
                  "answer_id": 343,
                  "document_id": 18,
                  "question_id": 336,
                  "text": "re instructions that perform some action and do not return\n  a value",
                  "answer_start": 4878,
                  "answer_end": 4946,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are expressions?",
              "id": 337,
              "answers": [
                {
                  "answer_id": 344,
                  "document_id": 18,
                  "question_id": 337,
                  "text": "evaluate to a resultant value",
                  "answer_start": 4966,
                  "answer_end": 4995,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Are function definitions statements?",
              "id": 338,
              "answers": [
                {
                  "answer_id": 345,
                  "document_id": 18,
                  "question_id": 338,
                  "text": "Function definitions are also statements",
                  "answer_start": 5472,
                  "answer_end": 5512,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How do we declare what type is returned by a function?",
              "id": 339,
              "answers": [
                {
                  "answer_id": 346,
                  "document_id": 18,
                  "question_id": 339,
                  "text": " after an arrow",
                  "answer_start": 7841,
                  "answer_end": 7856,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## Functions\n\nFunctions are prevalent in Rust code. You’ve already seen one of the most\nimportant functions in the language: the `main` function, which is the entry\npoint of many programs. You’ve also seen the `fn` keyword, which allows you to\ndeclare new functions.\n\nRust code uses *snake case* as the conventional style for function and variable\nnames, in which all letters are lowercase and underscores separate words.\nHere’s a program that contains an example function definition:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-16-functions/src/main.rs}}\n```\n\nWe define a function in Rust by entering `fn` followed by a function name and a\nset of parentheses. The curly brackets tell the compiler where the function\nbody begins and ends.\n\nWe can call any function we’ve defined by entering its name followed by a set\nof parentheses. Because `another_function` is defined in the program, it can be\ncalled from inside the `main` function. Note that we defined `another_function`\n*after* the `main` function in the source code; we could have defined it before\nas well. Rust doesn’t care where you define your functions, only that they’re\ndefined somewhere in a scope that can be seen by the caller.\n\nLet’s start a new binary project named *functions* to explore functions\nfurther. Place the `another_function` example in *src/main.rs* and run it. You\nshould see the following output:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-16-functions/output.txt}}\n```\n\nThe lines execute in the order in which they appear in the `main` function.\nFirst the “Hello, world!” message prints, and then `another_function` is called\nand its message is printed.\n\n### Parameters\n\nWe can define functions to have *parameters*, which are special variables that\nare part of a function’s signature. When a function has parameters, you can\nprovide it with concrete values for those parameters. Technically, the concrete\nvalues are called *arguments*, but in casual conversation, people tend to use\nthe words *parameter* and *argument* interchangeably for either the variables\nin a function’s definition or the concrete values passed in when you call a\nfunction.\n\nIn this version of `another_function` we add a parameter:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-17-functions-with-parameters/src/main.rs}}\n```\n\nTry running this program; you should get the following output:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-17-functions-with-parameters/output.txt}}\n```\n\nThe declaration of `another_function` has one parameter named `x`. The type of\n`x` is specified as `i32`. When we pass `5` in to `another_function`, the\n`println!` macro puts `5` where the pair of curly brackets containing `x` was\nin the format string.\n\nIn function signatures, you *must* declare the type of each parameter. This is\na deliberate decision in Rust’s design: requiring type annotations in function\ndefinitions means the compiler almost never needs you to use them elsewhere in\nthe code to figure out what type you mean. The compiler is also able to give\nmore helpful error messages if it knows what types the function expects.\n\nWhen defining multiple parameters, separate the parameter declarations with\ncommas, like this:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-18-functions-with-multiple-parameters/src/main.rs}}\n```\n\nThis example creates a function named `print_labeled_measurement` with two\nparameters. The first parameter is named `value` and is an `i32`. The second is\nnamed `unit_label` and is type `char`. The function then prints text containing\nboth the `value` and the `unit_label`.\n\nLet’s try running this code. Replace the program currently in your *functions*\nproject’s *src/main.rs* file with the preceding example and run it using `cargo\nrun`:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-18-functions-with-multiple-parameters/output.txt}}\n```\n\nBecause we called the function with `5` as the value for `value` and `'h'` as\nthe value for `unit_label`, the program output contains those values.\n\n### Statements and Expressions\n\nFunction bodies are made up of a series of statements optionally ending in an\nexpression. So far, the functions we’ve covered haven’t included an ending\nexpression, but you have seen an expression as part of a statement. Because\nRust is an expression-based language, this is an important distinction to\nunderstand. Other languages don’t have the same distinctions, so let’s look at\nwhat statements and expressions are and how their differences affect the bodies\nof functions.\n\n* **Statements** are instructions that perform some action and do not return\n  a value.\n* **Expressions** evaluate to a resultant value. Let’s look at some examples.\n\nWe’ve actually already used statements and expressions. Creating a variable and\nassigning a value to it with the `let` keyword is a statement. In Listing 3-1,\n`let y = 6;` is a statement.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/listing-03-01/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 3-1: A `main` function declaration containing one statement</span>\n\nFunction definitions are also statements; the entire preceding example is a\nstatement in itself.\n\nStatements do not return values. Therefore, you can’t assign a `let` statement\nto another variable, as the following code tries to do; you’ll get an error:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-19-statements-vs-expressions/src/main.rs}}\n```\n\nWhen you run this program, the error you’ll get looks like this:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-19-statements-vs-expressions/output.txt}}\n```\n\nThe `let y = 6` statement does not return a value, so there isn’t anything for\n`x` to bind to. This is different from what happens in other languages, such as\nC and Ruby, where the assignment returns the value of the assignment. In those\nlanguages, you can write `x = y = 6` and have both `x` and `y` have the value\n`6`; that is not the case in Rust.\n\nExpressions evaluate to a value and make up most of the rest of the code that\nyou’ll write in Rust. Consider a math operation, such as `5 + 6`, which is an\nexpression that evaluates to the value `11`. Expressions can be part of\nstatements: in Listing 3-1, the `6` in the statement `let y = 6;` is an\nexpression that evaluates to the value `6`. Calling a function is an\nexpression. Calling a macro is an expression. A new scope block created with\ncurly brackets is an expression, for example:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-20-blocks-are-expressions/src/main.rs}}\n```\n\nThis expression:\n\n```rust,ignore\n{\n    let x = 3;\n    x + 1\n}\n```\n\nis a block that, in this case, evaluates to `4`. That value gets bound to `y`\nas part of the `let` statement. Note that the `x + 1` line doesn’t have a\nsemicolon at the end, which is unlike most of the lines you’ve seen so far.\nExpressions do not include ending semicolons. If you add a semicolon to the end\nof an expression, you turn it into a statement, and it will then not return a\nvalue. Keep this in mind as you explore function return values and expressions\nnext.\n\n### Functions with Return Values\n\nFunctions can return values to the code that calls them. We don’t name return\nvalues, but we must declare their type after an arrow (`->`). In Rust, the\nreturn value of the function is synonymous with the value of the final\nexpression in the block of the body of a function. You can return early from a\nfunction by using the `return` keyword and specifying a value, but most\nfunctions return the last expression implicitly. Here’s an example of a\nfunction that returns a value:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-21-function-return-values/src/main.rs}}\n```\n\nThere are no function calls, macros, or even `let` statements in the `five`\nfunction—just the number `5` by itself. That’s a perfectly valid function in\nRust. Note that the function’s return type is specified too, as `-> i32`. Try\nrunning this code; the output should look like this:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-21-function-return-values/output.txt}}\n```\n\nThe `5` in `five` is the function’s return value, which is why the return type\nis `i32`. Let’s examine this in more detail. There are two important bits:\nfirst, the line `let x = five();` shows that we’re using the return value of a\nfunction to initialize a variable. Because the function `five` returns a `5`,\nthat line is the same as the following:\n\n```rust\nlet x = 5;\n```\n\nSecond, the `five` function has no parameters and defines the type of the\nreturn value, but the body of the function is a lonely `5` with no semicolon\nbecause it’s an expression whose value we want to return.\n\nLet’s look at another example:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-22-function-parameter-and-return/src/main.rs}}\n```\n\nRunning this code will print `The value of x is: 6`. But if we place a\nsemicolon at the end of the line containing `x + 1`, changing it from an\nexpression to a statement, we’ll get an error:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-23-statements-dont-return-values/src/main.rs}}\n```\n\nCompiling this code produces an error, as follows:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-23-statements-dont-return-values/output.txt}}\n```\n\nThe main error message, `mismatched types`, reveals the core issue with this\ncode. The definition of the function `plus_one` says that it will return an\n`i32`, but statements don’t evaluate to a value, which is expressed by `()`,\nthe unit type. Therefore, nothing is returned, which contradicts the function\ndefinition and results in an error. In this output, Rust provides a message to\npossibly help rectify this issue: it suggests removing the semicolon, which\nwould fix the error.\n",
          "document_id": 18
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "How do we call parts of our program ignored by compiler?",
              "id": 278,
              "answers": [
                {
                  "answer_id": 284,
                  "document_id": 19,
                  "question_id": 278,
                  "text": "comments",
                  "answer_start": 156,
                  "answer_end": 164,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I create a comment?",
              "id": 279,
              "answers": [
                {
                  "answer_id": 285,
                  "document_id": 19,
                  "question_id": 279,
                  "text": "with two slashes, and the\ncomment continues until the end of the line",
                  "answer_start": 379,
                  "answer_end": 448,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can i create comments longer than one line with '//'?",
              "id": 280,
              "answers": [
                {
                  "answer_id": 286,
                  "document_id": 19,
                  "question_id": 280,
                  "text": "For comments that extend beyond a\nsingle line, you’ll need to include `//` on each line",
                  "answer_start": 450,
                  "answer_end": 537,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is an example of comment?",
              "id": 281,
              "answers": [
                {
                  "answer_id": 287,
                  "document_id": 19,
                  "question_id": 281,
                  "text": "// So we’re doing something complicated here, long enough that we need\n// multiple lines of comments to do it! Whew! Hopefully, this comment will\n// explain what’s going on.",
                  "answer_start": 559,
                  "answer_end": 732,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can comments be placed in the same line with code?",
              "id": 282,
              "answers": [
                {
                  "answer_id": 288,
                  "document_id": 19,
                  "question_id": 282,
                  "text": "Comments can also be placed at the end of lines containing code",
                  "answer_start": 738,
                  "answer_end": 801,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How are comments usually placed?",
              "id": 283,
              "answers": [
                {
                  "answer_id": 289,
                  "document_id": 19,
                  "question_id": 283,
                  "text": "But you’ll more often see them used in this format, with the comment on a\nseparate line above the code it’s annotating",
                  "answer_start": 983,
                  "answer_end": 1101,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## Comments\n\nAll programmers strive to make their code easy to understand, but sometimes\nextra explanation is warranted. In these cases, programmers leave *comments* in\ntheir source code that the compiler will ignore but people reading the source\ncode may find useful.\n\nHere’s a simple comment:\n\n```rust\n// hello, world\n```\n\nIn Rust, the idiomatic comment style starts a comment with two slashes, and the\ncomment continues until the end of the line. For comments that extend beyond a\nsingle line, you’ll need to include `//` on each line, like this:\n\n```rust\n// So we’re doing something complicated here, long enough that we need\n// multiple lines of comments to do it! Whew! Hopefully, this comment will\n// explain what’s going on.\n```\n\nComments can also be placed at the end of lines containing code:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-24-comments-end-of-line/src/main.rs}}\n```\n\nBut you’ll more often see them used in this format, with the comment on a\nseparate line above the code it’s annotating:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-25-comments-above-line/src/main.rs}}\n```\n\nRust also has another kind of comment, documentation comments, which we’ll\ndiscuss in the [“Publishing a Crate to Crates.io”][publishing]<!-- ignore -->\nsection of Chapter 14.\n\n[publishing]: ch14-02-publishing-to-crates-io.html\n",
          "document_id": 19
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "What allows us to run some block of code if some condition is true?",
              "id": 340,
              "answers": [
                {
                  "answer_id": 347,
                  "document_id": 20,
                  "question_id": 340,
                  "text": "`if` expressions and loops",
                  "answer_start": 293,
                  "answer_end": 319,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is 'if' for?",
              "id": 341,
              "answers": [
                {
                  "answer_id": 348,
                  "document_id": 20,
                  "question_id": 341,
                  "text": "allows you to branch your code depending on conditions",
                  "answer_start": 363,
                  "answer_end": 417,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can we understand the 'if' statement?",
              "id": 342,
              "answers": [
                {
                  "answer_id": 349,
                  "document_id": 20,
                  "question_id": 342,
                  "text": "f this condition is met, run this block\nof code. If the condition is not met, do not run this block of code.",
                  "answer_start": 461,
                  "answer_end": 569,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the syntax of 'if'?",
              "id": 343,
              "answers": [
                {
                  "answer_id": 350,
                  "document_id": 20,
                  "question_id": 343,
                  "text": "All `if` expressions start with the keyword `if`, followed by a condition",
                  "answer_start": 887,
                  "answer_end": 960,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is 'else' for?",
              "id": 344,
              "answers": [
                {
                  "answer_id": 351,
                  "document_id": 20,
                  "question_id": 344,
                  "text": "to give the program an alternative block of code to execute should the\ncondition evaluate to `false",
                  "answer_start": 1547,
                  "answer_end": 1646,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What types can I put inside the 'if' condition?",
              "id": 345,
              "answers": [
                {
                  "answer_id": 352,
                  "document_id": 20,
                  "question_id": 345,
                  "text": "bool",
                  "answer_start": 2426,
                  "answer_end": 2430,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Will Rust automatically convert non-boolean variables to bool?",
              "id": 346,
              "answers": [
                {
                  "answer_id": 355,
                  "document_id": 20,
                  "question_id": 346,
                  "text": "Rust will not automatically try to\nconvert non-Boolean types to a Boolean",
                  "answer_start": 3064,
                  "answer_end": 3137,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can we assign if result to variable?",
              "id": 347,
              "answers": [
                {
                  "answer_id": 356,
                  "document_id": 20,
                  "question_id": 347,
                  "text": "`if` is an expression, we can use it on the right side of a `let`\nstatement to assign the outcome to a variable",
                  "answer_start": 4852,
                  "answer_end": 4963,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what can we execute block of code many times?",
              "id": 348,
              "answers": [
                {
                  "answer_id": 357,
                  "document_id": 20,
                  "question_id": 348,
                  "text": "loops",
                  "answer_start": 7222,
                  "answer_end": 7227,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What kind of loops can we use in Rust?",
              "id": 349,
              "answers": [
                {
                  "answer_id": 358,
                  "document_id": 20,
                  "question_id": 349,
                  "text": "loop`, `while`, and `for`",
                  "answer_start": 7444,
                  "answer_end": 7469,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How many loops are in Rust?",
              "id": 350,
              "answers": [
                {
                  "answer_id": 359,
                  "document_id": 20,
                  "question_id": 350,
                  "text": "three",
                  "answer_start": 7421,
                  "answer_end": 7426,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How is 'loop' keyword working?",
              "id": 351,
              "answers": [
                {
                  "answer_id": 360,
                  "document_id": 20,
                  "question_id": 351,
                  "text": "The `loop` keyword tells Rust to execute a block of code over and over again\nforever or until you explicitly tell it to stop.",
                  "answer_start": 7525,
                  "answer_end": 7650,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What keyword can I use to stop the loop?",
              "id": 352,
              "answers": [
                {
                  "answer_id": 361,
                  "document_id": 20,
                  "question_id": 352,
                  "text": "break",
                  "answer_start": 8834,
                  "answer_end": 8839,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what keyword can we tell program to skip the rest of current loop iteration?",
              "id": 353,
              "answers": [
                {
                  "answer_id": 362,
                  "document_id": 20,
                  "question_id": 353,
                  "text": "continue",
                  "answer_start": 9167,
                  "answer_end": 9175,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How does 'while' loop work?",
              "id": 354,
              "answers": [
                {
                  "answer_id": 363,
                  "document_id": 20,
                  "question_id": 354,
                  "text": "While the\ncondition is `true`, the loop runs. When the condition ceases to be `true`, the\nprogram calls `break`, stopping the loop",
                  "answer_start": 11492,
                  "answer_end": 11622,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can we iterate through collection with 'while' loop?",
              "id": 355,
              "answers": [
                {
                  "answer_id": 364,
                  "document_id": 20,
                  "question_id": 355,
                  "text": "You can choose to use the `while` construct to loop over the elements of a\ncollection, such as an array",
                  "answer_start": 12558,
                  "answer_end": 12661,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## Control Flow\n\nThe ability to run some code depending on whether a condition is `true` and to\nrun some code repeatedly while a condition is `true` are basic building blocks\nin most programming languages. The most common constructs that let you control\nthe flow of execution of Rust code are `if` expressions and loops.\n\n### `if` Expressions\n\nAn `if` expression allows you to branch your code depending on conditions. You\nprovide a condition and then state, “If this condition is met, run this block\nof code. If the condition is not met, do not run this block of code.”\n\nCreate a new project called *branches* in your *projects* directory to explore\nthe `if` expression. In the *src/main.rs* file, input the following:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-26-if-true/src/main.rs}}\n```\n\nAll `if` expressions start with the keyword `if`, followed by a condition. In\nthis case, the condition checks whether or not the variable `number` has a\nvalue less than 5. We place the block of code to execute if the condition is\n`true` immediately after the condition inside curly brackets. Blocks of code\nassociated with the conditions in `if` expressions are sometimes called *arms*,\njust like the arms in `match` expressions that we discussed in the [“Comparing\nthe Guess to the Secret Number”][comparing-the-guess-to-the-secret-number]<!--\nignore --> section of Chapter 2.\n\nOptionally, we can also include an `else` expression, which we chose to do\nhere, to give the program an alternative block of code to execute should the\ncondition evaluate to `false`. If you don’t provide an `else` expression and\nthe condition is `false`, the program will just skip the `if` block and move on\nto the next bit of code.\n\nTry running this code; you should see the following output:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-26-if-true/output.txt}}\n```\n\nLet’s try changing the value of `number` to a value that makes the condition\n`false` to see what happens:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-27-if-false/src/main.rs:here}}\n```\n\nRun the program again, and look at the output:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-27-if-false/output.txt}}\n```\n\nIt’s also worth noting that the condition in this code *must* be a `bool`. If\nthe condition isn’t a `bool`, we’ll get an error. For example, try running the\nfollowing code:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-28-if-condition-must-be-bool/src/main.rs}}\n```\n\nThe `if` condition evaluates to a value of `3` this time, and Rust throws an\nerror:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-28-if-condition-must-be-bool/output.txt}}\n```\n\nThe error indicates that Rust expected a `bool` but got an integer. Unlike\nlanguages such as Ruby and JavaScript, Rust will not automatically try to\nconvert non-Boolean types to a Boolean. You must be explicit and always provide\n`if` with a Boolean as its condition. If we want the `if` code block to run\nonly when a number is not equal to `0`, for example, we can change the `if`\nexpression to the following:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-29-if-not-equal-0/src/main.rs}}\n```\n\nRunning this code will print `number was something other than zero`.\n\n#### Handling Multiple Conditions with `else if`\n\nYou can use multiple conditions by combining `if` and `else` in an `else if`\nexpression. For example:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-30-else-if/src/main.rs}}\n```\n\nThis program has four possible paths it can take. After running it, you should\nsee the following output:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-30-else-if/output.txt}}\n```\n\nWhen this program executes, it checks each `if` expression in turn and executes\nthe first body for which the condition evaluates to `true`. Note that even\nthough 6 is divisible by 2, we don’t see the output `number is divisible by 2`,\nnor do we see the `number is not divisible by 4, 3, or 2` text from the `else`\nblock. That’s because Rust only executes the block for the first `true`\ncondition, and once it finds one, it doesn’t even check the rest.\n\nUsing too many `else if` expressions can clutter your code, so if you have more\nthan one, you might want to refactor your code. Chapter 6 describes a powerful\nRust branching construct called `match` for these cases.\n\n#### Using `if` in a `let` Statement\n\nBecause `if` is an expression, we can use it on the right side of a `let`\nstatement to assign the outcome to a variable, as in Listing 3-2.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/listing-03-02/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 3-2: Assigning the result of an `if` expression\nto a variable</span>\n\nThe `number` variable will be bound to a value based on the outcome of the `if`\nexpression. Run this code to see what happens:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/listing-03-02/output.txt}}\n```\n\nRemember that blocks of code evaluate to the last expression in them, and\nnumbers by themselves are also expressions. In this case, the value of the\nwhole `if` expression depends on which block of code executes. This means the\nvalues that have the potential to be results from each arm of the `if` must be\nthe same type; in Listing 3-2, the results of both the `if` arm and the `else`\narm were `i32` integers. If the types are mismatched, as in the following\nexample, we’ll get an error:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-31-arms-must-return-same-type/src/main.rs}}\n```\n\nWhen we try to compile this code, we’ll get an error. The `if` and `else` arms\nhave value types that are incompatible, and Rust indicates exactly where to\nfind the problem in the program:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-31-arms-must-return-same-type/output.txt}}\n```\n\nThe expression in the `if` block evaluates to an integer, and the expression in\nthe `else` block evaluates to a string. This won’t work because variables must\nhave a single type, and Rust needs to know at compile time what type the\n`number` variable is, definitively. Knowing the type of `number` lets the\ncompiler verify the type is valid everywhere we use `number`. Rust wouldn’t be\nable to do that if the type of `number` was only determined at runtime; the\ncompiler would be more complex and would make fewer guarantees about the code\nif it had to keep track of multiple hypothetical types for any variable.\n\n### Repetition with Loops\n\nIt’s often useful to execute a block of code more than once. For this task,\nRust provides several *loops*, which will run through the code inside the loop\nbody to the end and then start immediately back at the beginning. To experiment\nwith loops, let’s make a new project called *loops*.\n\nRust has three kinds of loops: `loop`, `while`, and `for`. Let’s try each one.\n\n#### Repeating Code with `loop`\n\nThe `loop` keyword tells Rust to execute a block of code over and over again\nforever or until you explicitly tell it to stop.\n\nAs an example, change the *src/main.rs* file in your *loops* directory to look\nlike this:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-32-loop/src/main.rs}}\n```\n\nWhen we run this program, we’ll see `again!` printed over and over continuously\nuntil we stop the program manually. Most terminals support the keyboard\nshortcut <span class=\"keystroke\">ctrl-c</span> to interrupt a program that is\nstuck in a continual loop. Give it a try:\n\n<!-- manual-regeneration\ncd listings/ch03-common-programming-concepts/no-listing-32-loop\ncargo run\nCTRL-C\n-->\n\n```console\n$ cargo run\n   Compiling loops v0.1.0 (file:///projects/loops)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.29s\n     Running `target/debug/loops`\nagain!\nagain!\nagain!\nagain!\n^Cagain!\n```\n\nThe symbol `^C` represents where you pressed <span\nclass=\"keystroke\">ctrl-c</span>. You may or may not see the word `again!`\nprinted after the `^C`, depending on where the code was in the loop when it\nreceived the interrupt signal.\n\nFortunately, Rust also provides a way to break out of a loop using code. You\ncan place the `break` keyword within the loop to tell the program when to stop\nexecuting the loop. Recall that we did this in the guessing game in the\n[“Quitting After a Correct Guess”][quitting-after-a-correct-guess]<!-- ignore\n--> section of Chapter 2 to exit the program when the user won the game by\nguessing the correct number.\n\nWe also used `continue` in the guessing game, which in a loop tells the program\nto skip over any remaining code in this iteration of the loop and go to the\nnext iteration.\n\n#### Returning Values from Loops\n\nOne of the uses of a `loop` is to retry an operation you know might fail, such\nas checking whether a thread has completed its job. You might also need to pass\nthe result of that operation out of the loop to the rest of your code. To do\nthis, you can add the value you want returned after the `break` expression you\nuse to stop the loop; that value will be returned out of the loop so you can\nuse it, as shown here:\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-33-return-value-from-loop/src/main.rs}}\n```\n\nBefore the loop, we declare a variable named `counter` and initialize it to\n`0`. Then we declare a variable named `result` to hold the value returned from\nthe loop. On every iteration of the loop, we add `1` to the `counter` variable,\nand then check whether the `counter` is equal to `10`. When it is, we use the\n`break` keyword with the value `counter * 2`. After the loop, we use a\nsemicolon to end the statement that assigns the value to `result`. Finally, we\nprint the value in `result`, which in this case is `20`.\n\n#### Loop Labels to Disambiguate Between Multiple Loops\n\nIf you have loops within loops, `break` and `continue` apply to the innermost\nloop at that point. You can optionally specify a *loop label* on a loop that\nyou can then use with `break` or `continue` to specify that those keywords\napply to the labeled loop instead of the innermost loop. Loop labels must begin\nwith a single quote. Here’s an example with two nested loops:\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-32-5-loop-labels/src/main.rs}}\n```\n\nThe outer loop has the label `'counting_up`, and it will count up from 0 to 2.\nThe inner loop without a label counts down from 10 to 9. The first `break` that\ndoesn’t specify a label will exit the inner loop only. The `break\n'counting_up;` statement will exit the outer loop. This code prints:\n\n```console\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-32-5-loop-labels/output.txt}}\n```\n\n#### Conditional Loops with `while`\n\nA program will often need to evaluate a condition within a loop. While the\ncondition is `true`, the loop runs. When the condition ceases to be `true`, the\nprogram calls `break`, stopping the loop. It’s possible to implement behavior\nlike this using a combination of `loop`, `if`, `else`, and `break`; you could\ntry that now in a program, if you’d like. However, this pattern is so common\nthat Rust has a built-in language construct for it, called a `while` loop. In\nListing 3-3, we use `while` to loop the program three times, counting down each\ntime, and then, after the loop, print a message and exit.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/listing-03-03/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 3-3: Using a `while` loop to run code while a\ncondition holds true</span>\n\nThis construct eliminates a lot of nesting that would be necessary if you used\n`loop`, `if`, `else`, and `break`, and it’s clearer. While a condition\nevaluates to `true`, the code runs; otherwise, it exits the loop.\n\n#### Looping Through a Collection with `for`\n\nYou can choose to use the `while` construct to loop over the elements of a\ncollection, such as an array. For example, the loop in Listing 3-4 prints each\nelement in the array `a`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/listing-03-04/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 3-4: Looping through each element of a collection\nusing a `while` loop</span>\n\nHere, the code counts up through the elements in the array. It starts at index\n`0`, and then loops until it reaches the final index in the array (that is,\nwhen `index < 5` is no longer `true`). Running this code will print every\nelement in the array:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/listing-03-04/output.txt}}\n```\n\nAll five array values appear in the terminal, as expected. Even though `index`\nwill reach a value of `5` at some point, the loop stops executing before trying\nto fetch a sixth value from the array.\n\nHowever, this approach is error prone; we could cause the program to panic if\nthe index value or test condition is incorrect. For example, if you changed the\ndefinition of the `a` array to have four elements but forgot to update the\ncondition to `while index < 4`, the code would panic. It’s also slow, because\nthe compiler adds runtime code to perform the conditional check of whether the\nindex is within the bounds of the array on every iteration through the loop.\n\nAs a more concise alternative, you can use a `for` loop and execute some code\nfor each item in a collection. A `for` loop looks like the code in Listing 3-5.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/listing-03-05/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 3-5: Looping through each element of a collection\nusing a `for` loop</span>\n\nWhen we run this code, we’ll see the same output as in Listing 3-4. More\nimportantly, we’ve now increased the safety of the code and eliminated the\nchance of bugs that might result from going beyond the end of the array or not\ngoing far enough and missing some items.\n\nUsing the `for` loop, you wouldn’t need to remember to change any other code if\nyou changed the number of values in the array, as you would with the method\nused in Listing 3-4.\n\nThe safety and conciseness of `for` loops make them the most commonly used loop\nconstruct in Rust. Even in situations in which you want to run some code a\ncertain number of times, as in the countdown example that used a `while` loop\nin Listing 3-3, most Rustaceans would use a `for` loop. The way to do that\nwould be to use a `Range`, provided by the standard library, which generates\nall numbers in sequence starting from one number and ending before another\nnumber.\n\nHere’s what the countdown would look like using a `for` loop and another method\nwe’ve not yet talked about, `rev`, to reverse the range:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-34-for-range/src/main.rs}}\n```\n\nThis code is a bit nicer, isn’t it?\n\n## Summary\n\nYou made it! This was a sizable chapter: you learned about variables, scalar\nand compound data types, functions, comments, `if` expressions, and loops! To\npractice with the concepts discussed in this chapter, try building programs to\ndo the following:\n\n* Convert temperatures between Fahrenheit and Celsius.\n* Generate the *n*th Fibonacci number.\n* Print the lyrics to the Christmas carol “The Twelve Days of Christmas,”\n  taking advantage of the repetition in the song.\n\nWhen you’re ready to move on, we’ll talk about a concept in Rust that *doesn’t*\ncommonly exist in other programming languages: ownership.\n\n[comparing-the-guess-to-the-secret-number]:\nch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number\n[quitting-after-a-correct-guess]:\nch02-00-guessing-game-tutorial.html#quitting-after-a-correct-guess\n",
          "document_id": 20
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "What is the most unique Rust feature?",
              "id": 284,
              "answers": [
                {
                  "answer_id": 290,
                  "document_id": 21,
                  "question_id": 284,
                  "text": "Ownership",
                  "answer_start": 27,
                  "answer_end": 36,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the purpose of ownership?",
              "id": 285,
              "answers": [
                {
                  "answer_id": 291,
                  "document_id": 21,
                  "question_id": 285,
                  "text": " It enables Rust to make memory safety guarantees without\nneeding a garbage collector,",
                  "answer_start": 122,
                  "answer_end": 208,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "# Understanding Ownership\n\nOwnership is Rust’s most unique feature and has deep implications for the rest\nof the language. It enables Rust to make memory safety guarantees without\nneeding a garbage collector, so it’s important to understand how ownership\nworks. In this chapter, we’ll talk about ownership as well as several related\nfeatures: borrowing, slices, and how Rust lays data out in memory.\n",
          "document_id": 21
        }
      ]
    },
    {
      "paragraphs": [
        {
          "qas": [
            {
              "question": "What is '=>'?",
              "id": 89,
              "answers": [
                {
                  "answer_id": 427,
                  "document_id": 108,
                  "question_id": 89,
                  "text": "Part of match arm syntax",
                  "answer_start": 3358,
                  "answer_end": 3382,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of a '!' operator?",
              "id": 47,
              "answers": [
                {
                  "answer_id": 47,
                  "document_id": 108,
                  "question_id": 47,
                  "text": "Macro expansion",
                  "answer_start": 743,
                  "answer_end": 758,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of a '!' operator?",
              "id": 48,
              "answers": [
                {
                  "answer_id": 48,
                  "document_id": 108,
                  "question_id": 48,
                  "text": "Bitwise or logical complement | `Not`",
                  "answer_start": 781,
                  "answer_end": 818,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what operator can we check if some values are not equal?",
              "id": 49,
              "answers": [
                {
                  "answer_id": 49,
                  "document_id": 108,
                  "question_id": 49,
                  "text": "!=",
                  "answer_start": 824,
                  "answer_end": 826,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What operator stands for arithmetic remainder?",
              "id": 50,
              "answers": [
                {
                  "answer_id": 50,
                  "document_id": 108,
                  "question_id": 50,
                  "text": "%",
                  "answer_start": 889,
                  "answer_end": 890,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What operator stands for arithmetic remainder with assignment?",
              "id": 51,
              "answers": [
                {
                  "answer_id": 51,
                  "document_id": 108,
                  "question_id": 51,
                  "text": "%=",
                  "answer_start": 944,
                  "answer_end": 946,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does '&' operator stands for?",
              "id": 52,
              "answers": [
                {
                  "answer_id": 52,
                  "document_id": 108,
                  "question_id": 52,
                  "text": "Borrow",
                  "answer_start": 1049,
                  "answer_end": 1055,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does '&' operator stands for?",
              "id": 53,
              "answers": [
                {
                  "answer_id": 53,
                  "document_id": 108,
                  "question_id": 53,
                  "text": "Borrowed pointer type ",
                  "answer_start": 1119,
                  "answer_end": 1141,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does '&' operator stands for?",
              "id": 54,
              "answers": [
                {
                  "answer_id": 54,
                  "document_id": 108,
                  "question_id": 54,
                  "text": "Bitwise AND",
                  "answer_start": 1169,
                  "answer_end": 1180,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what operator can I calculate bitwaise AND with assignment?",
              "id": 55,
              "answers": [
                {
                  "answer_id": 55,
                  "document_id": 108,
                  "question_id": 55,
                  "text": "&=",
                  "answer_start": 1197,
                  "answer_end": 1199,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of '&&' operator?",
              "id": 56,
              "answers": [
                {
                  "answer_id": 56,
                  "document_id": 108,
                  "question_id": 56,
                  "text": "*",
                  "answer_start": 1327,
                  "answer_end": 1328,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What operator can I use for multiplication?",
              "id": 57,
              "answers": [
                {
                  "answer_id": 61,
                  "document_id": 108,
                  "question_id": 57,
                  "text": "*",
                  "answer_start": 1327,
                  "answer_end": 1328,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "For what should I use '*' operator?",
              "id": 59,
              "answers": [
                {
                  "answer_id": 59,
                  "document_id": 108,
                  "question_id": 59,
                  "text": "Dereference",
                  "answer_start": 1484,
                  "answer_end": 1495,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does '*=\" operator do?",
              "id": 58,
              "answers": [
                {
                  "answer_id": 58,
                  "document_id": 108,
                  "question_id": 58,
                  "text": "Arithmetic multiplication and assignment",
                  "answer_start": 1409,
                  "answer_end": 1449,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "For what should I use '*' operator?",
              "id": 60,
              "answers": [
                {
                  "answer_id": 60,
                  "document_id": 108,
                  "question_id": 60,
                  "text": "Raw pointer",
                  "answer_start": 1545,
                  "answer_end": 1556,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What operator is used with compound type constraint?",
              "id": 61,
              "answers": [
                {
                  "answer_id": 62,
                  "document_id": 108,
                  "question_id": 61,
                  "text": "+",
                  "answer_start": 1564,
                  "answer_end": 1565,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is '+' doing?",
              "id": 62,
              "answers": [
                {
                  "answer_id": 63,
                  "document_id": 108,
                  "question_id": 62,
                  "text": "Arithmetic addition ",
                  "answer_start": 1654,
                  "answer_end": 1674,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is '+' doing?",
              "id": 63,
              "answers": [
                {
                  "answer_id": 64,
                  "document_id": 108,
                  "question_id": 63,
                  "text": "Compound type constraint",
                  "answer_start": 1601,
                  "answer_end": 1625,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What should I use for arithmetic addition and assignment?",
              "id": 64,
              "answers": [
                {
                  "answer_id": 65,
                  "document_id": 108,
                  "question_id": 64,
                  "text": "+=",
                  "answer_start": 1687,
                  "answer_end": 1689,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I use ','?",
              "id": 65,
              "answers": [
                {
                  "answer_id": 66,
                  "document_id": 108,
                  "question_id": 65,
                  "text": "Argument and element separator",
                  "answer_start": 1783,
                  "answer_end": 1813,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of '-'?",
              "id": 66,
              "answers": [
                {
                  "answer_id": 67,
                  "document_id": 108,
                  "question_id": 66,
                  "text": "Arithmetic negation",
                  "answer_start": 1837,
                  "answer_end": 1856,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of '-'?",
              "id": 67,
              "answers": [
                {
                  "answer_id": 68,
                  "document_id": 108,
                  "question_id": 67,
                  "text": "Arithmetic subtraction ",
                  "answer_start": 1891,
                  "answer_end": 1914,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I subtract and assign in one step?",
              "id": 68,
              "answers": [
                {
                  "answer_id": 69,
                  "document_id": 108,
                  "question_id": 68,
                  "text": "-=",
                  "answer_start": 1927,
                  "answer_end": 1929,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can we mark function and closure return type?",
              "id": 69,
              "answers": [
                {
                  "answer_id": 70,
                  "document_id": 108,
                  "question_id": 69,
                  "text": "->`",
                  "answer_start": 2006,
                  "answer_end": 2009,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what operator can I get the member access?",
              "id": 70,
              "answers": [
                {
                  "answer_id": 406,
                  "document_id": 108,
                  "question_id": 70,
                  "text": ".",
                  "answer_start": 2102,
                  "answer_end": 2103,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of '..'",
              "id": 71,
              "answers": [
                {
                  "answer_id": 407,
                  "document_id": 108,
                  "question_id": 71,
                  "text": "Right-exclusive range literal",
                  "answer_start": 2190,
                  "answer_end": 2219,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What operator means right-inclusive range literal?",
              "id": 72,
              "answers": [
                {
                  "answer_id": 408,
                  "document_id": 108,
                  "question_id": 72,
                  "text": "`..`",
                  "answer_start": 2142,
                  "answer_end": 2146,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of '..'",
              "id": 73,
              "answers": [
                {
                  "answer_id": 409,
                  "document_id": 108,
                  "question_id": 73,
                  "text": " “And the rest” pattern binding",
                  "answer_start": 2426,
                  "answer_end": 2457,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What operator is an alternative for '..='",
              "id": 74,
              "answers": [
                {
                  "answer_id": 410,
                  "document_id": 108,
                  "question_id": 74,
                  "text": "...",
                  "answer_start": 2465,
                  "answer_end": 2468,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is '...' meaning?",
              "id": 75,
              "answers": [
                {
                  "answer_id": 411,
                  "document_id": 108,
                  "question_id": 75,
                  "text": "In a pattern: inclusive range pattern",
                  "answer_start": 2520,
                  "answer_end": 2557,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What operator can we use to divide?",
              "id": 76,
              "answers": [
                {
                  "answer_id": 412,
                  "document_id": 108,
                  "question_id": 76,
                  "text": "/",
                  "answer_start": 2565,
                  "answer_end": 2566,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What operator can I use for arithmetic division and assignment?",
              "id": 77,
              "answers": [
                {
                  "answer_id": 413,
                  "document_id": 108,
                  "question_id": 77,
                  "text": "/=",
                  "answer_start": 2619,
                  "answer_end": 2621,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What operator can I use for Constraints?",
              "id": 78,
              "answers": [
                {
                  "answer_id": 414,
                  "document_id": 108,
                  "question_id": 78,
                  "text": ":",
                  "answer_start": 2695,
                  "answer_end": 2696,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What operator is to be used for struct field initializer?",
              "id": 79,
              "answers": [
                {
                  "answer_id": 416,
                  "document_id": 108,
                  "question_id": 79,
                  "text": ":",
                  "answer_start": 2748,
                  "answer_end": 2749,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What can I use for loop label?",
              "id": 80,
              "answers": [
                {
                  "answer_id": 417,
                  "document_id": 108,
                  "question_id": 80,
                  "text": ":",
                  "answer_start": 2801,
                  "answer_end": 2802,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "For what can I use ';'?",
              "id": 81,
              "answers": [
                {
                  "answer_id": 418,
                  "document_id": 108,
                  "question_id": 81,
                  "text": "Statement and item terminator",
                  "answer_start": 2858,
                  "answer_end": 2887,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "For what can I use ';'?",
              "id": 82,
              "answers": [
                {
                  "answer_id": 419,
                  "document_id": 108,
                  "question_id": 82,
                  "text": "Part of fixed-size array syntax",
                  "answer_start": 2915,
                  "answer_end": 2946,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I perform left-shift?",
              "id": 83,
              "answers": [
                {
                  "answer_id": 420,
                  "document_id": 108,
                  "question_id": 83,
                  "text": "‹‹`",
                  "answer_start": 2954,
                  "answer_end": 2957,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I shift left and assign?",
              "id": 84,
              "answers": [
                {
                  "answer_id": 421,
                  "document_id": 108,
                  "question_id": 84,
                  "text": "‹‹=",
                  "answer_start": 3001,
                  "answer_end": 3004,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What symbol stands for 'less than' in comparison?",
              "id": 85,
              "answers": [
                {
                  "answer_id": 423,
                  "document_id": 108,
                  "question_id": 85,
                  "text": "‹",
                  "answer_start": 3070,
                  "answer_end": 3071,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What operator means 'less than or equal'?",
              "id": 86,
              "answers": [
                {
                  "answer_id": 424,
                  "document_id": 108,
                  "question_id": 86,
                  "text": "‹=",
                  "answer_start": 3132,
                  "answer_end": 3134,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what operator can I assign?",
              "id": 87,
              "answers": [
                {
                  "answer_id": 425,
                  "document_id": 108,
                  "question_id": 87,
                  "text": "=",
                  "answer_start": 3208,
                  "answer_end": 3209,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "For what can I use '==' operator in rust?",
              "id": 88,
              "answers": [
                {
                  "answer_id": 426,
                  "document_id": 108,
                  "question_id": 88,
                  "text": "Equality comparison",
                  "answer_start": 3297,
                  "answer_end": 3316,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can we check if something is greater than another value?",
              "id": 90,
              "answers": [
                {
                  "answer_id": 428,
                  "document_id": 108,
                  "question_id": 90,
                  "text": ">",
                  "answer_start": 3390,
                  "answer_end": 3391,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What operator will tell me if something is greater than or equal?",
              "id": 91,
              "answers": [
                {
                  "answer_id": 429,
                  "document_id": 108,
                  "question_id": 91,
                  "text": ">=",
                  "answer_start": 3455,
                  "answer_end": 3457,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what operator can I perform right shift?",
              "id": 92,
              "answers": [
                {
                  "answer_id": 430,
                  "document_id": 108,
                  "question_id": 92,
                  "text": ">>",
                  "answer_start": 3534,
                  "answer_end": 3536,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what symbol can I do the right shift with assignment?",
              "id": 93,
              "answers": [
                {
                  "answer_id": 431,
                  "document_id": 108,
                  "question_id": 93,
                  "text": ">>=",
                  "answer_start": 3582,
                  "answer_end": 3585,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is '@' used for?",
              "id": 94,
              "answers": [
                {
                  "answer_id": 432,
                  "document_id": 108,
                  "question_id": 94,
                  "text": "Pattern binding",
                  "answer_start": 3673,
                  "answer_end": 3688,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What operator is for bitwise exclusive OR?",
              "id": 95,
              "answers": [
                {
                  "answer_id": 433,
                  "document_id": 108,
                  "question_id": 95,
                  "text": "^",
                  "answer_start": 3696,
                  "answer_end": 3697,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the purpose of using '^='?",
              "id": 96,
              "answers": [
                {
                  "answer_id": 434,
                  "document_id": 108,
                  "question_id": 96,
                  "text": "Bitwise exclusive OR and assignment ",
                  "answer_start": 3776,
                  "answer_end": 3812,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What symbol can I use for error propagation?",
              "id": 97,
              "answers": [
                {
                  "answer_id": 435,
                  "document_id": 108,
                  "question_id": 97,
                  "text": "?",
                  "answer_start": 4153,
                  "answer_end": 4154,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is marked with 'ident' symbol?",
              "id": 98,
              "answers": [
                {
                  "answer_id": 436,
                  "document_id": 108,
                  "question_id": 98,
                  "text": "Named lifetime or loop label",
                  "answer_start": 4565,
                  "answer_end": 4593,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I mark a numeric literal of 8-bit number?",
              "id": 99,
              "answers": [
                {
                  "answer_id": 437,
                  "document_id": 108,
                  "question_id": 99,
                  "text": "...u8",
                  "answer_start": 4599,
                  "answer_end": 4604,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I assign a type of 32-bit integer to a variable?",
              "id": 100,
              "answers": [
                {
                  "answer_id": 438,
                  "document_id": 108,
                  "question_id": 100,
                  "text": "...i32",
                  "answer_start": 4608,
                  "answer_end": 4614,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I mark a float with 64 bits?",
              "id": 101,
              "answers": [
                {
                  "answer_id": 439,
                  "document_id": 108,
                  "question_id": 101,
                  "text": "...f64",
                  "answer_start": 4618,
                  "answer_end": 4624,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What data type is used for size of an array?",
              "id": 102,
              "answers": [
                {
                  "answer_id": 440,
                  "document_id": 108,
                  "question_id": 102,
                  "text": "...usize",
                  "answer_start": 4628,
                  "answer_end": 4636,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Name some examples of numeric literal of specific type",
              "id": 103,
              "answers": [
                {
                  "answer_id": 441,
                  "document_id": 108,
                  "question_id": 103,
                  "text": "...u8`, `...i32`, `...f64`, `...usize`, etc.",
                  "answer_start": 4599,
                  "answer_end": 4643,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What should I use for string literal?",
              "id": 104,
              "answers": [
                {
                  "answer_id": 442,
                  "document_id": 108,
                  "question_id": 104,
                  "text": "\"...\"",
                  "answer_start": 4684,
                  "answer_end": 4689,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what symbol can I make integer literals more readable?",
              "id": 105,
              "answers": [
                {
                  "answer_id": 443,
                  "document_id": 108,
                  "question_id": 105,
                  "text": "_",
                  "answer_start": 5180,
                  "answer_end": 5181,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How is \"ignored\" patter binding marked?",
              "id": 106,
              "answers": [
                {
                  "answer_id": 444,
                  "document_id": 108,
                  "question_id": 106,
                  "text": "_",
                  "answer_start": 5180,
                  "answer_end": 5181,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How is always empty bottom type for diverging functions marked?",
              "id": 107,
              "answers": [
                {
                  "answer_id": 445,
                  "document_id": 108,
                  "question_id": 107,
                  "text": "!",
                  "answer_start": 5121,
                  "answer_end": 5122,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What can I use fir raw byte string literal",
              "id": 108,
              "answers": [
                {
                  "answer_id": 446,
                  "document_id": 108,
                  "question_id": 108,
                  "text": "br\"...\"`, `br#\"...\"#`, `br##\"...\"##",
                  "answer_start": 4897,
                  "answer_end": 4932,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I construct an array of bytes instead of a string?",
              "id": 109,
              "answers": [
                {
                  "answer_id": 447,
                  "document_id": 108,
                  "question_id": 109,
                  "text": "`b\"...\"`",
                  "answer_start": 4811,
                  "answer_end": 4819,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is written with b'...'?",
              "id": 110,
              "answers": [
                {
                  "answer_id": 448,
                  "document_id": 108,
                  "question_id": 110,
                  "text": "ASCII byte literal",
                  "answer_start": 5057,
                  "answer_end": 5075,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I define namespace path?",
              "id": 111,
              "answers": [
                {
                  "answer_id": 449,
                  "document_id": 108,
                  "question_id": 111,
                  "text": "ident::ident",
                  "answer_start": 5476,
                  "answer_end": 5488,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I define path relative to the crate root?",
              "id": 112,
              "answers": [
                {
                  "answer_id": 451,
                  "document_id": 108,
                  "question_id": 112,
                  "text": "::path",
                  "answer_start": 5512,
                  "answer_end": 5518,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I use path relative to the current module?",
              "id": 113,
              "answers": [
                {
                  "answer_id": 452,
                  "document_id": 108,
                  "question_id": 113,
                  "text": "self::path",
                  "answer_start": 5595,
                  "answer_end": 5605,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is written with \"super::path\"?",
              "id": 114,
              "answers": [
                {
                  "answer_id": 453,
                  "document_id": 108,
                  "question_id": 114,
                  "text": "Path relative to the parent of the current module",
                  "answer_start": 5700,
                  "answer_end": 5749,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What should I use when it comes to associated constants, functions and types?",
              "id": 115,
              "answers": [
                {
                  "answer_id": 454,
                  "document_id": 108,
                  "question_id": 115,
                  "text": "type::ident",
                  "answer_start": 5755,
                  "answer_end": 5766,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I disambiguate a method call by naming the trait?",
              "id": 116,
              "answers": [
                {
                  "answer_id": 455,
                  "document_id": 108,
                  "question_id": 116,
                  "text": "trait::method(...)",
                  "answer_start": 5961,
                  "answer_end": 5979,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What can I use when two methods have the same name but different types?",
              "id": 117,
              "answers": [
                {
                  "answer_id": 456,
                  "document_id": 108,
                  "question_id": 117,
                  "text": "type::method(...)",
                  "answer_start": 6053,
                  "answer_end": 6070,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "For what should I use syntax: <type as trait>::method(...)?",
              "id": 118,
              "answers": [
                {
                  "answer_id": 457,
                  "document_id": 108,
                  "question_id": 118,
                  "text": "Disambiguating a method call by naming the trait and type",
                  "answer_start": 6182,
                  "answer_end": 6239,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is 'path<...>' doing?",
              "id": 119,
              "answers": [
                {
                  "answer_id": 458,
                  "document_id": 108,
                  "question_id": 119,
                  "text": "Specifies parameters to generic type in a type (e.g., `Vec‹u8>`) ",
                  "answer_start": 6445,
                  "answer_end": 6510,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is turbofish?",
              "id": 120,
              "answers": [
                {
                  "answer_id": 459,
                  "document_id": 108,
                  "question_id": 120,
                  "text": "Specifies parameters to generic type, function, or method in an expression",
                  "answer_start": 6547,
                  "answer_end": 6621,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is specifying  parameters to generic type, function or method in an expression?",
              "id": 121,
              "answers": [
                {
                  "answer_id": 460,
                  "document_id": 108,
                  "question_id": 121,
                  "text": "`path::‹...>`, `method::‹...>`",
                  "answer_start": 6514,
                  "answer_end": 6544,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I define generic function?",
              "id": 122,
              "answers": [
                {
                  "answer_id": 461,
                  "document_id": 108,
                  "question_id": 122,
                  "text": "fn ident‹...> ...",
                  "answer_start": 6689,
                  "answer_end": 6706,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I define generic structure?",
              "id": 123,
              "answers": [
                {
                  "answer_id": 462,
                  "document_id": 108,
                  "question_id": 123,
                  "text": "struct ident‹...> ...",
                  "answer_start": 6739,
                  "answer_end": 6760,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can i define generic enum?",
              "id": 124,
              "answers": [
                {
                  "answer_id": 463,
                  "document_id": 108,
                  "question_id": 124,
                  "text": "enum ident‹...> ...",
                  "answer_start": 6794,
                  "answer_end": 6813,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can we define generic implementation?",
              "id": 125,
              "answers": [
                {
                  "answer_id": 464,
                  "document_id": 108,
                  "question_id": 125,
                  "text": "impl‹...> ...",
                  "answer_start": 6849,
                  "answer_end": 6862,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of syntax: 'for <...> type'?",
              "id": 126,
              "answers": [
                {
                  "answer_id": 465,
                  "document_id": 108,
                  "question_id": 126,
                  "text": "Higher-ranked lifetime bounds",
                  "answer_start": 6918,
                  "answer_end": 6947,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I refer to a generic type where one or more associated types have specific assignments?",
              "id": 127,
              "answers": [
                {
                  "answer_id": 466,
                  "document_id": 108,
                  "question_id": 127,
                  "text": "type‹ident=type>",
                  "answer_start": 6953,
                  "answer_end": 6969,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I write generic parameter T that is constrained to types that implement U?",
              "id": 128,
              "answers": [
                {
                  "answer_id": 467,
                  "document_id": 108,
                  "question_id": 128,
                  "text": "T: U",
                  "answer_start": 7308,
                  "answer_end": 7312,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of syntax \"T:'a\"",
              "id": 129,
              "answers": [
                {
                  "answer_id": 468,
                  "document_id": 108,
                  "question_id": 129,
                  "text": " Generic type `T` must outlive lifetime `'a` (meaning the type cannot transitively contain any references with lifetimes shorter than `'a`)",
                  "answer_start": 7391,
                  "answer_end": 7530,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I say that generic type 'T' contains no borrowed references other than 'static' ones?",
              "id": 130,
              "answers": [
                {
                  "answer_id": 469,
                  "document_id": 108,
                  "question_id": 130,
                  "text": "T: 'static",
                  "answer_start": 7536,
                  "answer_end": 7546,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I allow generic type parameter to be dynamically sized type?",
              "id": 131,
              "answers": [
                {
                  "answer_id": 470,
                  "document_id": 108,
                  "question_id": 131,
                  "text": "T: ?Sized",
                  "answer_start": 7694,
                  "answer_end": 7703,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of '#[meta]'?",
              "id": 132,
              "answers": [
                {
                  "answer_id": 471,
                  "document_id": 108,
                  "question_id": 132,
                  "text": "Outer attribute ",
                  "answer_start": 8078,
                  "answer_end": 8094,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I use inner attribute?",
              "id": 133,
              "answers": [
                {
                  "answer_id": 472,
                  "document_id": 108,
                  "question_id": 133,
                  "text": "#![meta]",
                  "answer_start": 8099,
                  "answer_end": 8107,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of '$ident'?",
              "id": 134,
              "answers": [
                {
                  "answer_id": 473,
                  "document_id": 108,
                  "question_id": 134,
                  "text": "Macro substitution",
                  "answer_start": 8142,
                  "answer_end": 8160,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the syntax for macro capture?",
              "id": 135,
              "answers": [
                {
                  "answer_id": 475,
                  "document_id": 108,
                  "question_id": 135,
                  "text": "$ident:kind",
                  "answer_start": 8166,
                  "answer_end": 8177,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is '$()' standing for?",
              "id": 136,
              "answers": [
                {
                  "answer_id": 476,
                  "document_id": 108,
                  "question_id": 136,
                  "text": "Macro repetition",
                  "answer_start": 8209,
                  "answer_end": 8225,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can we use macro invocation?",
              "id": 137,
              "answers": [
                {
                  "answer_id": 477,
                  "document_id": 108,
                  "question_id": 137,
                  "text": "`ident!(...)`, `ident!{...}`, `ident![...]` ",
                  "answer_start": 8230,
                  "answer_end": 8274,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of '//' symbol?",
              "id": 138,
              "answers": [
                {
                  "answer_id": 478,
                  "document_id": 108,
                  "question_id": 138,
                  "text": " Line comment ",
                  "answer_start": 8451,
                  "answer_end": 8465,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I start inner line doc comment?",
              "id": 139,
              "answers": [
                {
                  "answer_id": 479,
                  "document_id": 108,
                  "question_id": 139,
                  "text": "//!",
                  "answer_start": 8470,
                  "answer_end": 8473,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I make outer line doc comment?",
              "id": 140,
              "answers": [
                {
                  "answer_id": 481,
                  "document_id": 108,
                  "question_id": 140,
                  "text": "///",
                  "answer_start": 8505,
                  "answer_end": 8508,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of /* ... */",
              "id": 141,
              "answers": [
                {
                  "answer_id": 482,
                  "document_id": 108,
                  "question_id": 141,
                  "text": "Block comment",
                  "answer_start": 8551,
                  "answer_end": 8564,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How is inner block doc comment marked?",
              "id": 142,
              "answers": [
                {
                  "answer_id": 483,
                  "document_id": 108,
                  "question_id": 142,
                  "text": "/*!...*/",
                  "answer_start": 8570,
                  "answer_end": 8578,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is /** ... */",
              "id": 143,
              "answers": [
                {
                  "answer_id": 484,
                  "document_id": 108,
                  "question_id": 143,
                  "text": "Outer block doc comment",
                  "answer_start": 8623,
                  "answer_end": 8646,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of (expr)",
              "id": 145,
              "answers": [
                {
                  "answer_id": 486,
                  "document_id": 108,
                  "question_id": 145,
                  "text": "Parenthesized expression",
                  "answer_start": 8887,
                  "answer_end": 8911,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I make single-element tuple?",
              "id": 146,
              "answers": [
                {
                  "answer_id": 488,
                  "document_id": 108,
                  "question_id": 146,
                  "text": "(expr,)",
                  "answer_start": 8917,
                  "answer_end": 8924,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I create single-element tuple type?",
              "id": 147,
              "answers": [
                {
                  "answer_id": 489,
                  "document_id": 108,
                  "question_id": 147,
                  "text": "(type,)",
                  "answer_start": 8965,
                  "answer_end": 8972,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I create tuple expression?",
              "id": 148,
              "answers": [
                {
                  "answer_id": 490,
                  "document_id": 108,
                  "question_id": 148,
                  "text": "(expr, ...)",
                  "answer_start": 9007,
                  "answer_end": 9018,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of syntax: (type,...)",
              "id": 149,
              "answers": [
                {
                  "answer_id": 491,
                  "document_id": 108,
                  "question_id": 149,
                  "text": "Tuple type",
                  "answer_start": 9059,
                  "answer_end": 9069,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How does function call expression looks like?",
              "id": 150,
              "answers": [
                {
                  "answer_id": 492,
                  "document_id": 108,
                  "question_id": 150,
                  "text": "expr(expr, ...)",
                  "answer_start": 9075,
                  "answer_end": 9090,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I index tuple?",
              "id": 151,
              "answers": [
                {
                  "answer_id": 493,
                  "document_id": 108,
                  "question_id": 151,
                  "text": "expr.0`, `expr.1`, etc.",
                  "answer_start": 9191,
                  "answer_end": 9214,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I create block expression?",
              "id": 152,
              "answers": [
                {
                  "answer_id": 494,
                  "document_id": 108,
                  "question_id": 152,
                  "text": "{...}",
                  "answer_start": 9408,
                  "answer_end": 9413,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I recognize struct literal?",
              "id": 153,
              "answers": [
                {
                  "answer_id": 495,
                  "document_id": 108,
                  "question_id": 153,
                  "text": "Type {...}",
                  "answer_start": 9439,
                  "answer_end": 9449,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How does array looks like?",
              "id": 154,
              "answers": [
                {
                  "answer_id": 496,
                  "document_id": 108,
                  "question_id": 154,
                  "text": "[...]",
                  "answer_start": 9652,
                  "answer_end": 9657,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I create array containing 'len' copies of 'expr'?",
              "id": 155,
              "answers": [
                {
                  "answer_id": 497,
                  "document_id": 108,
                  "question_id": 155,
                  "text": "[expr; len]",
                  "answer_start": 9680,
                  "answer_end": 9691,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How will array type containing 'len' instances of 'type' definition  look like?",
              "id": 156,
              "answers": [
                {
                  "answer_id": 498,
                  "document_id": 108,
                  "question_id": 156,
                  "text": "[type; len]",
                  "answer_start": 9748,
                  "answer_end": 9759,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I refer to index of collection?",
              "id": 157,
              "answers": [
                {
                  "answer_id": 499,
                  "document_id": 108,
                  "question_id": 157,
                  "text": "expr[expr]",
                  "answer_start": 9816,
                  "answer_end": 9826,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How will collection indexing pretending to be collection slicing look like?",
              "id": 158,
              "answers": [
                {
                  "answer_id": 500,
                  "document_id": 108,
                  "question_id": 158,
                  "text": "expr[..]`, `expr[a..]`, `expr[..b]`, `expr[a..b]",
                  "answer_start": 9891,
                  "answer_end": 9939,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I create empty tuple?",
              "id": 144,
              "answers": [
                {
                  "answer_id": 485,
                  "document_id": 108,
                  "question_id": 144,
                  "text": "()",
                  "answer_start": 8820,
                  "answer_end": 8822,
                  "answer_category": null
                }
              ],
              "is_impossible": false
            }
          ],
          "context": "## Appendix B: Operators and Symbols\n\nThis appendix contains a glossary of Rust’s syntax, including operators and\nother symbols that appear by themselves or in the context of paths, generics,\ntrait bounds, macros, attributes, comments, tuples, and brackets.\n\n### Operators\n\nTable B-1 contains the operators in Rust, an example of how the operator would\nappear in context, a short explanation, and whether that operator is\noverloadable. If an operator is overloadable, the relevant trait to use to\noverload that operator is listed.\n\n<span class=\"caption\">Table B-1: Operators</span>\n\n| Operator | Example | Explanation | Overloadable? |\n|----------|---------|-------------|---------------|\n| `!` | `ident!(...)`, `ident!{...}`, `ident![...]` | Macro expansion | |\n| `!` | `!expr` | Bitwise or logical complement | `Not` |\n| `!=` | `expr != expr` | Nonequality comparison | `PartialEq` |\n| `%` | `expr % expr` | Arithmetic remainder | `Rem` |\n| `%=` | `var %= expr` | Arithmetic remainder and assignment | `RemAssign` |\n| `&` | `&expr`, `&mut expr` | Borrow | |\n| `&` | `&type`, `&mut type`, `&'a type`, `&'a mut type` | Borrowed pointer type | |\n| `&` | `expr & expr` | Bitwise AND | `BitAnd` |\n| `&=` | `var &= expr` | Bitwise AND and assignment | `BitAndAssign` |\n| `&&` | `expr && expr` | Short-circuiting logical AND | |\n| `*` | `expr * expr` | Arithmetic multiplication | `Mul` |\n| `*=` | `var *= expr` | Arithmetic multiplication and assignment | `MulAssign` |\n| `*` | `*expr` | Dereference | `Deref` |\n| `*` | `*const type`, `*mut type` | Raw pointer | |\n| `+` | `trait + trait`, `'a + trait` | Compound type constraint | |\n| `+` | `expr + expr` | Arithmetic addition | `Add` |\n| `+=` | `var += expr` | Arithmetic addition and assignment | `AddAssign` |\n| `,` | `expr, expr` | Argument and element separator | |\n| `-` | `- expr` | Arithmetic negation | `Neg` |\n| `-` | `expr - expr` | Arithmetic subtraction | `Sub` |\n| `-=` | `var -= expr` | Arithmetic subtraction and assignment | `SubAssign` |\n| `->` | `fn(...) -> type`, <code>|;...|; -> type</code> | Function and closure return type | |\n| `.` | `expr.ident` | Member access | |\n| `..` | `..`, `expr..`, `..expr`, `expr..expr` | Right-exclusive range literal | `PartialOrd` |\n| `..=` | `..=expr`, `expr..=expr` | Right-inclusive range literal | `PartialOrd` |\n| `..` | `..expr` | Struct literal update syntax | |\n| `..` | `variant(x, ..)`, `struct_type { x, .. }` | “And the rest” pattern binding | |\n| `...` | `expr...expr` | (Deprecated, use `..=` instead) In a pattern: inclusive range pattern | |\n| `/` | `expr / expr` | Arithmetic division | `Div` |\n| `/=` | `var /= expr` | Arithmetic division and assignment | `DivAssign` |\n| `:` | `pat: type`, `ident: type` | Constraints | |\n| `:` | `ident: expr` | Struct field initializer | |\n| `:` | `'a: loop {...}` | Loop label | |\n| `;` | `expr;` | Statement and item terminator | |\n| `;` | `[...; len]` | Part of fixed-size array syntax | |\n| `<<` | `expr << expr` | Left-shift | `Shl` |\n| `<<=` | `var <<= expr` | Left-shift and assignment | `ShlAssign` |\n| `<` | `expr < expr` | Less than comparison | `PartialOrd` |\n| `<=` | `expr <= expr` | Less than or equal to comparison | `PartialOrd` |\n| `=` | `var = expr`, `ident = type` | Assignment/equivalence | |\n| `==` | `expr == expr` | Equality comparison | `PartialEq` |\n| `=>` | `pat => expr` | Part of match arm syntax | |\n| `>` | `expr > expr` | Greater than comparison | `PartialOrd` |\n| `>=` | `expr >= expr` | Greater than or equal to comparison | `PartialOrd` |\n| `>>` | `expr >> expr` | Right-shift | `Shr` |\n| `>>=` | `var >>= expr` | Right-shift and assignment | `ShrAssign` |\n| `@` | `ident @ pat` | Pattern binding | |\n| `^` | `expr ^ expr` | Bitwise exclusive OR | `BitXor` |\n| `^=` | `var ^= expr` | Bitwise exclusive OR and assignment | `BitXorAssign` |\n| <code>|;</code> | <code>pat |; pat</code> | Pattern alternatives | |\n| <code>|;</code> | <code>expr |; expr</code> | Bitwise OR | `BitOr` |\n| <code>|;=</code> | <code>var |;= expr</code> | Bitwise OR and assignment | `BitOrAssign` |\n| <code>|;|;</code> | <code>expr |;|; expr</code> | Short-circuiting logical OR | |\n| `?` | `expr?` | Error propagation | |\n\n### Non-operator Symbols\n\nThe following list contains all symbols that don’t function as operators; that\nis, they don’t behave like a function or method call.\n\nTable B-2 shows symbols that appear on their own and are valid in a variety of\nlocations.\n\n<span class=\"caption\">Table B-2: Stand-Alone Syntax</span>\n\n| Symbol | Explanation |\n|--------|-------------|\n| `'ident` | Named lifetime or loop label |\n| `...u8`, `...i32`, `...f64`, `...usize`, etc. | Numeric literal of specific type |\n| `\"...\"` | String literal |\n| `r\"...\"`, `r#\"...\"#`, `r##\"...\"##`, etc. | Raw string literal, escape characters not processed |\n| `b\"...\"` | Byte string literal; constructs an array of bytes instead of a string |\n| `br\"...\"`, `br#\"...\"#`, `br##\"...\"##`, etc. | Raw byte string literal, combination of raw and byte string literal |\n| `'...'` | Character literal |\n| `b'...'` | ASCII byte literal |\n| <code>|;...|; expr</code> | Closure |\n| `!` | Always empty bottom type for diverging functions |\n| `_` | “Ignored” pattern binding; also used to make integer literals readable |\n\nTable B-3 shows symbols that appear in the context of a path through the module\nhierarchy to an item.\n\n<span class=\"caption\">Table B-3: Path-Related Syntax</span>\n\n| Symbol | Explanation |\n|--------|-------------|\n| `ident::ident` | Namespace path |\n| `::path` | Path relative to the crate root (i.e., an explicitly absolute path) |\n| `self::path` | Path relative to the current module (i.e., an explicitly relative path).\n| `super::path` | Path relative to the parent of the current module |\n| `type::ident`, `<type as trait>::ident` | Associated constants, functions, and types |\n| `<type>::...` | Associated item for a type that cannot be directly named (e.g., `<&T>::...`, `<[T]>::...`, etc.) |\n| `trait::method(...)` | Disambiguating a method call by naming the trait that defines it |\n| `type::method(...)` | Disambiguating a method call by naming the type for which it’s defined |\n| `<type as trait>::method(...)` | Disambiguating a method call by naming the trait and type |\n\nTable B-4 shows symbols that appear in the context of using generic type\nparameters.\n\n<span class=\"caption\">Table B-4: Generics</span>\n\n| Symbol | Explanation |\n|--------|-------------|\n| `path<...>` | Specifies parameters to generic type in a type (e.g., `Vec<u8>`) |\n| `path::<...>`, `method::<...>` | Specifies parameters to generic type, function, or method in an expression; often referred to as turbofish (e.g., `\"42\".parse::<i32>()`) |\n| `fn ident<...> ...` | Define generic function |\n| `struct ident<...> ...` | Define generic structure |\n| `enum ident<...> ...` | Define generic enumeration |\n| `impl<...> ...` | Define generic implementation |\n| `for<...> type` | Higher-ranked lifetime bounds |\n| `type<ident=type>` | A generic type where one or more associated types have specific assignments (e.g., `Iterator<Item=T>`) |\n\nTable B-5 shows symbols that appear in the context of constraining generic type\nparameters with trait bounds.\n\n<span class=\"caption\">Table B-5: Trait Bound Constraints</span>\n\n| Symbol | Explanation |\n|--------|-------------|\n| `T: U` | Generic parameter `T` constrained to types that implement `U` |\n| `T: 'a` | Generic type `T` must outlive lifetime `'a` (meaning the type cannot transitively contain any references with lifetimes shorter than `'a`) |\n| `T: 'static` | Generic type `T` contains no borrowed references other than `'static` ones |\n| `'b: 'a` | Generic lifetime `'b` must outlive lifetime `'a` |\n| `T: ?Sized` | Allow generic type parameter to be a dynamically sized type |\n| `'a + trait`, `trait + trait` | Compound type constraint |\n\nTable B-6 shows symbols that appear in the context of calling or defining\nmacros and specifying attributes on an item.\n\n<span class=\"caption\">Table B-6: Macros and Attributes</span>\n\n| Symbol | Explanation |\n|--------|-------------|\n| `#[meta]` | Outer attribute |\n| `#![meta]` | Inner attribute |\n| `$ident` | Macro substitution |\n| `$ident:kind` | Macro capture |\n| `$(…)…` | Macro repetition |\n| `ident!(...)`, `ident!{...}`, `ident![...]` | Macro invocation |\n\nTable B-7 shows symbols that create comments.\n\n<span class=\"caption\">Table B-7: Comments</span>\n\n| Symbol | Explanation |\n|--------|-------------|\n| `//` | Line comment |\n| `//!` | Inner line doc comment |\n| `///` | Outer line doc comment |\n| `/*...*/` | Block comment |\n| `/*!...*/` | Inner block doc comment |\n| `/**...*/` | Outer block doc comment |\n\nTable B-8 shows symbols that appear in the context of using tuples.\n\n<span class=\"caption\">Table B-8: Tuples</span>\n\n| Symbol | Explanation |\n|--------|-------------|\n| `()` | Empty tuple (aka unit), both literal and type |\n| `(expr)` | Parenthesized expression |\n| `(expr,)` | Single-element tuple expression |\n| `(type,)` | Single-element tuple type |\n| `(expr, ...)` | Tuple expression |\n| `(type, ...)` | Tuple type |\n| `expr(expr, ...)` | Function call expression; also used to initialize tuple `struct`s and tuple `enum` variants |\n| `expr.0`, `expr.1`, etc. | Tuple indexing |\n\nTable B-9 shows the contexts in which curly braces are used.\n\n<span class=\"caption\">Table B-9: Curly Brackets</span>\n\n| Context | Explanation |\n|---------|-------------|\n| `{...}` | Block expression |\n| `Type {...}` | `struct` literal |\n\nTable B-10 shows the contexts in which square brackets are used.\n\n<span class=\"caption\">Table B-10: Square Brackets</span>\n\n| Context | Explanation |\n|---------|-------------|\n| `[...]` | Array literal |\n| `[expr; len]` | Array literal containing `len` copies of `expr` |\n| `[type; len]` | Array type containing `len` instances of `type` |\n| `expr[expr]` | Collection indexing. Overloadable (`Index`, `IndexMut`) |\n| `expr[..]`, `expr[a..]`, `expr[..b]`, `expr[a..b]` | Collection indexing pretending to be collection slicing, using `Range`, `RangeFrom`, `RangeTo`, or `RangeFull` as the “index” |\n",
          "document_id": 108
        }
      ]
    }
  ]
}